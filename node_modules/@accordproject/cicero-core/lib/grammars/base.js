/*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
'use strict'; // NOTE: backticks and \ both need to be escaped with an \

const BASE_GRAMMAR = "\n@{%\n    function compact(v) {\n        if (Array.isArray(v)) {\n            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);\n        } else {\n            return v;\n        }\n    }\n\n    function flatten(v) {\n        let r;\n        if (Array.isArray(v)) {\n            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);\n        } else {\n            r = v;\n        }\n        r = compact(r);\n        return r;\n        }\n%}\n\nNUMBER -> [0-9] \n{% (d) => {return parseInt(d[0]);}%}\n\nDOUBLE_NUMBER -> NUMBER NUMBER\n{% (d) => {return '' + d[0] + d[1]}%}\n\nMONTH -> DOUBLE_NUMBER\nDAY -> DOUBLE_NUMBER\nYEAR -> DOUBLE_NUMBER DOUBLE_NUMBER\n{% (d) => {return '' + d[0] + d[1]}%}\n\nDATE -> MONTH \"/\" DAY \"/\" YEAR\n{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}\n\nWord -> [\\S]:*\n{% (d) => {return d[0].join('');}%}\n\nBRACKET_PHRASE -> \"[\" Word (__ Word):* \"]\" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(\" \");}) %}\n\nAny -> \"{{\" [^]:* \"}}\"\nString -> dqstring {% id %}\nDouble -> decimal {% id %}\nInteger -> int {% id %}\nLong -> int {% id %}\nBoolean -> \"true\" {% (d) => { return true; } %} | \"false\" {% (d) => { return false; } %}\nDateTime -> DATE  {% id %}\n\n# https://github.com/kach/nearley/blob/master/builtin/number.ne\nunsigned_int -> [0-9]:+ {%\n    function(d) {\n        return parseInt(d[0].join(\"\"));\n    }\n%}\n\nint -> (\"-\"|\"+\"):? [0-9]:+ {%\n    function(d) {\n        if (d[0]) {\n            return parseInt(d[0][0]+d[1].join(\"\"));\n        } else {\n            return parseInt(d[1].join(\"\"));\n        }\n    }\n%}\n\nunsigned_decimal -> [0-9]:+ (\".\" [0-9]:+):? {%\n    function(d) {\n        return parseFloat(\n            d[0].join(\"\") +\n            (d[1] ? \".\"+d[1][1].join(\"\") : \"\")\n        );\n    }\n%}\n\ndecimal -> \"-\":? [0-9]:+ (\".\" [0-9]:+):? {%\n    function(d) {\n        return parseFloat(\n            (d[0] || \"\") +\n            d[1].join(\"\") +\n            (d[2] ? \".\"+d[2][1].join(\"\") : \"\")\n        );\n    }\n%}\n\npercentage -> decimal \"%\" {%\n    function(d) {\n        return d[0]/100;\n    }\n%}\n\njsonfloat -> \"-\":? [0-9]:+ (\".\" [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%\n    function(d) {\n        return parseFloat(\n            (d[0] || \"\") +\n            d[1].join(\"\") +\n            (d[2] ? \".\"+d[2][1].join(\"\") : \"\") +\n            (d[3] ? \"e\" + (d[3][1] || \"+\") + d[3][2].join(\"\") : \"\")\n        );\n    }\n%}\n\n# From https://github.com/kach/nearley/blob/master/builtin/string.ne\n# Matches various kinds of string literals\n\n# Double-quoted string\ndqstring -> \"\\\"\" dstrchar:* \"\\\"\" {% function(d) {return d[1].join(\"\"); } %}\nsqstring -> \"'\"  sstrchar:* \"'\"  {% function(d) {return d[1].join(\"\"); } %}\nbtstring -> \"`\"  [^`]:*    \"`\"  {% function(d) {return d[1].join(\"\"); } %}\n\ndstrchar -> [^\\\"\\n] {% id %}\n    | \"\\\\\" strescape {%\n    function(d) {\n        return JSON.parse(\"\\\"\"+d.join(\"\")+\"\\\"\");\n    }\n%}\n\nsstrchar -> [^\\\\'\\n] {% id %}\n    | \"\\\\\" strescape\n        {% function(d) { return JSON.parse(\"\\\"\"+d.join(\"\")+\"\\\"\"); } %}\n    | \"\\\\'\"\n        {% function(d) {return \"'\"; } %}\n\nstrescape -> [\"\\\\/bfnrt] {% id %}\n    | \"u\" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%\n    function(d) {\n        return d.join(\"\");\n    }\n%}\n\n# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne\n_  -> wschar:* {% function(d) {return null;} %}\n__ -> wschar:+ {% function(d) {return null;} %}\n\nwschar -> [ \\t\\n\\v\\f] {% id %}\n";
module.exports = BASE_GRAMMAR;