/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

const DATE_TIME_GRAMMAR = "\n@{%\nfunction toNumber(d) {\n\tif(d[1]) {\n\t\treturn parseInt('' + d[0] + d[1]);\n\t}\n\telse {\n\t\treturn parseInt('' + d[0]);\n\t}\n}\n%}\n\n# day ordinal, without leading zero (1 to 31)\nD -> [1-3] [0-9] {% (d, location, reject) => \n   {\n\t   const result = toNumber(d); \n\t   if (result > 31) {\n\t\t   return reject;\n\t   }\n\t   else {\n\t\t   return result;\n\t   }\n   } %} | \n      [1-9] {% (d) => {return toNumber(d)}%}\n\n# day ordinal, with leading zero (00 to 31), disallow 00\nDD -> [0-3] [0-9] {% (d, location, reject) => \n   {\n\t   const result = toNumber(d); \n\t   if (result === 0 || result > 31) {\n\t\t   return reject;\n\t   }\n\t   else {\n\t\t   return result;\n\t   }\n   } %} | \n      [3] [0-1] {% (d) => {return toNumber(d)}%}\n\n# month ordinal (1 to 12)\nM -> [1-9] | [1-9] [0-2] {% (d, location, reject) => \n\t{\n\t\tconst result = toNumber(d); \n\t\tif (result > 12) {\n\t\t\treturn reject;\n\t\t}\n\t\telse {\n\t\t\treturn result-1;\n\t\t}\n\t}\n%}\n\n# month ordinal, with leading zero (01 to 12)\nMM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |\n      [1] [0-2] {% (d) => {return toNumber(d)-1}%}\n\t   \n# 24 hour (0 to 23)\nH -> [0-9]\n{% (d) => {return parseInt(d)}%}\n\n# 24 hour, leading zero (00 to 23)\nHH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |\n      [2] [0-3] {% (d) => {return toNumber(d)}%}\n\n# minute, leading zero (00 to 59)\nmm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}\n\n# second, leading zero (00 to 59)\nss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}\n\n# milliseconds, 3 digits (000 to 999)\nSSS -> [0-9] [0-9] [0-9]\n{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}\n\n# year, 4 digits (0000 to 9999)\nYYYY ->[0-9] [0-9] [0-9] [0-9]\n{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}\n\n# Timezone Offset\nZ -> (\"+\"|\"-\") [0-9] [0-9] \":\" [0-9] [0-9]\n{% (d) => {return d[0] + d[1] + d[2] + \":\" + d[4] + d[5]}%}\n\nDateTime -> MM  \"/\" DD  \"/\" YYYY\n{% (d) => {return {\"$class\" : \"ParsedDateTime\",   \"months\": d[0],   \"days\": d[2],   \"years\": d[4]};}%}\n";
module.exports = DATE_TIME_GRAMMAR;