14:53:20 - [32minfo[39m: Using current directory as template folder
14:53:20 - [32minfo[39m: Loading a default text/sample.md file.
14:53:20 - [34mdebug[39m: loadFileContents
14:53:20 - [34mdebug[39m: loadFileContents
14:53:20 - [34mdebug[39m: loadFileContents
14:53:20 - [34mdebug[39m: fromDirectory
14:53:20 - [34mdebug[39m: loadFilesContents
14:53:20 - [34mdebug[39m: loadFilesContents
14:53:20 - [34mdebug[39m: loadFilesContents
14:53:20 - [34mdebug[39m: loadFilesContents
14:53:20 - [34mdebug[39m: loadFilesContents
14:53:20 - [34mdebug[39m: loadFilesContents
14:53:20 - [34mdebug[39m: loadFileContents
14:53:20 - [34mdebug[39m: fromDirectory
14:53:20 - [31merror[39m: The template targets Cicero version ^0.21.3 but the current Cicero version is 0.20.3.
14:53:20 - [31merror[39m: The template targets Cicero version ^0.21.3 but the current Cicero version is 0.20.3.
14:57:15 - [32minfo[39m: Using current directory as template folder
14:57:15 - [32minfo[39m: Loading a default text/sample.md file.
14:57:15 - [34mdebug[39m: loadFileContents
14:57:15 - [34mdebug[39m: loadFileContents
14:57:15 - [34mdebug[39m: loadFileContents
14:57:15 - [34mdebug[39m: fromDirectory
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFileContents
14:57:15 - [34mdebug[39m: fromDirectory
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFilesContents
14:57:15 - [34mdebug[39m: loadFileContents
14:57:16 - [34mdebug[39m: fromDirectory
14:57:16 - [34mdebug[39m: loadFileContents
14:57:16 - [34mdebug[39m: buildGrammar
14:57:16 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Name of the person to greet: ","text":"Name of the person to greet: {{","offset":0,"lineBreaks":0,"line":1,"col":1}
14:57:16 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":31,"lineBreaks":0,"line":1,"col":32}}
14:57:16 - [34mdebug[39m: element rule2 {"type":"LastChunk","value":".\n*Thank you!*","text":".\n*Thank you!*","offset":37,"lineBreaks":1,"line":1,"col":38}
14:57:16 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 
{% ([ rule0,rule1,rule2 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "1f801c27-d809-492f-9107-406c6eb48e1f",
        name : rule1,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Name of the person to greet: " 


rule1 -> String {% id %} # name 


rule2 -> ".\n*Thank you!*" 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        contractId : data[2],
        parties : data[4]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



14:57:16 - [34mdebug[39m: fromDirectory
14:57:16 - [34mdebug[39m: fromDirectory
14:57:16 - [34mdebug[39m: loadFilesContents
14:57:16 - [34mdebug[39m: loadFilesContents
14:57:16 - [34mdebug[39m: loadFilesContents
14:57:16 - [34mdebug[39m: loadFilesContents
14:57:16 - [34mdebug[39m: loadFilesContents
14:57:16 - [34mdebug[39m: loadFilesContents
14:57:16 - [34mdebug[39m: loadFileContents
14:57:17 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"1f801c27-d809-492f-9107-406c6eb48e1f","name":"Dan"}
14:57:17 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"1f801c27-d809-492f-9107-406c6eb48e1f","name":"Dan"}
14:57:17 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m1f801c27-d809-492f-9107-406c6eb48e1f[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mDan[39m[33m"[39m
[33m}[39m
14:58:32 - [32minfo[39m: Using current directory as template folder
14:58:32 - [32minfo[39m: Loading a default text/sample.md file.
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: fromDirectory
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: fromDirectory
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFilesContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:32 - [34mdebug[39m: loadFileContents
14:58:33 - [34mdebug[39m: fromDirectory
14:58:33 - [34mdebug[39m: loadFileContents
14:58:33 - [34mdebug[39m: buildGrammar
14:58:33 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"mietvertrag\nIch ","text":"mietvertrag\nIch {{","offset":0,"lineBreaks":1,"line":1,"col":1}
14:58:33 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":18,"lineBreaks":0,"line":2,"col":7}}
14:58:33 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine wohnung ","text":" vermiete meine wohnung {{","offset":31,"lineBreaks":0,"line":2,"col":20}
14:58:33 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":46}}
14:58:33 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":55}
14:58:33 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":61}}
14:58:33 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":69}
14:58:33 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":104,"lineBreaks":0,"line":2,"col":93}}
14:58:33 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":118,"lineBreaks":1,"line":2,"col":107}
14:58:33 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":125,"lineBreaks":0,"line":3,"col":7}}
14:58:33 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":140,"lineBreaks":0,"line":3,"col":22}
14:58:33 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":175,"lineBreaks":0,"line":3,"col":57}}
14:58:33 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":182,"lineBreaks":0,"line":3,"col":64}
14:58:33 - [31merror[39m: Template references a property 'eigentuemer' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 2 column 7
15:02:06 - [32minfo[39m: Using current directory as template folder
15:02:06 - [32minfo[39m: Loading a default text/sample.md file.
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: fromDirectory
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: fromDirectory
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFilesContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:06 - [34mdebug[39m: loadFileContents
15:02:07 - [34mdebug[39m: fromDirectory
15:02:07 - [34mdebug[39m: loadFileContents
15:02:07 - [34mdebug[39m: buildGrammar
15:02:07 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:02:07 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:02:07 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine wohnung ","text":" vermiete meine wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:02:07 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:02:07 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:02:07 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:02:07 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:02:07 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:02:07 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:02:07 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:02:07 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:02:07 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:02:07 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:02:07 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "7fb2e218-80f3-4753-ab4f-fb8e371d4a1f",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


rule7 -> String {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> String {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  String  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        eigentuemer : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_Datum : data[6],
        zweites_Datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



15:02:07 - [34mdebug[39m: fromDirectory
15:02:07 - [34mdebug[39m: fromDirectory
15:02:07 - [34mdebug[39m: loadFilesContents
15:02:07 - [34mdebug[39m: loadFilesContents
15:02:07 - [34mdebug[39m: loadFilesContents
15:02:07 - [34mdebug[39m: loadFilesContents
15:02:07 - [34mdebug[39m: loadFilesContents
15:02:07 - [34mdebug[39m: loadFilesContents
15:02:07 - [34mdebug[39m: loadFileContents
15:02:07 - [31merror[39m: Type error (at file logic/logic.ergo line 20 col 43). The field `name' does not exist in type `MyContract'
    return MyResponse{ output: "Hello " ++ contract.name ++ " " ++ request.input }
                                           ^^^^^^^^^^^^^                          
15:02:31 - [32minfo[39m: Using current directory as template folder
15:02:31 - [32minfo[39m: Loading a default text/sample.md file.
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: fromDirectory
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: fromDirectory
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFilesContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:31 - [34mdebug[39m: loadFileContents
15:02:32 - [34mdebug[39m: fromDirectory
15:02:32 - [34mdebug[39m: loadFileContents
15:02:32 - [34mdebug[39m: buildGrammar
15:02:32 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:02:32 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:02:32 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine wohnung ","text":" vermiete meine wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:02:32 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:02:32 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:02:32 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:02:32 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:02:32 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:02:32 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:02:32 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:02:32 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:02:32 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:02:32 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:02:32 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c4c06a05-3081-47f9-a16d-409c6d60686f",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


rule7 -> String {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> String {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  String  __  String  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



15:02:32 - [34mdebug[39m: fromDirectory
15:02:32 - [34mdebug[39m: fromDirectory
15:02:32 - [34mdebug[39m: loadFilesContents
15:02:32 - [34mdebug[39m: loadFilesContents
15:02:32 - [34mdebug[39m: loadFilesContents
15:02:32 - [34mdebug[39m: loadFilesContents
15:02:32 - [34mdebug[39m: loadFilesContents
15:02:32 - [34mdebug[39m: loadFilesContents
15:02:32 - [34mdebug[39m: loadFileContents
15:02:33 - [31merror[39m: invalid syntax at line 1 col 30:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von "20.08.2020"undefined
                               ^
Unexpected "W"

15:03:17 - [32minfo[39m: Using current directory as template folder
15:03:17 - [32minfo[39m: Loading a default text/sample.md file.
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: fromDirectory
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: fromDirectory
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFilesContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:17 - [34mdebug[39m: loadFileContents
15:03:18 - [34mdebug[39m: fromDirectory
15:03:18 - [34mdebug[39m: loadFileContents
15:03:18 - [34mdebug[39m: buildGrammar
15:03:18 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:03:18 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:03:18 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:03:18 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:03:18 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:03:18 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:03:18 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:03:18 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:03:18 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:03:18 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:03:18 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:03:18 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:03:18 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:03:18 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "8ba673bd-eada-48e8-8cf6-e97679cdf080",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


rule7 -> String {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> String {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  String  __  String  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



15:03:18 - [34mdebug[39m: fromDirectory
15:03:18 - [34mdebug[39m: fromDirectory
15:03:18 - [34mdebug[39m: loadFilesContents
15:03:18 - [34mdebug[39m: loadFilesContents
15:03:18 - [34mdebug[39m: loadFilesContents
15:03:18 - [34mdebug[39m: loadFilesContents
15:03:18 - [34mdebug[39m: loadFilesContents
15:03:18 - [34mdebug[39m: loadFilesContents
15:03:18 - [34mdebug[39m: loadFileContents
15:03:19 - [31merror[39m: invalid syntax at line 1 col 125:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von "20.08.2020" bis "20.08.21" für einen Monatlichen preis von "400€".
                                                                                                                              ^
Unexpected " "

15:03:49 - [32minfo[39m: Using current directory as template folder
15:03:49 - [32minfo[39m: Loading a default text/sample.md file.
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: fromDirectory
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: fromDirectory
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFilesContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [34mdebug[39m: loadFileContents
15:03:49 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "p" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 27 column 15
15:04:13 - [32minfo[39m: Using current directory as template folder
15:04:13 - [32minfo[39m: Loading a default text/sample.md file.
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: fromDirectory
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: fromDirectory
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFilesContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:13 - [34mdebug[39m: loadFileContents
15:04:15 - [34mdebug[39m: fromDirectory
15:04:15 - [34mdebug[39m: loadFileContents
15:04:15 - [34mdebug[39m: buildGrammar
15:04:15 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:04:15 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:04:15 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:04:15 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:04:15 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:04:15 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:04:15 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:04:15 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:04:15 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:04:15 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:04:15 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:04:15 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:04:15 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:04:15 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "8843344e-a835-4096-94eb-4500b2b245be",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


rule7 -> String {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> String {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Integer {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  String  __  String  __  Integer  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



15:04:15 - [34mdebug[39m: fromDirectory
15:04:15 - [34mdebug[39m: fromDirectory
15:04:15 - [34mdebug[39m: loadFilesContents
15:04:15 - [34mdebug[39m: loadFilesContents
15:04:15 - [34mdebug[39m: loadFilesContents
15:04:15 - [34mdebug[39m: loadFilesContents
15:04:15 - [34mdebug[39m: loadFilesContents
15:04:15 - [34mdebug[39m: loadFilesContents
15:04:15 - [34mdebug[39m: loadFileContents
15:04:16 - [31merror[39m: invalid syntax at line 1 col 125:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von "20.08.2020" bis "20.08.21" für einen Monatlichen preis von "400€".
                                                                                                                              ^
Unexpected " "

15:04:30 - [32minfo[39m: Using current directory as template folder
15:04:30 - [32minfo[39m: Loading a default text/sample.md file.
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: fromDirectory
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: fromDirectory
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFilesContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:30 - [34mdebug[39m: loadFileContents
15:04:31 - [31merror[39m: Undeclared type int in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
15:06:31 - [32minfo[39m: Using current directory as template folder
15:06:31 - [32minfo[39m: Loading a default text/sample.md file.
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: fromDirectory
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: fromDirectory
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFilesContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:31 - [34mdebug[39m: loadFileContents
15:06:32 - [34mdebug[39m: fromDirectory
15:06:32 - [34mdebug[39m: loadFileContents
15:06:32 - [34mdebug[39m: buildGrammar
15:06:32 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:06:32 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:06:32 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:06:32 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:06:32 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:06:32 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:06:32 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:06:32 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:06:32 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:06:32 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:06:32 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:06:32 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:06:32 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:06:32 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "7e345135-bb83-4cf8-a2f0-385c47548cb6",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


rule7 -> String {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> String {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  String  __  String  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



15:06:32 - [34mdebug[39m: fromDirectory
15:06:32 - [34mdebug[39m: fromDirectory
15:06:32 - [34mdebug[39m: loadFilesContents
15:06:32 - [34mdebug[39m: loadFilesContents
15:06:32 - [34mdebug[39m: loadFilesContents
15:06:32 - [34mdebug[39m: loadFilesContents
15:06:32 - [34mdebug[39m: loadFilesContents
15:06:32 - [34mdebug[39m: loadFilesContents
15:06:32 - [34mdebug[39m: loadFileContents
15:06:33 - [31merror[39m: invalid syntax at line 1 col 125:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von "20.08.2020" bis "20.08.21" für einen Monatlichen preis von "400€".
                                                                                                                              ^
Unexpected " "

15:07:41 - [32minfo[39m: Using current directory as template folder
15:07:41 - [32minfo[39m: Loading a default text/sample.md file.
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: fromDirectory
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: fromDirectory
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: fromDirectory
15:07:41 - [34mdebug[39m: loadFileContents
15:07:41 - [34mdebug[39m: buildGrammar
15:07:41 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:07:41 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:07:41 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:07:41 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:07:41 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:07:41 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:07:41 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:07:41 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:07:41 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:07:41 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:07:41 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:07:41 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:07:41 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:07:41 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "de5986ac-3c9f-4b86-9513-1aba96d6854f",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


rule7 -> String {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> String {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  String  __  String  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}



15:07:41 - [34mdebug[39m: fromDirectory
15:07:41 - [34mdebug[39m: fromDirectory
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:41 - [34mdebug[39m: loadFilesContents
15:07:42 - [34mdebug[39m: loadFilesContents
15:07:42 - [34mdebug[39m: loadFilesContents
15:07:42 - [34mdebug[39m: loadFileContents
15:07:42 - [31merror[39m: invalid syntax at line 1 col 113:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 20.08.2020 bis "20.08.21" für einen Monatlichen preis von "400€".
                                                                                                                  ^
Unexpected "2"

15:08:34 - [32minfo[39m: Using current directory as template folder
15:08:34 - [32minfo[39m: Loading a default text/sample.md file.
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: fromDirectory
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: fromDirectory
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFilesContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: loadFileContents
15:08:34 - [34mdebug[39m: fromDirectory
15:08:34 - [34mdebug[39m: loadFileContents
15:08:35 - [34mdebug[39m: buildGrammar
15:08:35 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:08:35 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:08:35 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:08:35 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:08:35 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:08:35 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:08:35 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:08:35 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:08:35 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:08:35 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:08:35 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:08:35 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:08:35 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:08:35 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "055c109d-b4e2-4821-b64a-5fc27f8c3495",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:08:35 - [34mdebug[39m: fromDirectory
15:08:35 - [34mdebug[39m: fromDirectory
15:08:35 - [34mdebug[39m: loadFilesContents
15:08:35 - [34mdebug[39m: loadFilesContents
15:08:35 - [34mdebug[39m: loadFilesContents
15:08:35 - [34mdebug[39m: loadFilesContents
15:08:35 - [34mdebug[39m: loadFilesContents
15:08:35 - [34mdebug[39m: loadFilesContents
15:08:35 - [34mdebug[39m: loadFileContents
15:08:35 - [31merror[39m: invalid syntax at line 1 col 113:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von "20.08.2020" bis "20.08.21" für einen Monatlichen preis von "400€".
                                                                                                                  ^
Unexpected "\""

15:10:07 - [32minfo[39m: Using current directory as template folder
15:10:07 - [32minfo[39m: Loading a default text/sample.md file.
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: fromDirectory
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: fromDirectory
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFilesContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:07 - [34mdebug[39m: loadFileContents
15:10:08 - [34mdebug[39m: fromDirectory
15:10:08 - [34mdebug[39m: loadFileContents
15:10:08 - [34mdebug[39m: buildGrammar
15:10:08 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:10:08 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:10:08 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:10:08 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:10:08 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:10:08 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:10:08 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:10:08 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:10:08 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:10:08 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:10:08 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:10:08 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:10:08 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:10:08 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "0bb682be-16fd-4eb9-8b41-7b8a8e30c505",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:10:08 - [34mdebug[39m: fromDirectory
15:10:08 - [34mdebug[39m: fromDirectory
15:10:08 - [34mdebug[39m: loadFilesContents
15:10:08 - [34mdebug[39m: loadFilesContents
15:10:08 - [34mdebug[39m: loadFilesContents
15:10:08 - [34mdebug[39m: loadFilesContents
15:10:08 - [34mdebug[39m: loadFilesContents
15:10:08 - [34mdebug[39m: loadFilesContents
15:10:08 - [34mdebug[39m: loadFileContents
15:10:09 - [31merror[39m: invalid syntax at line 1 col 113:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 20.08.2020 bis 20.08.21 für einen Monatlichen preis von "400€".
                                                                                                                  ^
Unexpected "2"

15:10:46 - [32minfo[39m: Using current directory as template folder
15:10:46 - [32minfo[39m: Loading a default text/sample.md file.
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: fromDirectory
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: fromDirectory
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFilesContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:46 - [34mdebug[39m: loadFileContents
15:10:47 - [34mdebug[39m: fromDirectory
15:10:47 - [34mdebug[39m: loadFileContents
15:10:47 - [34mdebug[39m: buildGrammar
15:10:47 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:10:47 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:10:47 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:10:47 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:10:47 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:10:47 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:10:47 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:10:47 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:10:47 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:10:47 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:10:47 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:10:47 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:10:47 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:10:47 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2e96134d-c68f-43c4-8efb-8eab92f052a4",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:10:47 - [34mdebug[39m: fromDirectory
15:10:47 - [34mdebug[39m: fromDirectory
15:10:47 - [34mdebug[39m: loadFilesContents
15:10:47 - [34mdebug[39m: loadFilesContents
15:10:47 - [34mdebug[39m: loadFilesContents
15:10:47 - [34mdebug[39m: loadFilesContents
15:10:47 - [34mdebug[39m: loadFilesContents
15:10:47 - [34mdebug[39m: loadFilesContents
15:10:47 - [34mdebug[39m: loadFileContents
15:10:48 - [31merror[39m: invalid syntax at line 1 col 113:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 20/08/2020 bis 20/08/21 für einen Monatlichen preis von "400€".
                                                                                                                  ^
Unexpected "2"

15:11:38 - [32minfo[39m: Using current directory as template folder
15:11:38 - [32minfo[39m: Loading a default text/sample.md file.
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: fromDirectory
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: fromDirectory
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFilesContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:38 - [34mdebug[39m: loadFileContents
15:11:39 - [34mdebug[39m: fromDirectory
15:11:39 - [34mdebug[39m: loadFileContents
15:11:40 - [34mdebug[39m: buildGrammar
15:11:40 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:11:40 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:11:40 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:11:40 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:11:40 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:11:40 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:11:40 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:11:40 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:11:40 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:11:40 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:11:40 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:11:40 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:11:40 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:11:40 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "36da4920-7c1e-47a8-9423-16885251dff4",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:11:40 - [34mdebug[39m: fromDirectory
15:11:40 - [34mdebug[39m: fromDirectory
15:11:40 - [34mdebug[39m: loadFilesContents
15:11:40 - [34mdebug[39m: loadFilesContents
15:11:40 - [34mdebug[39m: loadFilesContents
15:11:40 - [34mdebug[39m: loadFilesContents
15:11:40 - [34mdebug[39m: loadFilesContents
15:11:40 - [34mdebug[39m: loadFilesContents
15:11:40 - [34mdebug[39m: loadFileContents
15:11:40 - [31merror[39m: invalid syntax at line 1 col 123:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/21 für einen Monatlichen preis von "400€".
                                                                                                                            ^
Unexpected " "

15:12:12 - [32minfo[39m: Using current directory as template folder
15:12:12 - [32minfo[39m: Loading a default text/sample.md file.
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: fromDirectory
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: fromDirectory
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFilesContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:12 - [34mdebug[39m: loadFileContents
15:12:13 - [34mdebug[39m: fromDirectory
15:12:13 - [34mdebug[39m: loadFileContents
15:12:13 - [34mdebug[39m: buildGrammar
15:12:13 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:12:13 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:12:13 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:12:13 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:12:13 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:12:13 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:12:13 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:12:13 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:12:13 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:12:13 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:12:13 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:12:13 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:12:13 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:12:13 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "ab20abc8-d5e5-4c8a-805b-1c1516ecaac6",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:12:13 - [34mdebug[39m: fromDirectory
15:12:13 - [34mdebug[39m: fromDirectory
15:12:13 - [34mdebug[39m: loadFilesContents
15:12:13 - [34mdebug[39m: loadFilesContents
15:12:13 - [34mdebug[39m: loadFilesContents
15:12:13 - [34mdebug[39m: loadFilesContents
15:12:13 - [34mdebug[39m: loadFilesContents
15:12:13 - [34mdebug[39m: loadFilesContents
15:12:13 - [34mdebug[39m: loadFileContents
15:12:14 - [31merror[39m: invalid syntax at line 1 col 123:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400€".
                                                                                                                            ^
Unexpected " "

15:12:51 - [32minfo[39m: Using current directory as template folder
15:12:51 - [32minfo[39m: Loading a default text/sample.md file.
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: fromDirectory
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: fromDirectory
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFilesContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:51 - [34mdebug[39m: loadFileContents
15:12:52 - [34mdebug[39m: fromDirectory
15:12:52 - [34mdebug[39m: loadFileContents
15:12:52 - [34mdebug[39m: buildGrammar
15:12:52 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:12:52 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:12:52 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:12:52 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:12:52 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:12:52 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:12:52 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:12:52 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:12:52 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:12:52 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:12:52 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:12:52 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:12:52 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":1,"col":171}
15:12:52 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "d32f3524-cc3d-4cc8-911b-5f82c4514f5e",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:12:52 - [34mdebug[39m: fromDirectory
15:12:52 - [34mdebug[39m: fromDirectory
15:12:52 - [34mdebug[39m: loadFilesContents
15:12:52 - [34mdebug[39m: loadFilesContents
15:12:52 - [34mdebug[39m: loadFilesContents
15:12:52 - [34mdebug[39m: loadFilesContents
15:12:52 - [34mdebug[39m: loadFilesContents
15:12:52 - [34mdebug[39m: loadFilesContents
15:12:52 - [34mdebug[39m: loadFileContents
15:12:53 - [31merror[39m: invalid syntax at line 1 col 171:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400€".
                                                                                                                                                                            ^
Unexpected "\""

15:13:15 - [32minfo[39m: Using current directory as template folder
15:13:15 - [32minfo[39m: Loading a default text/sample.md file.
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: fromDirectory
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: fromDirectory
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: fromDirectory
15:13:15 - [34mdebug[39m: loadFileContents
15:13:15 - [34mdebug[39m: buildGrammar
15:13:15 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:13:15 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:13:15 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:13:15 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:13:15 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:13:15 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:13:15 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:13:15 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:13:15 - [34mdebug[39m: element rule8 {"type":"Chunk","value":"\nbis ","text":"\nbis {{","offset":106,"lineBreaks":1,"line":1,"col":107}
15:13:15 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":2,"col":7}}
15:13:15 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":2,"col":22}
15:13:15 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":2,"col":57}}
15:13:15 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":2,"col":64}
15:13:15 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "e4fc13a9-603a-41e3-9ba2-bc59b70643de",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> "\nbis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:13:15 - [34mdebug[39m: fromDirectory
15:13:15 - [34mdebug[39m: fromDirectory
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFilesContents
15:13:15 - [34mdebug[39m: loadFileContents
15:13:16 - [31merror[39m: invalid syntax at line 1 col 123:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400€".
                                                                                                                            ^
Unexpected " "

15:13:32 - [32minfo[39m: Using current directory as template folder
15:13:32 - [32minfo[39m: Loading a default text/sample.md file.
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: fromDirectory
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: fromDirectory
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFilesContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:32 - [34mdebug[39m: loadFileContents
15:13:33 - [34mdebug[39m: fromDirectory
15:13:33 - [34mdebug[39m: loadFileContents
15:13:33 - [34mdebug[39m: buildGrammar
15:13:33 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:13:33 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:13:33 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:13:33 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:13:33 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:13:33 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:13:33 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:13:33 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:13:33 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:13:33 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:13:33 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:13:33 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:13:33 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":1,"col":171}
15:13:33 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "7347481f-68d1-4e7c-9609-89ca8495618d",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:13:33 - [34mdebug[39m: fromDirectory
15:13:33 - [34mdebug[39m: fromDirectory
15:13:33 - [34mdebug[39m: loadFilesContents
15:13:33 - [34mdebug[39m: loadFilesContents
15:13:33 - [34mdebug[39m: loadFilesContents
15:13:33 - [34mdebug[39m: loadFilesContents
15:13:33 - [34mdebug[39m: loadFilesContents
15:13:33 - [34mdebug[39m: loadFilesContents
15:13:33 - [34mdebug[39m: loadFileContents
15:13:34 - [31merror[39m: invalid syntax at line 1 col 171:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400€".
                                                                                                                                                                            ^
Unexpected "\""

15:13:58 - [32minfo[39m: Using current directory as template folder
15:13:58 - [32minfo[39m: Loading a default text/sample.md file.
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: fromDirectory
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: fromDirectory
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFilesContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:58 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: fromDirectory
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: buildGrammar
15:13:59 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:13:59 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:13:59 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:13:59 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:13:59 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:13:59 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:13:59 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:13:59 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:13:59 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:13:59 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:13:59 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:13:59 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:13:59 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":170,"lineBreaks":0,"line":1,"col":171}
15:13:59 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "b4854461-5d8b-4e03-8329-ab60dbabc3c4",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:13:59 - [34mdebug[39m: fromDirectory
15:13:59 - [34mdebug[39m: fromDirectory
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFileContents
15:14:00 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"b4854461-5d8b-4e03-8329-ab60dbabc3c4","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":400}
15:14:00 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"b4854461-5d8b-4e03-8329-ab60dbabc3c4","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":"2020-08-20T00:00:00.000+02:00","zweites_Datum":"2021-08-20T00:00:00.000+02:00","preis":400}
15:14:00 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#b4854461-5d8b-4e03-8329-ab60dbabc3c4 missing required field name
15:14:50 - [32minfo[39m: Using current directory as template folder
15:14:50 - [32minfo[39m: Loading a default text/sample.md file.
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: fromDirectory
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: fromDirectory
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFilesContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:50 - [34mdebug[39m: loadFileContents
15:14:51 - [34mdebug[39m: fromDirectory
15:14:51 - [34mdebug[39m: loadFileContents
15:14:51 - [34mdebug[39m: buildGrammar
15:14:51 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:14:51 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:14:51 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:14:51 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:14:51 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:14:51 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:14:51 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:14:51 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:14:51 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:14:51 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:14:51 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:14:51 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:14:51 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":170,"lineBreaks":0,"line":1,"col":171}
15:14:51 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "5dbbd80a-9e24-4f46-92f2-710eae4b2842",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:14:51 - [34mdebug[39m: fromDirectory
15:14:51 - [34mdebug[39m: fromDirectory
15:14:51 - [34mdebug[39m: loadFilesContents
15:14:51 - [34mdebug[39m: loadFilesContents
15:14:51 - [34mdebug[39m: loadFilesContents
15:14:51 - [34mdebug[39m: loadFilesContents
15:14:51 - [34mdebug[39m: loadFilesContents
15:14:51 - [34mdebug[39m: loadFilesContents
15:14:51 - [34mdebug[39m: loadFileContents
15:14:52 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"5dbbd80a-9e24-4f46-92f2-710eae4b2842","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":400}
15:14:52 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"5dbbd80a-9e24-4f46-92f2-710eae4b2842","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":"2020-08-20T00:00:00.000+02:00","zweites_Datum":"2021-08-20T00:00:00.000+02:00","preis":400}
15:14:52 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#5dbbd80a-9e24-4f46-92f2-710eae4b2842 missing required field name
15:17:11 - [32minfo[39m: Using current directory as template folder
15:17:11 - [32minfo[39m: Loading a default text/sample.md file.
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: fromDirectory
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: fromDirectory
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFilesContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:11 - [34mdebug[39m: loadFileContents
15:17:12 - [34mdebug[39m: fromDirectory
15:17:12 - [34mdebug[39m: loadFileContents
15:17:12 - [34mdebug[39m: buildGrammar
15:17:12 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:17:12 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:17:12 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:17:12 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:17:12 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:17:12 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:17:12 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:17:12 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:17:12 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:17:12 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:17:12 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:17:12 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:17:12 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":170,"lineBreaks":0,"line":1,"col":171}
15:17:12 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "bccb9ab9-62a4-4625-8b28-9daeee4b3556",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> Double {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:17:12 - [34mdebug[39m: fromDirectory
15:17:12 - [34mdebug[39m: fromDirectory
15:17:12 - [34mdebug[39m: loadFilesContents
15:17:12 - [34mdebug[39m: loadFilesContents
15:17:12 - [34mdebug[39m: loadFilesContents
15:17:12 - [34mdebug[39m: loadFilesContents
15:17:12 - [34mdebug[39m: loadFilesContents
15:17:12 - [34mdebug[39m: loadFilesContents
15:17:12 - [34mdebug[39m: loadFileContents
15:17:13 - [31merror[39m: invalid syntax at line 1 col 171:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400"€.
                                                                                                                                                                            ^
Unexpected "\""

15:18:08 - [32minfo[39m: Using current directory as template folder
15:18:08 - [32minfo[39m: Loading a default text/sample.md file.
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: fromDirectory
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: fromDirectory
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFilesContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:08 - [34mdebug[39m: loadFileContents
15:18:09 - [34mdebug[39m: fromDirectory
15:18:09 - [34mdebug[39m: loadFileContents
15:18:09 - [34mdebug[39m: buildGrammar
15:18:09 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:18:09 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:18:09 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:18:09 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:18:09 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:18:09 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:18:09 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:18:09 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:18:09 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:18:09 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:18:09 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von","text":" für einen Monatlichen preis von{{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:18:09 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":162,"lineBreaks":0,"line":1,"col":163}}
15:18:09 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":169,"lineBreaks":0,"line":1,"col":170}
15:18:09 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c641a573-ee83-468b-b0a8-921b44dd3151",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von" 


rule11 -> Double {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:18:09 - [34mdebug[39m: fromDirectory
15:18:09 - [34mdebug[39m: fromDirectory
15:18:09 - [34mdebug[39m: loadFilesContents
15:18:09 - [34mdebug[39m: loadFilesContents
15:18:09 - [34mdebug[39m: loadFilesContents
15:18:09 - [34mdebug[39m: loadFilesContents
15:18:09 - [34mdebug[39m: loadFilesContents
15:18:09 - [34mdebug[39m: loadFilesContents
15:18:09 - [34mdebug[39m: loadFileContents
15:18:10 - [31merror[39m: invalid syntax at line 1 col 170:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400"€.
                                                                                                                                                                           ^
Unexpected " "

15:18:23 - [32minfo[39m: Using current directory as template folder
15:18:23 - [32minfo[39m: Loading a default text/sample.md file.
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: fromDirectory
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: fromDirectory
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFilesContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:23 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: fromDirectory
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: buildGrammar
15:18:24 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:18:24 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:18:24 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:18:24 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:18:24 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:18:24 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:18:24 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:18:24 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:18:24 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:18:24 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:18:24 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von","text":" für einen Monatlichen preis von{{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:18:24 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":162,"lineBreaks":0,"line":1,"col":163}}
15:18:24 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":169,"lineBreaks":0,"line":1,"col":170}
15:18:24 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "d510ef71-b4cc-4240-b029-186e2ba6a7b3",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von" 


rule11 -> Double {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  Double  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:18:24 - [34mdebug[39m: fromDirectory
15:18:24 - [34mdebug[39m: fromDirectory
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:25 - [31merror[39m: invalid syntax at line 1 col 170:

  Ich "Hendrik" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von"400"€.
                                                                                                                                                                           ^
Unexpected "\""

15:19:18 - [32minfo[39m: Using current directory as template folder
15:19:18 - [32minfo[39m: Loading a default text/sample.md file.
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: fromDirectory
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: fromDirectory
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFilesContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:18 - [34mdebug[39m: loadFileContents
15:19:19 - [34mdebug[39m: fromDirectory
15:19:19 - [34mdebug[39m: loadFileContents
15:19:19 - [34mdebug[39m: buildGrammar
15:19:19 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:19:19 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:19:19 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:19:19 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:19:19 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:19:19 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:19:19 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:19:19 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:19:19 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:19:19 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:19:19 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:19:19 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:19:19 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":170,"lineBreaks":0,"line":1,"col":171}
15:19:19 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "54ec184f-1660-4c97-9424-c96835f9824c",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:19:19 - [34mdebug[39m: fromDirectory
15:19:19 - [34mdebug[39m: fromDirectory
15:19:19 - [34mdebug[39m: loadFilesContents
15:19:19 - [34mdebug[39m: loadFilesContents
15:19:19 - [34mdebug[39m: loadFilesContents
15:19:19 - [34mdebug[39m: loadFilesContents
15:19:19 - [34mdebug[39m: loadFilesContents
15:19:19 - [34mdebug[39m: loadFilesContents
15:19:19 - [34mdebug[39m: loadFileContents
15:19:20 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"54ec184f-1660-4c97-9424-c96835f9824c","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
15:19:20 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"54ec184f-1660-4c97-9424-c96835f9824c","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":"2020-08-20T00:00:00.000+02:00","zweites_Datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
15:19:20 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#54ec184f-1660-4c97-9424-c96835f9824c missing required field name
15:24:19 - [32minfo[39m: Using current directory as template folder
15:24:19 - [32minfo[39m: Loading a default text/sample.md file.
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: fromDirectory
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: fromDirectory
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFilesContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:19 - [34mdebug[39m: loadFileContents
15:24:20 - [34mdebug[39m: fromDirectory
15:24:20 - [34mdebug[39m: loadFileContents
15:24:20 - [34mdebug[39m: buildGrammar
15:24:20 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:24:20 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:24:20 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:24:20 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:24:20 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:24:20 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:24:20 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:24:20 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:24:20 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:24:20 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:24:20 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:24:20 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:24:20 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":170,"lineBreaks":0,"line":1,"col":171}
15:24:20 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "3c9eac7a-4355-4cf7-a4a3-67683c351104",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:24:20 - [34mdebug[39m: fromDirectory
15:24:20 - [34mdebug[39m: fromDirectory
15:24:20 - [34mdebug[39m: loadFilesContents
15:24:20 - [34mdebug[39m: loadFilesContents
15:24:20 - [34mdebug[39m: loadFilesContents
15:24:20 - [34mdebug[39m: loadFilesContents
15:24:20 - [34mdebug[39m: loadFilesContents
15:24:20 - [34mdebug[39m: loadFilesContents
15:24:20 - [34mdebug[39m: loadFileContents
15:24:20 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"3c9eac7a-4355-4cf7-a4a3-67683c351104","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
15:24:20 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"3c9eac7a-4355-4cf7-a4a3-67683c351104","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":"2020-08-20T00:00:00.000+02:00","zweites_Datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
15:24:20 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#3c9eac7a-4355-4cf7-a4a3-67683c351104 missing required field name
15:35:51 - [32minfo[39m: Using current directory as template folder
15:35:51 - [32minfo[39m: Loading a default text/sample.md file.
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: fromDirectory
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: fromDirectory
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFilesContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:51 - [34mdebug[39m: loadFileContents
15:35:53 - [34mdebug[39m: fromDirectory
15:35:53 - [34mdebug[39m: loadFileContents
15:35:53 - [34mdebug[39m: buildGrammar
15:35:53 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:35:53 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:35:53 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:35:53 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:35:53 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:35:53 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:35:53 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:35:53 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:35:53 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:35:53 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:35:53 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:35:53 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:35:53 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":170,"lineBreaks":0,"line":1,"col":171}
15:35:53 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2a3a56de-ef7d-4213-9b88-0cc9c0dce1ca",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:35:53 - [34mdebug[39m: fromDirectory
15:35:53 - [34mdebug[39m: fromDirectory
15:35:53 - [34mdebug[39m: loadFilesContents
15:35:53 - [34mdebug[39m: loadFilesContents
15:35:53 - [34mdebug[39m: loadFilesContents
15:35:53 - [34mdebug[39m: loadFilesContents
15:35:53 - [34mdebug[39m: loadFilesContents
15:35:53 - [34mdebug[39m: loadFilesContents
15:35:53 - [34mdebug[39m: loadFileContents
15:35:53 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"2a3a56de-ef7d-4213-9b88-0cc9c0dce1ca","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
15:35:53 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"2a3a56de-ef7d-4213-9b88-0cc9c0dce1ca","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":"2020-08-20T00:00:00.000+02:00","zweites_Datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
15:35:53 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#2a3a56de-ef7d-4213-9b88-0cc9c0dce1ca missing required field name
15:49:03 - [32minfo[39m: Using current directory as template folder
15:49:03 - [32minfo[39m: Loading a default text/sample.md file.
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: fromDirectory
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: fromDirectory
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: fromDirectory
15:49:03 - [34mdebug[39m: loadFileContents
15:49:03 - [34mdebug[39m: buildGrammar
15:49:03 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:49:03 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:49:03 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:49:03 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:49:03 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:49:03 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:49:03 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:49:03 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:49:03 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:49:03 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
15:49:03 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
15:49:03 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":163,"lineBreaks":0,"line":1,"col":164}}
15:49:03 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":170,"lineBreaks":0,"line":1,"col":171}
15:49:03 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "fd0b225d-2586-45ad-83af-620ee6cedd73",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule10 -> " für einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:49:03 - [34mdebug[39m: fromDirectory
15:49:03 - [34mdebug[39m: fromDirectory
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFilesContents
15:49:03 - [34mdebug[39m: loadFileContents
15:49:04 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"fd0b225d-2586-45ad-83af-620ee6cedd73","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_Datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
15:49:04 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"fd0b225d-2586-45ad-83af-620ee6cedd73","eigentuemer":"Hendrik","adresse":"Böblinger Straße 10 Böblingen 77777","mieter":"Weisgerber","erstes_Datum":"2020-08-20T00:00:00.000+02:00","zweites_Datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
15:49:04 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#fd0b225d-2586-45ad-83af-620ee6cedd73 missing required field name
15:55:57 - [32minfo[39m: Using current directory as template folder
15:55:57 - [32minfo[39m: Loading a default text/sample.md file.
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: fromDirectory
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: fromDirectory
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: fromDirectory
15:55:57 - [34mdebug[39m: loadFileContents
15:55:57 - [34mdebug[39m: buildGrammar
15:55:57 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:55:57 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:55:57 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:55:57 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:55:57 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:55:57 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:55:57 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:55:57 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:55:57 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:55:57 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
15:55:57 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
15:55:57 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
15:55:57 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
15:55:57 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
15:55:57 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
15:55:57 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "f8147e45-9f38-44c6-99fe-c185f81ed377",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " für einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:55:57 - [34mdebug[39m: fromDirectory
15:55:57 - [34mdebug[39m: fromDirectory
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFilesContents
15:55:57 - [34mdebug[39m: loadFileContents
15:55:58 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa"vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

15:58:04 - [32minfo[39m: Using current directory as template folder
15:58:04 - [32minfo[39m: Loading a default text/sample.md file.
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: fromDirectory
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: fromDirectory
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFilesContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:04 - [34mdebug[39m: loadFileContents
15:58:05 - [34mdebug[39m: fromDirectory
15:58:05 - [34mdebug[39m: loadFileContents
15:58:05 - [34mdebug[39m: buildGrammar
15:58:05 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:58:05 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:58:05 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:58:05 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:58:05 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:58:05 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:58:05 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:58:05 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:58:05 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:58:05 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
15:58:05 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
15:58:05 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
15:58:05 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
15:58:05 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
15:58:05 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
15:58:05 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "50b1d290-6d3f-4cf3-b27d-84ad594007e8",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " für einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:58:05 - [34mdebug[39m: fromDirectory
15:58:05 - [34mdebug[39m: fromDirectory
15:58:05 - [34mdebug[39m: loadFilesContents
15:58:05 - [34mdebug[39m: loadFilesContents
15:58:05 - [34mdebug[39m: loadFilesContents
15:58:05 - [34mdebug[39m: loadFilesContents
15:58:05 - [34mdebug[39m: loadFilesContents
15:58:05 - [34mdebug[39m: loadFilesContents
15:58:05 - [34mdebug[39m: loadFileContents
15:58:06 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa"vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08-20-2020 bis 08-20-2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

15:59:16 - [32minfo[39m: Using current directory as template folder
15:59:16 - [32minfo[39m: Loading a default text/sample.md file.
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: fromDirectory
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: fromDirectory
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFilesContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: fromDirectory
15:59:16 - [34mdebug[39m: loadFileContents
15:59:16 - [34mdebug[39m: buildGrammar
15:59:16 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
15:59:16 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
15:59:16 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
15:59:16 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
15:59:16 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
15:59:16 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
15:59:16 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
15:59:16 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
15:59:16 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
15:59:16 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
15:59:16 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
15:59:16 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
15:59:16 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
15:59:16 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
15:59:16 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
15:59:16 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "8836ba7c-4394-48c4-9bf3-7303c86ef401",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " für einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:59:17 - [34mdebug[39m: fromDirectory
15:59:17 - [34mdebug[39m: fromDirectory
15:59:17 - [34mdebug[39m: loadFilesContents
15:59:17 - [34mdebug[39m: loadFilesContents
15:59:17 - [34mdebug[39m: loadFilesContents
15:59:17 - [34mdebug[39m: loadFilesContents
15:59:17 - [34mdebug[39m: loadFilesContents
15:59:17 - [34mdebug[39m: loadFilesContents
15:59:17 - [34mdebug[39m: loadFileContents
15:59:18 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa" vermiete meine Wohnung "Böblinger Straße 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08-20-2020 bis 08-20-2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

16:00:00 - [32minfo[39m: Using current directory as template folder
16:00:00 - [32minfo[39m: Loading a default text/sample.md file.
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: fromDirectory
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: fromDirectory
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFilesContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: fromDirectory
16:00:00 - [34mdebug[39m: loadFileContents
16:00:00 - [34mdebug[39m: buildGrammar
16:00:00 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:00:00 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:00:00 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:00:00 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:00:00 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:00:00 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:00:00 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:00:00 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:00:00 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:00:00 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
16:00:00 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
16:00:00 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
16:00:00 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
16:00:00 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
16:00:00 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
16:00:00 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c842b2f9-8f32-41bd-823f-a992eee587f2",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " für einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:00:01 - [34mdebug[39m: fromDirectory
16:00:01 - [34mdebug[39m: fromDirectory
16:00:01 - [34mdebug[39m: loadFilesContents
16:00:01 - [34mdebug[39m: loadFilesContents
16:00:01 - [34mdebug[39m: loadFilesContents
16:00:01 - [34mdebug[39m: loadFilesContents
16:00:01 - [34mdebug[39m: loadFilesContents
16:00:01 - [34mdebug[39m: loadFilesContents
16:00:01 - [34mdebug[39m: loadFileContents
16:00:02 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa" vermiete meine Wohnung "Böblinger Strasse 10 Böblingen 77777" an "Weisgerber" für den Zeitraum von 08-20-2020 bis 08-20-2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

16:00:36 - [32minfo[39m: Using current directory as template folder
16:00:36 - [32minfo[39m: Loading a default text/sample.md file.
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: fromDirectory
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: fromDirectory
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFilesContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: fromDirectory
16:00:37 - [34mdebug[39m: loadFileContents
16:00:37 - [34mdebug[39m: buildGrammar
16:00:37 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:00:37 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:00:37 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:00:37 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:00:37 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:00:37 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:00:37 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:00:37 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:00:37 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:00:37 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
16:00:37 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
16:00:37 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
16:00:37 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
16:00:37 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
16:00:37 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
16:00:37 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "745412d2-4b75-47f7-9162-f37378a27ec7",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " für einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:00:38 - [34mdebug[39m: fromDirectory
16:00:38 - [34mdebug[39m: fromDirectory
16:00:38 - [34mdebug[39m: loadFilesContents
16:00:38 - [34mdebug[39m: loadFilesContents
16:00:38 - [34mdebug[39m: loadFilesContents
16:00:38 - [34mdebug[39m: loadFilesContents
16:00:38 - [34mdebug[39m: loadFilesContents
16:00:38 - [34mdebug[39m: loadFilesContents
16:00:38 - [34mdebug[39m: loadFileContents
16:00:39 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" für den Zeitraum von 08-20-2020 bis 08-20-2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

16:01:23 - [32minfo[39m: Using current directory as template folder
16:01:23 - [32minfo[39m: Loading a default text/sample.md file.
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: fromDirectory
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: fromDirectory
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFilesContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:23 - [34mdebug[39m: loadFileContents
16:01:24 - [34mdebug[39m: fromDirectory
16:01:24 - [34mdebug[39m: loadFileContents
16:01:24 - [34mdebug[39m: buildGrammar
16:01:24 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:01:24 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:01:24 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:01:24 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:01:24 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:01:24 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:01:24 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:01:24 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:01:24 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:01:24 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
16:01:24 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
16:01:24 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
16:01:24 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" für einen Monatlichen preis von ","text":" für einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
16:01:24 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
16:01:24 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
16:01:24 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "4dd8cd39-0428-4654-a412-48db68e6236e",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " für einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:01:24 - [34mdebug[39m: fromDirectory
16:01:24 - [34mdebug[39m: fromDirectory
16:01:24 - [34mdebug[39m: loadFilesContents
16:01:24 - [34mdebug[39m: loadFilesContents
16:01:24 - [34mdebug[39m: loadFilesContents
16:01:24 - [34mdebug[39m: loadFilesContents
16:01:24 - [34mdebug[39m: loadFilesContents
16:01:24 - [34mdebug[39m: loadFilesContents
16:01:24 - [34mdebug[39m: loadFileContents
16:01:26 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" für den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

16:01:59 - [32minfo[39m: Using current directory as template folder
16:01:59 - [32minfo[39m: Loading a default text/sample.md file.
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: fromDirectory
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: fromDirectory
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFilesContents
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: loadFileContents
16:01:59 - [34mdebug[39m: loadFileContents
16:02:00 - [34mdebug[39m: fromDirectory
16:02:00 - [34mdebug[39m: loadFileContents
16:02:00 - [34mdebug[39m: buildGrammar
16:02:00 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:02:00 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:02:00 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:02:00 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:02:00 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:02:00 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:02:00 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:02:00 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_Datum","text":"erstes_Datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:02:00 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:02:00 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
16:02:00 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
16:02:00 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_Datum","text":"zweites_Datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
16:02:00 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
16:02:00 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":173,"lineBreaks":0,"line":1,"col":174}}
16:02:00 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":180,"lineBreaks":0,"line":1,"col":181}
16:02:00 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "084110b4-ca5a-4df1-b7fc-5cb4d6a105ce",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_Datum : rule7,
        zweites_Datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_Datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_Datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_Datum 


rule12 -> " fuer einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_Datum : data[8],
        zweites_Datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:02:00 - [34mdebug[39m: fromDirectory
16:02:00 - [34mdebug[39m: fromDirectory
16:02:00 - [34mdebug[39m: loadFilesContents
16:02:00 - [34mdebug[39m: loadFilesContents
16:02:00 - [34mdebug[39m: loadFilesContents
16:02:00 - [34mdebug[39m: loadFilesContents
16:02:00 - [34mdebug[39m: loadFilesContents
16:02:00 - [34mdebug[39m: loadFilesContents
16:02:00 - [34mdebug[39m: loadFileContents
16:02:01 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

16:03:10 - [32minfo[39m: Using current directory as template folder
16:03:10 - [32minfo[39m: Loading a default text/sample.md file.
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: fromDirectory
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: fromDirectory
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFilesContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:10 - [34mdebug[39m: loadFileContents
16:03:11 - [34mdebug[39m: fromDirectory
16:03:11 - [34mdebug[39m: loadFileContents
16:03:11 - [34mdebug[39m: buildGrammar
16:03:11 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:03:11 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:03:11 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:03:11 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:03:11 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:03:11 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:03:11 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:03:11 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:03:11 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:03:11 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
16:03:11 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
16:03:11 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
16:03:11 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
16:03:11 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":173,"lineBreaks":0,"line":1,"col":174}}
16:03:11 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":180,"lineBreaks":0,"line":1,"col":181}
16:03:11 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "00b38bc9-2681-4023-830b-45cead557de1",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule12 -> " fuer einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:03:11 - [34mdebug[39m: fromDirectory
16:03:11 - [34mdebug[39m: fromDirectory
16:03:11 - [34mdebug[39m: loadFilesContents
16:03:11 - [34mdebug[39m: loadFilesContents
16:03:11 - [34mdebug[39m: loadFilesContents
16:03:11 - [34mdebug[39m: loadFilesContents
16:03:11 - [34mdebug[39m: loadFilesContents
16:03:11 - [34mdebug[39m: loadFilesContents
16:03:11 - [34mdebug[39m: loadFileContents
16:03:12 - [31merror[39m: invalid syntax at line 1 col 15:

  Ich "Hendrik" "aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 für einen Monatlichen preis von "400"€.
                ^
Unexpected "\""

16:06:01 - [32minfo[39m: Using current directory as template folder
16:06:01 - [32minfo[39m: Loading a default text/sample.md file.
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: fromDirectory
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: fromDirectory
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFilesContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: fromDirectory
16:06:01 - [34mdebug[39m: loadFileContents
16:06:01 - [34mdebug[39m: buildGrammar
16:06:01 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:06:01 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:06:01 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:06:01 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:06:01 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:06:01 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:06:01 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:06:01 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:06:01 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" ","text":" {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:06:01 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":109,"lineBreaks":0,"line":1,"col":110}}
16:06:01 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":115,"lineBreaks":0,"line":1,"col":116}
16:06:01 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":122,"lineBreaks":0,"line":1,"col":123}}
16:06:01 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":137,"lineBreaks":0,"line":1,"col":138}
16:06:01 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":173,"lineBreaks":0,"line":1,"col":174}}
16:06:01 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":180,"lineBreaks":0,"line":1,"col":181}
16:06:01 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "8c4bedb2-fefb-444a-a066-aa481964a5d3",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " " 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule12 -> " fuer einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:06:02 - [34mdebug[39m: fromDirectory
16:06:02 - [34mdebug[39m: fromDirectory
16:06:02 - [34mdebug[39m: loadFilesContents
16:06:02 - [34mdebug[39m: loadFilesContents
16:06:02 - [34mdebug[39m: loadFilesContents
16:06:02 - [34mdebug[39m: loadFilesContents
16:06:02 - [34mdebug[39m: loadFilesContents
16:06:02 - [34mdebug[39m: loadFilesContents
16:06:02 - [34mdebug[39m: loadFileContents
16:06:03 - [31merror[39m: invalid syntax at line 1 col 14:

  Ich "Hendrik""aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von"400"€.
               ^
Unexpected "\""

16:06:37 - [32minfo[39m: Using current directory as template folder
16:06:37 - [32minfo[39m: Loading a default text/sample.md file.
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: fromDirectory
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: fromDirectory
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFilesContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:37 - [34mdebug[39m: loadFileContents
16:06:38 - [34mdebug[39m: fromDirectory
16:06:38 - [34mdebug[39m: loadFileContents
16:06:38 - [34mdebug[39m: buildGrammar
16:06:38 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:06:38 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:06:38 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:06:38 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:06:38 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:06:38 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:06:38 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:06:38 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:06:38 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":108,"lineBreaks":0,"line":1,"col":109}}
16:06:38 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":114,"lineBreaks":0,"line":1,"col":115}
16:06:38 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":121,"lineBreaks":0,"line":1,"col":122}}
16:06:38 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":136,"lineBreaks":0,"line":1,"col":137}
16:06:38 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
16:06:38 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
16:06:38 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "7413a8a9-cd96-4943-be89-6a6722a9ee63",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule12 -> " fuer einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:06:38 - [34mdebug[39m: fromDirectory
16:06:38 - [34mdebug[39m: fromDirectory
16:06:38 - [34mdebug[39m: loadFilesContents
16:06:38 - [34mdebug[39m: loadFilesContents
16:06:38 - [34mdebug[39m: loadFilesContents
16:06:38 - [34mdebug[39m: loadFilesContents
16:06:38 - [34mdebug[39m: loadFilesContents
16:06:38 - [34mdebug[39m: loadFilesContents
16:06:38 - [34mdebug[39m: loadFileContents
16:06:39 - [31merror[39m: invalid syntax at line 1 col 14:

  Ich "Hendrik""aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von"400"€.
               ^
Unexpected "\""

16:07:04 - [32minfo[39m: Using current directory as template folder
16:07:04 - [32minfo[39m: Loading a default text/sample.md file.
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: fromDirectory
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: fromDirectory
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFilesContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: fromDirectory
16:07:04 - [34mdebug[39m: loadFileContents
16:07:04 - [34mdebug[39m: buildGrammar
16:07:04 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:07:04 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:07:04 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:07:04 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:07:04 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:07:04 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:07:04 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:07:04 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:07:04 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":108,"lineBreaks":0,"line":1,"col":109}}
16:07:04 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":114,"lineBreaks":0,"line":1,"col":115}
16:07:04 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":121,"lineBreaks":0,"line":1,"col":122}}
16:07:04 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":136,"lineBreaks":0,"line":1,"col":137}
16:07:04 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
16:07:04 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
16:07:04 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "61a350bc-aa83-46e0-aff6-f3978c6d4323",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule12 -> " fuer einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:07:05 - [34mdebug[39m: fromDirectory
16:07:05 - [34mdebug[39m: fromDirectory
16:07:05 - [34mdebug[39m: loadFilesContents
16:07:05 - [34mdebug[39m: loadFilesContents
16:07:05 - [34mdebug[39m: loadFilesContents
16:07:05 - [34mdebug[39m: loadFilesContents
16:07:05 - [34mdebug[39m: loadFilesContents
16:07:05 - [34mdebug[39m: loadFilesContents
16:07:05 - [34mdebug[39m: loadFileContents
16:07:06 - [31merror[39m: invalid syntax at line 1 col 3:

  Icxdxxh "Hendrik""aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von"400"€.
    ^
Unexpected "x"

16:07:26 - [32minfo[39m: Using current directory as template folder
16:07:26 - [32minfo[39m: Loading a default text/sample.md file.
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: fromDirectory
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: fromDirectory
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFilesContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: fromDirectory
16:07:26 - [34mdebug[39m: loadFileContents
16:07:26 - [34mdebug[39m: buildGrammar
16:07:26 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:07:26 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:07:26 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:07:26 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:07:26 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:07:26 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:07:26 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:07:26 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:07:26 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":108,"lineBreaks":0,"line":1,"col":109}}
16:07:26 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" bis ","text":" bis {{","offset":114,"lineBreaks":0,"line":1,"col":115}
16:07:26 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":121,"lineBreaks":0,"line":1,"col":122}}
16:07:26 - [34mdebug[39m: element rule12 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":136,"lineBreaks":0,"line":1,"col":137}
16:07:26 - [34mdebug[39m: element rule13 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":172,"lineBreaks":0,"line":1,"col":173}}
16:07:26 - [34mdebug[39m: element rule14 {"type":"LastChunk","value":"€.","text":"€.","offset":179,"lineBreaks":0,"line":1,"col":180}
16:07:27 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule9 rule10 rule11 rule12 rule13 rule14 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule9,rule10,rule11,rule12,rule13,rule14 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "3f0ef556-badb-4619-9d23-5b34e186dde2",
        name : rule9,
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule11,
        preis : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule9 -> String {% id %} # name 


rule10 -> " bis " 


rule11 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule12 -> " fuer einen Monatlichen preis von " 


rule13 -> String {% id %} # preis 


rule14 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:07:27 - [34mdebug[39m: fromDirectory
16:07:27 - [34mdebug[39m: fromDirectory
16:07:27 - [34mdebug[39m: loadFilesContents
16:07:27 - [34mdebug[39m: loadFilesContents
16:07:27 - [34mdebug[39m: loadFilesContents
16:07:27 - [34mdebug[39m: loadFilesContents
16:07:27 - [34mdebug[39m: loadFilesContents
16:07:27 - [34mdebug[39m: loadFilesContents
16:07:27 - [34mdebug[39m: loadFileContents
16:07:28 - [31merror[39m: invalid syntax at line 1 col 3:

  Icdxxh "Hendrik""aa" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von"400"€.
    ^
Unexpected "d"

16:14:23 - [32minfo[39m: Using current directory as template folder
16:14:23 - [32minfo[39m: Loading a default text/sample.md file.
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: fromDirectory
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: fromDirectory
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFilesContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:23 - [34mdebug[39m: loadFileContents
16:14:25 - [34mdebug[39m: fromDirectory
16:14:25 - [34mdebug[39m: loadFileContents
16:14:25 - [34mdebug[39m: buildGrammar
16:14:25 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:14:25 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:14:25 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:14:25 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:14:25 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:14:25 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:14:25 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" für den Zeitraum von ","text":" für den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:14:25 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
16:14:25 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
16:14:25 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
16:14:25 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
16:14:25 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":164,"lineBreaks":0,"line":1,"col":165}}
16:14:25 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":171,"lineBreaks":0,"line":1,"col":172}
16:14:25 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "4f77c8f7-1be7-46f5-95cc-3e83de73f46f",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " für den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:14:25 - [34mdebug[39m: fromDirectory
16:14:25 - [34mdebug[39m: fromDirectory
16:14:25 - [34mdebug[39m: loadFilesContents
16:14:25 - [34mdebug[39m: loadFilesContents
16:14:25 - [34mdebug[39m: loadFilesContents
16:14:25 - [34mdebug[39m: loadFilesContents
16:14:25 - [34mdebug[39m: loadFilesContents
16:14:25 - [34mdebug[39m: loadFilesContents
16:14:25 - [34mdebug[39m: loadFileContents
16:14:26 - [31merror[39m: invalid syntax at line 1 col 96:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von "400"€.
                                                                                                 ^
Unexpected "u"

16:14:48 - [32minfo[39m: Using current directory as template folder
16:14:48 - [32minfo[39m: Loading a default text/sample.md file.
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: fromDirectory
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: fromDirectory
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFilesContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:48 - [34mdebug[39m: loadFileContents
16:14:50 - [34mdebug[39m: fromDirectory
16:14:50 - [34mdebug[39m: loadFileContents
16:14:50 - [34mdebug[39m: buildGrammar
16:14:50 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:14:50 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"eigentuemer","text":"eigentuemer","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:14:50 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":19,"lineBreaks":0,"line":1,"col":20}
16:14:50 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":45,"lineBreaks":0,"line":1,"col":46}}
16:14:50 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":54,"lineBreaks":0,"line":1,"col":55}
16:14:50 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":60,"lineBreaks":0,"line":1,"col":61}}
16:14:50 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":68,"lineBreaks":0,"line":1,"col":69}
16:14:50 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":93,"lineBreaks":0,"line":1,"col":94}}
16:14:50 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":107,"lineBreaks":0,"line":1,"col":108}
16:14:50 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":114,"lineBreaks":0,"line":1,"col":115}}
16:14:50 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":129,"lineBreaks":0,"line":1,"col":130}
16:14:50 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":165,"lineBreaks":0,"line":1,"col":166}}
16:14:50 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":172,"lineBreaks":0,"line":1,"col":173}
16:14:50 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "69039f66-491c-462a-a53d-298a6d3af48c",
        eigentuemer : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # eigentuemer 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:14:50 - [34mdebug[39m: fromDirectory
16:14:50 - [34mdebug[39m: fromDirectory
16:14:50 - [34mdebug[39m: loadFilesContents
16:14:50 - [34mdebug[39m: loadFilesContents
16:14:50 - [34mdebug[39m: loadFilesContents
16:14:50 - [34mdebug[39m: loadFilesContents
16:14:50 - [34mdebug[39m: loadFilesContents
16:14:50 - [34mdebug[39m: loadFilesContents
16:14:50 - [34mdebug[39m: loadFileContents
16:14:51 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"69039f66-491c-462a-a53d-298a6d3af48c","eigentuemer":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:14:51 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"69039f66-491c-462a-a53d-298a6d3af48c","eigentuemer":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:14:51 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#69039f66-491c-462a-a53d-298a6d3af48c missing required field name
16:15:17 - [32minfo[39m: Using current directory as template folder
16:15:17 - [32minfo[39m: Loading a default text/sample.md file.
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: fromDirectory
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: fromDirectory
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFilesContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: fromDirectory
16:15:17 - [34mdebug[39m: loadFileContents
16:15:17 - [34mdebug[39m: buildGrammar
16:15:17 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:15:17 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:15:17 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:15:17 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:15:17 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:15:17 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:15:17 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:15:17 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:15:17 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:15:17 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:15:17 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:15:17 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:15:17 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:15:17 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c5a083a5-3036-48b1-ac71-27a6ddb1197d",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        eigentuemer : data[2],
        adresse : data[4],
        mieter : data[6],
        erstes_datum : data[8],
        zweites_datum : data[10],
        preis : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:15:18 - [34mdebug[39m: fromDirectory
16:15:18 - [34mdebug[39m: fromDirectory
16:15:18 - [34mdebug[39m: loadFilesContents
16:15:18 - [34mdebug[39m: loadFilesContents
16:15:18 - [34mdebug[39m: loadFilesContents
16:15:18 - [34mdebug[39m: loadFilesContents
16:15:18 - [34mdebug[39m: loadFilesContents
16:15:18 - [34mdebug[39m: loadFilesContents
16:15:18 - [34mdebug[39m: loadFileContents
16:15:19 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"c5a083a5-3036-48b1-ac71-27a6ddb1197d","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:15:19 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"c5a083a5-3036-48b1-ac71-27a6ddb1197d","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:15:19 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#c5a083a5-3036-48b1-ac71-27a6ddb1197d missing required field eigentuemer
16:15:47 - [32minfo[39m: Using current directory as template folder
16:15:47 - [32minfo[39m: Loading a default text/sample.md file.
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: fromDirectory
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: fromDirectory
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFilesContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:47 - [34mdebug[39m: loadFileContents
16:15:48 - [34mdebug[39m: fromDirectory
16:15:48 - [34mdebug[39m: loadFileContents
16:15:48 - [34mdebug[39m: buildGrammar
16:15:48 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:15:48 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:15:48 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:15:48 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:15:48 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:15:48 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:15:48 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:15:48 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:15:48 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:15:48 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:15:48 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:15:48 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:15:48 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:15:48 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "a8232002-5b14-40b5-bee6-0dbdbd1117ee",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:15:48 - [34mdebug[39m: fromDirectory
16:15:48 - [34mdebug[39m: fromDirectory
16:15:48 - [34mdebug[39m: loadFilesContents
16:15:48 - [34mdebug[39m: loadFilesContents
16:15:48 - [34mdebug[39m: loadFilesContents
16:15:48 - [34mdebug[39m: loadFilesContents
16:15:48 - [34mdebug[39m: loadFilesContents
16:15:48 - [34mdebug[39m: loadFilesContents
16:15:48 - [34mdebug[39m: loadFileContents
16:15:49 - [31merror[39m: Type error (at file logic/logic.ergo line 20 col 43). The field `eigentuemer' does not exist in type `MyContract'
    return MyResponse{ output: "Hello " ++ contract.eigentuemer ++ " " ++ request.input }
                                           ^^^^^^^^^^^^^^^^^^^^                          
16:16:22 - [32minfo[39m: Using current directory as template folder
16:16:22 - [32minfo[39m: Loading a default text/sample.md file.
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: fromDirectory
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: fromDirectory
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFilesContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:22 - [34mdebug[39m: loadFileContents
16:16:23 - [34mdebug[39m: fromDirectory
16:16:23 - [34mdebug[39m: loadFileContents
16:16:23 - [34mdebug[39m: buildGrammar
16:16:23 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:16:23 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:16:23 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:16:23 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:16:23 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:16:23 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:16:23 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:16:23 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:16:23 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:16:23 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:16:23 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:16:23 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:16:23 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:16:23 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "398a6921-e944-4c49-a763-24704df2cc45",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:16:23 - [34mdebug[39m: fromDirectory
16:16:23 - [34mdebug[39m: fromDirectory
16:16:23 - [34mdebug[39m: loadFilesContents
16:16:23 - [34mdebug[39m: loadFilesContents
16:16:23 - [34mdebug[39m: loadFilesContents
16:16:23 - [34mdebug[39m: loadFilesContents
16:16:23 - [34mdebug[39m: loadFilesContents
16:16:23 - [34mdebug[39m: loadFilesContents
16:16:23 - [34mdebug[39m: loadFileContents
16:16:24 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"398a6921-e944-4c49-a763-24704df2cc45","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:16:24 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"398a6921-e944-4c49-a763-24704df2cc45","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:16:24 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m398a6921-e944-4c49-a763-24704df2cc45[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
[33m}[39m
16:17:58 - [32minfo[39m: Using current directory as template folder
16:17:58 - [32minfo[39m: Loading a default text/sample.md file.
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: fromDirectory
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: fromDirectory
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: loadFileContents
16:17:59 - [34mdebug[39m: fromDirectory
16:17:59 - [34mdebug[39m: loadFileContents
16:17:59 - [34mdebug[39m: buildGrammar
16:17:59 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:17:59 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:17:59 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:17:59 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:17:59 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:17:59 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:17:59 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:17:59 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:17:59 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:17:59 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:17:59 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:17:59 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:17:59 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:17:59 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "ce041979-97ac-4e88-94d5-4a3c4e6acd60",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:17:59 - [34mdebug[39m: fromDirectory
16:17:59 - [34mdebug[39m: fromDirectory
16:17:59 - [34mdebug[39m: loadFilesContents
16:17:59 - [34mdebug[39m: loadFilesContents
16:17:59 - [34mdebug[39m: loadFilesContents
16:17:59 - [34mdebug[39m: loadFilesContents
16:17:59 - [34mdebug[39m: loadFilesContents
16:17:59 - [34mdebug[39m: loadFilesContents
16:17:59 - [34mdebug[39m: loadFileContents
16:18:00 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"ce041979-97ac-4e88-94d5-4a3c4e6acd60","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:18:00 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"ce041979-97ac-4e88-94d5-4a3c4e6acd60","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:18:00 - [32minfo[39m: Creating file: melie.txt
16:18:00 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mce041979-97ac-4e88-94d5-4a3c4e6acd60[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
[33m}[39m
16:25:17 - [32minfo[39m: Using current directory as template folder
16:25:17 - [32minfo[39m: Loading a default data.json file.
16:25:17 - [31merror[39m: A data.json file is required. Try the --data flag or create a data.json in your template.
16:25:42 - [32minfo[39m: Using current directory as template folder
16:25:42 - [32minfo[39m: Loading a default text/sample.md file.
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: fromDirectory
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: fromDirectory
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFilesContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:42 - [34mdebug[39m: loadFileContents
16:25:43 - [34mdebug[39m: fromDirectory
16:25:43 - [34mdebug[39m: loadFileContents
16:25:43 - [34mdebug[39m: buildGrammar
16:25:43 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:25:43 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:25:43 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:25:43 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:25:43 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:25:43 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:25:43 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:25:43 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:25:43 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:25:43 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:25:43 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:25:43 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:25:43 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:25:43 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "7ad073df-d91a-426c-91f8-0aa705862ea3",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:25:43 - [34mdebug[39m: fromDirectory
16:25:43 - [34mdebug[39m: fromDirectory
16:25:43 - [34mdebug[39m: loadFilesContents
16:25:43 - [34mdebug[39m: loadFilesContents
16:25:43 - [34mdebug[39m: loadFilesContents
16:25:43 - [34mdebug[39m: loadFilesContents
16:25:43 - [34mdebug[39m: loadFilesContents
16:25:43 - [34mdebug[39m: loadFilesContents
16:25:43 - [34mdebug[39m: loadFileContents
16:25:44 - [31merror[39m: Compilation error (at file logic/logic.ergo line 19 col 33). Cannot find type with name 'Request'
  clause mietvertrag01(request : Request) : Response {
                                 ^^^^^^^              
16:26:11 - [32minfo[39m: Using current directory as template folder
16:26:11 - [32minfo[39m: Loading a default text/sample.md file.
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: fromDirectory
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: fromDirectory
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFilesContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: fromDirectory
16:26:11 - [34mdebug[39m: loadFileContents
16:26:11 - [34mdebug[39m: buildGrammar
16:26:11 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:26:11 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:26:11 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:26:11 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:26:11 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:26:11 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:26:11 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:26:11 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:26:11 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:26:11 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:26:11 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:26:11 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:26:11 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:26:12 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "dbe2f1d2-f84f-4fc7-9aa2-be2fcc90ac09",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:26:12 - [34mdebug[39m: fromDirectory
16:26:12 - [34mdebug[39m: fromDirectory
16:26:12 - [34mdebug[39m: loadFilesContents
16:26:12 - [34mdebug[39m: loadFilesContents
16:26:12 - [34mdebug[39m: loadFilesContents
16:26:12 - [34mdebug[39m: loadFilesContents
16:26:12 - [34mdebug[39m: loadFilesContents
16:26:12 - [34mdebug[39m: loadFilesContents
16:26:12 - [34mdebug[39m: loadFileContents
16:26:12 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"dbe2f1d2-f84f-4fc7-9aa2-be2fcc90ac09","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:26:12 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"dbe2f1d2-f84f-4fc7-9aa2-be2fcc90ac09","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:26:12 - [32minfo[39m: Creating file: data.json
16:26:12 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mdbe2f1d2-f84f-4fc7-9aa2-be2fcc90ac09[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
[33m}[39m
16:26:19 - [32minfo[39m: Using current directory as template folder
16:26:19 - [32minfo[39m: Loading a default data.json file.
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: fromDirectory
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: fromDirectory
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFilesContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:19 - [34mdebug[39m: loadFileContents
16:26:21 - [34mdebug[39m: fromDirectory
16:26:21 - [34mdebug[39m: loadFileContents
16:26:21 - [34mdebug[39m: buildGrammar
16:26:21 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:26:21 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:26:21 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:26:21 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:26:21 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:26:21 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:26:21 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:26:21 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:26:21 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:26:21 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:26:21 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:26:21 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:26:21 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:26:21 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "cadd9a7c-b1ea-43ff-9dc9-0546b28061a6",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


MyRequest -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyRequest",
        input : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyResponse -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyResponse",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:26:21 - [34mdebug[39m: fromDirectory
16:26:21 - [34mdebug[39m: fromDirectory
16:26:21 - [34mdebug[39m: loadFilesContents
16:26:21 - [34mdebug[39m: loadFilesContents
16:26:21 - [34mdebug[39m: loadFilesContents
16:26:21 - [34mdebug[39m: loadFilesContents
16:26:21 - [34mdebug[39m: loadFilesContents
16:26:21 - [34mdebug[39m: loadFilesContents
16:26:21 - [34mdebug[39m: loadFileContents
16:26:21 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"dbe2f1d2-f84f-4fc7-9aa2-be2fcc90ac09","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:26:21 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
16:26:21 - [34mdebug[39m: Calling eval with context [object Object]
16:26:21 - [32minfo[39m: Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von "400"€.
16:48:37 - [32minfo[39m: Using current directory as template folder
16:48:37 - [32minfo[39m: Loading a default text/sample.md file.
16:48:37 - [32minfo[39m: Loading a default request.json file.
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: fromDirectory
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: fromDirectory
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFilesContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:37 - [34mdebug[39m: loadFileContents
16:48:38 - [34mdebug[39m: fromDirectory
16:48:38 - [34mdebug[39m: loadFileContents
16:48:38 - [34mdebug[39m: buildGrammar
16:48:38 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:48:38 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:48:38 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:48:38 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:48:38 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:48:38 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:48:38 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:48:38 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:48:38 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:48:38 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:48:38 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:48:38 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:48:38 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:48:38 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "965ddcd7-e2c4-46b0-9e3f-501b89366fc3",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Request -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.Request",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


Response -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.Response",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:48:38 - [34mdebug[39m: fromDirectory
16:48:38 - [34mdebug[39m: fromDirectory
16:48:38 - [34mdebug[39m: loadFilesContents
16:48:38 - [34mdebug[39m: loadFilesContents
16:48:38 - [34mdebug[39m: loadFilesContents
16:48:38 - [34mdebug[39m: loadFilesContents
16:48:38 - [34mdebug[39m: loadFilesContents
16:48:38 - [34mdebug[39m: loadFilesContents
16:48:38 - [34mdebug[39m: loadFileContents
16:48:39 - [31merror[39m: System error. Util.TopoCycle(_)
16:51:16 - [32minfo[39m: Using current directory as template folder
16:51:16 - [32minfo[39m: Loading a default text/sample.md file.
16:51:16 - [32minfo[39m: Loading a default request.json file.
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: fromDirectory
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: fromDirectory
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFilesContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:16 - [34mdebug[39m: loadFileContents
16:51:17 - [34mdebug[39m: fromDirectory
16:51:17 - [34mdebug[39m: loadFileContents
16:51:17 - [34mdebug[39m: buildGrammar
16:51:17 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:51:17 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:51:17 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:51:17 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:51:17 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:51:17 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:51:17 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:51:17 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:51:17 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:51:17 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:51:17 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:51:17 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:51:17 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:51:17 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "99c4bf6c-bf57-4386-b8ed-d4c84c6ae722",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:51:17 - [34mdebug[39m: fromDirectory
16:51:17 - [34mdebug[39m: fromDirectory
16:51:17 - [34mdebug[39m: loadFilesContents
16:51:17 - [34mdebug[39m: loadFilesContents
16:51:17 - [34mdebug[39m: loadFilesContents
16:51:17 - [34mdebug[39m: loadFilesContents
16:51:17 - [34mdebug[39m: loadFilesContents
16:51:17 - [34mdebug[39m: loadFilesContents
16:51:17 - [34mdebug[39m: loadFileContents
16:51:18 - [31merror[39m: Compilation error (at file logic/logic.ergo line 19 col 33). Cannot find type with name 'anforderun'
  clause mietvertrag01(request : anforderun) : antwort {
                                 ^^^^^^^^^^             
16:51:41 - [32minfo[39m: Using current directory as template folder
16:51:41 - [32minfo[39m: Loading a default text/sample.md file.
16:51:41 - [32minfo[39m: Loading a default request.json file.
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: fromDirectory
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: fromDirectory
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFilesContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:41 - [34mdebug[39m: loadFileContents
16:51:42 - [34mdebug[39m: fromDirectory
16:51:42 - [34mdebug[39m: loadFileContents
16:51:42 - [34mdebug[39m: buildGrammar
16:51:42 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:51:42 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:51:42 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:51:42 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:51:42 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:51:42 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:51:42 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:51:42 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:51:42 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:51:42 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:51:42 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:51:42 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:51:42 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:51:42 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "271dcc4f-d291-42ef-abab-e63dad535c75",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:51:42 - [34mdebug[39m: fromDirectory
16:51:42 - [34mdebug[39m: fromDirectory
16:51:42 - [34mdebug[39m: loadFilesContents
16:51:42 - [34mdebug[39m: loadFilesContents
16:51:42 - [34mdebug[39m: loadFilesContents
16:51:42 - [34mdebug[39m: loadFilesContents
16:51:42 - [34mdebug[39m: loadFilesContents
16:51:42 - [34mdebug[39m: loadFilesContents
16:51:42 - [34mdebug[39m: loadFileContents
16:51:43 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"271dcc4f-d291-42ef-abab-e63dad535c75","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:51:43 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"271dcc4f-d291-42ef-abab-e63dad535c75","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:51:43 - [33mwarn[39m: A state file was not provided, initializing state. Try the --state flag or create a state.json in the root folder of your template.
16:51:43 - [34mdebug[39m: Engine processing clause init with state org.accordproject.cicero.contract.AccordContractState
16:51:43 - [31merror[39m: Type Request is not defined in namespace org.example.mietvertrag01
16:56:34 - [32minfo[39m: Using current directory as template folder
16:56:34 - [32minfo[39m: Loading a default text/sample.md file.
16:56:34 - [32minfo[39m: Loading a default request.json file.
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: fromDirectory
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: fromDirectory
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFilesContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:34 - [34mdebug[39m: loadFileContents
16:56:46 - [34mdebug[39m: fromDirectory
16:56:46 - [34mdebug[39m: loadFileContents
16:56:47 - [34mdebug[39m: buildGrammar
16:56:47 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
16:56:47 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
16:56:47 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
16:56:47 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
16:56:47 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
16:56:47 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
16:56:47 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
16:56:47 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
16:56:47 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
16:56:47 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
16:56:47 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
16:56:47 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
16:56:47 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
16:56:47 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "bc0a79b8-f59c-4680-8808-8aa25364d1c3",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:56:47 - [34mdebug[39m: fromDirectory
16:56:47 - [34mdebug[39m: fromDirectory
16:56:47 - [34mdebug[39m: loadFilesContents
16:56:47 - [34mdebug[39m: loadFilesContents
16:56:47 - [34mdebug[39m: loadFilesContents
16:56:47 - [34mdebug[39m: loadFilesContents
16:56:47 - [34mdebug[39m: loadFilesContents
16:56:47 - [34mdebug[39m: loadFilesContents
16:56:47 - [34mdebug[39m: loadFileContents
16:56:48 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"bc0a79b8-f59c-4680-8808-8aa25364d1c3","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
16:56:48 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"bc0a79b8-f59c-4680-8808-8aa25364d1c3","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
16:56:48 - [33mwarn[39m: A state file was not provided, initializing state. Try the --state flag or create a state.json in the root folder of your template.
16:56:48 - [34mdebug[39m: Engine processing clause init with state org.accordproject.cicero.contract.AccordContractState
16:56:48 - [34mdebug[39m: Engine processing request org.example.mietvertrag01.anforderung with state org.accordproject.cicero.contract.AccordContractState
16:56:48 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32mclause[39m[33m"[39m[33m: [39m[33m"[39m[35mmietvertrag@0.0.0-807c8553e328345afa435b9b5aae089f68b437cba404e8ce0e51bb0386e009ea[39m[33m"[39m[33m,[39m
  [33m"[39m[32mrequest[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.anforderung[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpay[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mresponse[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.antwort[39m[33m"[39m[33m,[39m
    [33m"[39m[32moutput[39m[33m"[39m[33m: [39m[33m"[39m[35mHello Hendrik 400[39m[33m"[39m[33m,[39m
    [33m"[39m[32mtransactionId[39m[33m"[39m[33m: [39m[33m"[39m[35me6ea2a55-43a5-44c0-b3da-5ee2e209cbfc[39m[33m"[39m[33m,[39m
    [33m"[39m[32mtimestamp[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T14:56:48.585Z[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mstate[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.cicero.contract.AccordContractState[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstateId[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.cicero.contract.AccordContractState#1[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32memit[39m[33m"[39m[33m: [39m[33m[[39m[33m][39m
[33m}[39m
17:10:08 - [32minfo[39m: Using current directory as template folder
17:10:08 - [32minfo[39m: Loading a default text/sample.md file.
17:10:08 - [32minfo[39m: Loading a default request.json file.
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: fromDirectory
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: fromDirectory
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFilesContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:08 - [34mdebug[39m: loadFileContents
17:10:09 - [34mdebug[39m: fromDirectory
17:10:09 - [34mdebug[39m: loadFileContents
17:10:09 - [34mdebug[39m: buildGrammar
17:10:09 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
17:10:09 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
17:10:09 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
17:10:09 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
17:10:09 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
17:10:09 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
17:10:09 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
17:10:09 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
17:10:09 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
17:10:09 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
17:10:09 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
17:10:09 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
17:10:09 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
17:10:09 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "f1b7e221-331f-4092-9a5e-4e1d7587b5bb",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:10:09 - [34mdebug[39m: fromDirectory
17:10:09 - [34mdebug[39m: fromDirectory
17:10:09 - [34mdebug[39m: loadFilesContents
17:10:09 - [34mdebug[39m: loadFilesContents
17:10:09 - [34mdebug[39m: loadFilesContents
17:10:09 - [34mdebug[39m: loadFilesContents
17:10:09 - [34mdebug[39m: loadFilesContents
17:10:09 - [34mdebug[39m: loadFilesContents
17:10:09 - [34mdebug[39m: loadFileContents
17:10:10 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"f1b7e221-331f-4092-9a5e-4e1d7587b5bb","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
17:10:10 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"f1b7e221-331f-4092-9a5e-4e1d7587b5bb","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
17:10:10 - [33mwarn[39m: A state file was not provided, initializing state. Try the --state flag or create a state.json in the root folder of your template.
17:10:10 - [34mdebug[39m: Engine processing clause init with state org.accordproject.cicero.contract.AccordContractState
17:10:10 - [34mdebug[39m: Engine processing request org.example.mietvertrag01.anforderung with state org.accordproject.cicero.contract.AccordContractState
17:10:10 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32mclause[39m[33m"[39m[33m: [39m[33m"[39m[35mmietvertrag@0.0.0-2bc2e08828e190c7d8271bc53b1bcd6dc550a15fd6715495ed4ef01cac43b9d8[39m[33m"[39m[33m,[39m
  [33m"[39m[32mrequest[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.anforderung[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpay[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mresponse[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.antwort[39m[33m"[39m[33m,[39m
    [33m"[39m[32moutput[39m[33m"[39m[33m: [39m[33m"[39m[35mHello Weisgerber Du hast mir noch nicht die Miete gezahlt. Ich Erwarte bis nächste Woche €400[39m[33m"[39m[33m,[39m
    [33m"[39m[32mtransactionId[39m[33m"[39m[33m: [39m[33m"[39m[35m6d3fe847-5b71-4388-9f38-d479ab16c1e8[39m[33m"[39m[33m,[39m
    [33m"[39m[32mtimestamp[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T15:10:10.616Z[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mstate[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.cicero.contract.AccordContractState[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstateId[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.cicero.contract.AccordContractState#1[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32memit[39m[33m"[39m[33m: [39m[33m[[39m[33m][39m
[33m}[39m
9:10:54 - [32minfo[39m: Using current directory as template folder
9:10:54 - [32minfo[39m: Loading a default text/sample.md file.
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: fromDirectory
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: fromDirectory
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFilesContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:54 - [34mdebug[39m: loadFileContents
9:10:55 - [34mdebug[39m: fromDirectory
9:10:55 - [34mdebug[39m: loadFileContents
9:10:55 - [34mdebug[39m: buildGrammar
9:10:55 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
9:10:55 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
9:10:55 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
9:10:55 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
9:10:55 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
9:10:55 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
9:10:55 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
9:10:55 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
9:10:55 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
9:10:55 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
9:10:55 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
9:10:55 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
9:10:55 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
9:10:55 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c5d8f415-cbea-40bb-b9f6-801d9c869903",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:10:55 - [34mdebug[39m: fromDirectory
9:10:55 - [34mdebug[39m: fromDirectory
9:10:55 - [34mdebug[39m: loadFilesContents
9:10:55 - [34mdebug[39m: loadFilesContents
9:10:55 - [34mdebug[39m: loadFilesContents
9:10:55 - [34mdebug[39m: loadFilesContents
9:10:55 - [34mdebug[39m: loadFilesContents
9:10:55 - [34mdebug[39m: loadFilesContents
9:10:55 - [34mdebug[39m: loadFileContents
9:10:57 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"c5d8f415-cbea-40bb-b9f6-801d9c869903","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
9:10:57 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"c5d8f415-cbea-40bb-b9f6-801d9c869903","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
9:10:57 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mc5d8f415-cbea-40bb-b9f6-801d9c869903[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
[33m}[39m
9:13:01 - [32minfo[39m: Using current directory as template folder
9:13:01 - [32minfo[39m: Loading a default text/sample.md file.
9:13:01 - [32minfo[39m: Loading a default request.json file.
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: fromDirectory
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: fromDirectory
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFilesContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:01 - [34mdebug[39m: loadFileContents
9:13:02 - [34mdebug[39m: fromDirectory
9:13:02 - [34mdebug[39m: loadFileContents
9:13:02 - [34mdebug[39m: buildGrammar
9:13:02 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
9:13:02 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
9:13:02 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
9:13:02 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
9:13:02 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
9:13:02 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
9:13:02 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
9:13:02 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
9:13:02 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
9:13:02 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
9:13:02 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
9:13:02 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
9:13:02 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
9:13:02 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "f2b47244-1fa8-4994-a20c-07cbd8034e2e",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:13:02 - [34mdebug[39m: fromDirectory
9:13:02 - [34mdebug[39m: fromDirectory
9:13:02 - [34mdebug[39m: loadFilesContents
9:13:02 - [34mdebug[39m: loadFilesContents
9:13:02 - [34mdebug[39m: loadFilesContents
9:13:02 - [34mdebug[39m: loadFilesContents
9:13:02 - [34mdebug[39m: loadFilesContents
9:13:02 - [34mdebug[39m: loadFilesContents
9:13:02 - [34mdebug[39m: loadFileContents
9:13:03 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"f2b47244-1fa8-4994-a20c-07cbd8034e2e","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400"}
9:13:03 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"f2b47244-1fa8-4994-a20c-07cbd8034e2e","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
9:13:03 - [33mwarn[39m: A state file was not provided, initializing state. Try the --state flag or create a state.json in the root folder of your template.
9:13:03 - [34mdebug[39m: Engine processing clause init with state org.accordproject.cicero.contract.AccordContractState
9:13:03 - [34mdebug[39m: Engine processing request org.example.mietvertrag01.anforderung with state org.accordproject.cicero.contract.AccordContractState
9:13:03 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32mclause[39m[33m"[39m[33m: [39m[33m"[39m[35mmietvertrag@0.0.0-1e2fa8bee209c1d843e613ec89e37ede5f527ef1ab7471cf8c55d94d074e415a[39m[33m"[39m[33m,[39m
  [33m"[39m[32mrequest[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.anforderung[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpay[39m[33m"[39m[33m: [39m[33m"[39m[35m400[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mresponse[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.antwort[39m[33m"[39m[33m,[39m
    [33m"[39m[32moutput[39m[33m"[39m[33m: [39m[33m"[39m[35mHello Weisgerber Du hast mir noch nicht die Miete gezahlt. Ich Erwarte bis nächste Woche €400[39m[33m"[39m[33m,[39m
    [33m"[39m[32mtransactionId[39m[33m"[39m[33m: [39m[33m"[39m[35m6e972150-7c8d-4b93-86f1-51794ed9866c[39m[33m"[39m[33m,[39m
    [33m"[39m[32mtimestamp[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-21T07:13:03.034Z[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mstate[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.cicero.contract.AccordContractState[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstateId[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.cicero.contract.AccordContractState#1[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32memit[39m[33m"[39m[33m: [39m[33m[[39m[33m][39m
[33m}[39m
9:56:37 - [32minfo[39m: Using current directory as template folder
9:56:37 - [32minfo[39m: Loading a default text/sample.md file.
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: fromDirectory
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: fromDirectory
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFilesContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:37 - [34mdebug[39m: loadFileContents
9:56:38 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
9:57:35 - [32minfo[39m: Using current directory as template folder
9:57:35 - [32minfo[39m: Loading a default text/sample.md file.
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: fromDirectory
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: fromDirectory
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFilesContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:35 - [34mdebug[39m: loadFileContents
9:57:36 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
9:58:02 - [32minfo[39m: Using current directory as template folder
9:58:02 - [32minfo[39m: Loading a default text/sample.md file.
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: fromDirectory
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: fromDirectory
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFilesContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:02 - [34mdebug[39m: loadFileContents
9:58:03 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
10:26:27 - [32minfo[39m: Using current directory as template folder
10:26:27 - [32minfo[39m: Loading a default text/sample.md file.
10:26:27 - [34mdebug[39m: loadFileContents
10:26:27 - [34mdebug[39m: loadFileContents
10:26:27 - [34mdebug[39m: loadFileContents
10:26:27 - [34mdebug[39m: fromDirectory
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:27 - [34mdebug[39m: loadFileContents
10:26:27 - [34mdebug[39m: fromDirectory
10:26:27 - [34mdebug[39m: loadFilesContents
10:26:28 - [34mdebug[39m: loadFilesContents
10:26:28 - [34mdebug[39m: loadFilesContents
10:26:28 - [34mdebug[39m: loadFilesContents
10:26:28 - [34mdebug[39m: loadFilesContents
10:26:28 - [34mdebug[39m: loadFilesContents
10:26:28 - [34mdebug[39m: loadFileContents
10:26:28 - [34mdebug[39m: loadFileContents
10:26:28 - [34mdebug[39m: loadFileContents
10:26:28 - [34mdebug[39m: loadFileContents
10:26:29 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
10:26:45 - [32minfo[39m: Using current directory as template folder
10:26:45 - [32minfo[39m: Loading a default text/sample.md file.
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: fromDirectory
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: fromDirectory
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFilesContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:45 - [34mdebug[39m: loadFileContents
10:26:46 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
10:28:04 - [32minfo[39m: Using current directory as template folder
10:28:04 - [32minfo[39m: Loading a default text/sample.md file.
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: fromDirectory
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: fromDirectory
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFilesContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:04 - [34mdebug[39m: loadFileContents
10:28:05 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
10:28:20 - [32minfo[39m: Using current directory as template folder
10:28:20 - [32minfo[39m: Loading a default text/sample.md file.
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: fromDirectory
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: fromDirectory
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFilesContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:20 - [34mdebug[39m: loadFileContents
10:28:21 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
10:29:56 - [32minfo[39m: Using current directory as template folder
10:29:56 - [32minfo[39m: Loading a default text/sample.md file.
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: fromDirectory
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: fromDirectory
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFilesContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:56 - [34mdebug[39m: loadFileContents
10:29:57 - [34mdebug[39m: fromDirectory
10:29:57 - [34mdebug[39m: loadFileContents
10:29:57 - [34mdebug[39m: buildGrammar
10:29:57 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
10:29:57 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
10:29:57 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
10:29:57 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
10:29:57 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
10:29:57 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
10:29:57 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
10:29:57 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
10:29:57 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
10:29:57 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
10:29:57 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
10:29:57 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
10:29:57 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
10:29:57 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "5ad6e0cd-acb6-4517-9a12-7b0f802560ac",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



10:29:57 - [34mdebug[39m: fromDirectory
10:29:57 - [34mdebug[39m: fromDirectory
10:29:57 - [34mdebug[39m: loadFilesContents
10:29:57 - [34mdebug[39m: loadFilesContents
10:29:57 - [34mdebug[39m: loadFilesContents
10:29:57 - [34mdebug[39m: loadFilesContents
10:29:57 - [34mdebug[39m: loadFilesContents
10:29:57 - [34mdebug[39m: loadFilesContents
10:29:57 - [34mdebug[39m: loadFileContents
10:29:58 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"5ad6e0cd-acb6-4517-9a12-7b0f802560ac","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400.00€"}
10:29:58 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"5ad6e0cd-acb6-4517-9a12-7b0f802560ac","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400.00€"}
10:29:58 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m5ad6e0cd-acb6-4517-9a12-7b0f802560ac[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m"[39m[35m400.00€[39m[33m"[39m
[33m}[39m
11:00:58 - [32minfo[39m: Using current directory as template folder
11:00:58 - [32minfo[39m: Loading a default text/sample.md file.
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: fromDirectory
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: fromDirectory
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFilesContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:58 - [34mdebug[39m: loadFileContents
11:00:59 - [34mdebug[39m: fromDirectory
11:00:59 - [34mdebug[39m: loadFileContents
11:00:59 - [34mdebug[39m: buildGrammar
11:00:59 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:00:59 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:00:59 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:00:59 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:00:59 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:00:59 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:00:59 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:00:59 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:00:59 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:00:59 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:00:59 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:00:59 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:00:59 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:00:59 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "8edfa7ef-e81c-4979-a102-51b758e7c7e4",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> String {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  String  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:00:59 - [34mdebug[39m: fromDirectory
11:00:59 - [34mdebug[39m: fromDirectory
11:00:59 - [34mdebug[39m: loadFilesContents
11:00:59 - [34mdebug[39m: loadFilesContents
11:00:59 - [34mdebug[39m: loadFilesContents
11:00:59 - [34mdebug[39m: loadFilesContents
11:00:59 - [34mdebug[39m: loadFilesContents
11:00:59 - [34mdebug[39m: loadFilesContents
11:00:59 - [34mdebug[39m: loadFileContents
11:01:00 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"8edfa7ef-e81c-4979-a102-51b758e7c7e4","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":"400.00€"}
11:01:00 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"8edfa7ef-e81c-4979-a102-51b758e7c7e4","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400.00€"}
11:01:00 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
11:01:00 - [34mdebug[39m: Calling eval with context [object Object]
11:01:00 - [32minfo[39m: Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von "400.00€".
11:02:12 - [32minfo[39m: Using current directory as template folder
11:02:12 - [32minfo[39m: Loading a default text/sample.md file.
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: fromDirectory
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: fromDirectory
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFilesContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:12 - [34mdebug[39m: loadFileContents
11:02:13 - [31merror[39m: Undeclared type MonetaryAmount in property org.example.mietvertrag01.MyContract.preis File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
11:10:26 - [32minfo[39m: Using current directory as template folder
11:10:26 - [32minfo[39m: Loading a default text/sample.md file.
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: fromDirectory
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: fromDirectory
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFilesContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:26 - [34mdebug[39m: loadFileContents
11:10:27 - [34mdebug[39m: fromDirectory
11:10:27 - [34mdebug[39m: loadFileContents
11:10:27 - [34mdebug[39m: buildGrammar
11:10:27 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:10:27 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:10:27 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:10:27 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:10:27 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:10:27 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:10:27 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:10:27 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:10:27 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:10:27 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:10:27 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:10:27 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:10:27 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:10:27 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c2bd8a6e-28f1-4587-aa4b-c46827a901a9",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:10:28 - [34mdebug[39m: fromDirectory
11:10:28 - [34mdebug[39m: fromDirectory
11:10:28 - [34mdebug[39m: loadFilesContents
11:10:28 - [34mdebug[39m: loadFilesContents
11:10:28 - [34mdebug[39m: loadFilesContents
11:10:28 - [34mdebug[39m: loadFilesContents
11:10:28 - [34mdebug[39m: loadFilesContents
11:10:28 - [34mdebug[39m: loadFilesContents
11:10:28 - [34mdebug[39m: loadFileContents
11:10:28 - [31merror[39m: invalid syntax at line 1 col 176:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von "400.00€".
                                                                                                                                                                                 ^
Unexpected "\""

11:10:42 - [32minfo[39m: Using current directory as template folder
11:10:42 - [32minfo[39m: Loading a default text/sample.md file.
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: fromDirectory
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: fromDirectory
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFilesContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:42 - [34mdebug[39m: loadFileContents
11:10:43 - [34mdebug[39m: fromDirectory
11:10:43 - [34mdebug[39m: loadFileContents
11:10:43 - [34mdebug[39m: buildGrammar
11:10:43 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:10:43 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:10:43 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:10:43 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:10:43 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:10:43 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:10:43 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:10:43 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:10:43 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:10:43 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:10:43 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:10:43 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:10:43 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:10:43 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2a151c0e-1d0c-4780-8930-bff009220187",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:10:44 - [34mdebug[39m: fromDirectory
11:10:44 - [34mdebug[39m: fromDirectory
11:10:44 - [34mdebug[39m: loadFilesContents
11:10:44 - [34mdebug[39m: loadFilesContents
11:10:44 - [34mdebug[39m: loadFilesContents
11:10:44 - [34mdebug[39m: loadFilesContents
11:10:44 - [34mdebug[39m: loadFilesContents
11:10:44 - [34mdebug[39m: loadFilesContents
11:10:44 - [34mdebug[39m: loadFileContents
11:10:44 - [31merror[39m: invalid syntax at line 1 col 182:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00€.
                                                                                                                                                                                       ^
Unexpected "€"

11:11:06 - [32minfo[39m: Using current directory as template folder
11:11:06 - [32minfo[39m: Loading a default text/sample.md file.
11:11:06 - [34mdebug[39m: loadFileContents
11:11:06 - [34mdebug[39m: loadFileContents
11:11:06 - [34mdebug[39m: loadFileContents
11:11:06 - [34mdebug[39m: fromDirectory
11:11:06 - [34mdebug[39m: loadFilesContents
11:11:06 - [34mdebug[39m: loadFilesContents
11:11:06 - [34mdebug[39m: loadFilesContents
11:11:06 - [34mdebug[39m: loadFilesContents
11:11:06 - [34mdebug[39m: loadFilesContents
11:11:06 - [34mdebug[39m: loadFilesContents
11:11:06 - [34mdebug[39m: loadFileContents
11:11:06 - [34mdebug[39m: fromDirectory
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFileContents
11:11:07 - [34mdebug[39m: loadFileContents
11:11:07 - [34mdebug[39m: loadFileContents
11:11:07 - [34mdebug[39m: loadFileContents
11:11:07 - [34mdebug[39m: fromDirectory
11:11:07 - [34mdebug[39m: loadFileContents
11:11:07 - [34mdebug[39m: buildGrammar
11:11:07 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:11:07 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:11:07 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:11:07 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:11:07 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:11:07 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:11:07 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:11:07 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:11:07 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:11:07 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:11:07 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:11:07 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:11:07 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"€.","text":"€.","offset":165,"lineBreaks":0,"line":1,"col":166}
11:11:07 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "091a226d-b7ee-4337-b834-154ad9eb5209",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "€." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:11:07 - [34mdebug[39m: fromDirectory
11:11:07 - [34mdebug[39m: fromDirectory
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFilesContents
11:11:07 - [34mdebug[39m: loadFileContents
11:11:08 - [31merror[39m: invalid syntax at line 1 col 182:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00€.
                                                                                                                                                                                       ^
Unexpected "€"

11:11:27 - [32minfo[39m: Using current directory as template folder
11:11:27 - [32minfo[39m: Loading a default text/sample.md file.
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: fromDirectory
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: fromDirectory
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFilesContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:27 - [34mdebug[39m: loadFileContents
11:11:28 - [34mdebug[39m: fromDirectory
11:11:28 - [34mdebug[39m: loadFileContents
11:11:28 - [34mdebug[39m: buildGrammar
11:11:28 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:11:28 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:11:28 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:11:28 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:11:28 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:11:28 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:11:28 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:11:28 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:11:28 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:11:28 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:11:28 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:11:28 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:11:28 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":" €.","text":" €.","offset":165,"lineBreaks":0,"line":1,"col":166}
11:11:28 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "ab5b5854-ceba-4e8f-b83c-85b3f587ed52",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> " €." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:11:28 - [34mdebug[39m: fromDirectory
11:11:28 - [34mdebug[39m: fromDirectory
11:11:28 - [34mdebug[39m: loadFilesContents
11:11:28 - [34mdebug[39m: loadFilesContents
11:11:28 - [34mdebug[39m: loadFilesContents
11:11:28 - [34mdebug[39m: loadFilesContents
11:11:28 - [34mdebug[39m: loadFilesContents
11:11:28 - [34mdebug[39m: loadFilesContents
11:11:28 - [34mdebug[39m: loadFileContents
11:11:29 - [31merror[39m: invalid syntax at line 1 col 183:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00 €.
                                                                                                                                                                                        ^
Unexpected "€"

11:11:47 - [32minfo[39m: Using current directory as template folder
11:11:47 - [32minfo[39m: Loading a default text/sample.md file.
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: fromDirectory
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: fromDirectory
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFilesContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:47 - [34mdebug[39m: loadFileContents
11:11:48 - [34mdebug[39m: fromDirectory
11:11:48 - [34mdebug[39m: loadFileContents
11:11:48 - [34mdebug[39m: buildGrammar
11:11:48 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:11:48 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:11:48 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:11:48 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:11:48 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:11:48 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:11:48 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:11:48 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:11:48 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:11:48 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:11:48 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:11:48 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:11:48 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:11:48 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "43e9a416-a459-403d-983d-6dbd2bf8ed18",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:11:48 - [34mdebug[39m: fromDirectory
11:11:48 - [34mdebug[39m: fromDirectory
11:11:48 - [34mdebug[39m: loadFilesContents
11:11:48 - [34mdebug[39m: loadFilesContents
11:11:48 - [34mdebug[39m: loadFilesContents
11:11:48 - [34mdebug[39m: loadFilesContents
11:11:48 - [34mdebug[39m: loadFilesContents
11:11:48 - [34mdebug[39m: loadFilesContents
11:11:48 - [34mdebug[39m: loadFileContents
11:11:49 - [31merror[39m: invalid syntax at line 1 col 182:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00.
                                                                                                                                                                                       ^
Unexpected "."

11:12:05 - [32minfo[39m: Using current directory as template folder
11:12:05 - [32minfo[39m: Loading a default text/sample.md file.
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: fromDirectory
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: fromDirectory
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFilesContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:05 - [34mdebug[39m: loadFileContents
11:12:06 - [34mdebug[39m: fromDirectory
11:12:06 - [34mdebug[39m: loadFileContents
11:12:06 - [34mdebug[39m: buildGrammar
11:12:06 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:12:06 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:12:06 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:12:06 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:12:06 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:12:06 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:12:06 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:12:06 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:12:06 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:12:06 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:12:06 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:12:06 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:12:06 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":" .","text":" .","offset":165,"lineBreaks":0,"line":1,"col":166}
11:12:06 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2269b85d-c646-4f5c-a139-22b716ea58b9",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> " ." 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:12:06 - [34mdebug[39m: fromDirectory
11:12:06 - [34mdebug[39m: fromDirectory
11:12:06 - [34mdebug[39m: loadFilesContents
11:12:06 - [34mdebug[39m: loadFilesContents
11:12:06 - [34mdebug[39m: loadFilesContents
11:12:06 - [34mdebug[39m: loadFilesContents
11:12:06 - [34mdebug[39m: loadFilesContents
11:12:06 - [34mdebug[39m: loadFilesContents
11:12:06 - [34mdebug[39m: loadFileContents
11:12:07 - [31merror[39m: invalid syntax at line 1 col 183:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00 .
                                                                                                                                                                                        ^
Unexpected "."

11:12:19 - [32minfo[39m: Using current directory as template folder
11:12:19 - [32minfo[39m: Loading a default text/sample.md file.
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: fromDirectory
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: fromDirectory
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFilesContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:19 - [34mdebug[39m: loadFileContents
11:12:20 - [34mdebug[39m: fromDirectory
11:12:20 - [34mdebug[39m: loadFileContents
11:12:20 - [34mdebug[39m: buildGrammar
11:12:20 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:12:20 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:12:20 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:12:20 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:12:20 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:12:20 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:12:20 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:12:20 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:12:20 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:12:20 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:12:20 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:12:20 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:12:20 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "76f97beb-d1f2-4990-9f02-ded897d6e0f4",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:12:20 - [34mdebug[39m: fromDirectory
11:12:20 - [34mdebug[39m: fromDirectory
11:12:20 - [34mdebug[39m: loadFilesContents
11:12:20 - [34mdebug[39m: loadFilesContents
11:12:20 - [34mdebug[39m: loadFilesContents
11:12:20 - [34mdebug[39m: loadFilesContents
11:12:20 - [34mdebug[39m: loadFilesContents
11:12:20 - [34mdebug[39m: loadFilesContents
11:12:20 - [34mdebug[39m: loadFileContents
11:12:21 - [34mdebug[39m: Result of parsing: undefined
11:12:21 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
11:12:55 - [32minfo[39m: Using current directory as template folder
11:12:55 - [32minfo[39m: Loading a default text/sample.md file.
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: fromDirectory
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: fromDirectory
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFilesContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:55 - [34mdebug[39m: loadFileContents
11:12:57 - [34mdebug[39m: fromDirectory
11:12:57 - [34mdebug[39m: loadFileContents
11:12:57 - [34mdebug[39m: buildGrammar
11:12:57 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:12:57 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:12:57 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:12:57 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:12:57 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:12:57 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:12:57 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:12:57 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:12:57 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:12:57 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:12:57 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:12:57 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:12:57 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "e80c5d68-d845-48b1-932b-02a9feee4e5e",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:12:57 - [34mdebug[39m: fromDirectory
11:12:57 - [34mdebug[39m: fromDirectory
11:12:57 - [34mdebug[39m: loadFilesContents
11:12:57 - [34mdebug[39m: loadFilesContents
11:12:57 - [34mdebug[39m: loadFilesContents
11:12:57 - [34mdebug[39m: loadFilesContents
11:12:57 - [34mdebug[39m: loadFilesContents
11:12:57 - [34mdebug[39m: loadFilesContents
11:12:57 - [34mdebug[39m: loadFileContents
11:12:58 - [34mdebug[39m: Result of parsing: undefined
11:12:58 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
11:15:10 - [32minfo[39m: Using current directory as template folder
11:15:10 - [32minfo[39m: Loading a default text/sample.md file.
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: fromDirectory
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: fromDirectory
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFilesContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:10 - [34mdebug[39m: loadFileContents
11:15:11 - [34mdebug[39m: fromDirectory
11:15:11 - [34mdebug[39m: loadFileContents
11:15:11 - [34mdebug[39m: buildGrammar
11:15:12 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:15:12 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:15:12 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:15:12 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:15:12 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:15:12 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:15:12 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:15:12 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:15:12 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:15:12 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:15:12 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von (","text":" fuer einen Monatlichen preis von ({{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:15:12 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":159,"lineBreaks":0,"line":1,"col":160}}
11:15:12 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":")","text":")","offset":166,"lineBreaks":0,"line":1,"col":167}
11:15:12 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "fcf430e2-3264-4e31-9525-4fbff0ea81a5",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von (" 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ")" 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:15:12 - [34mdebug[39m: fromDirectory
11:15:12 - [34mdebug[39m: fromDirectory
11:15:12 - [34mdebug[39m: loadFilesContents
11:15:12 - [34mdebug[39m: loadFilesContents
11:15:12 - [34mdebug[39m: loadFilesContents
11:15:12 - [34mdebug[39m: loadFilesContents
11:15:12 - [34mdebug[39m: loadFilesContents
11:15:12 - [34mdebug[39m: loadFilesContents
11:15:12 - [34mdebug[39m: loadFileContents
11:15:13 - [31merror[39m: invalid syntax at line 1 col 184:

  Ich "Hendrik" vermiete meine Wohnung "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von (400.00 €)
                                                                                                                                                                                         ^
Unexpected "€"

11:15:32 - [32minfo[39m: Using current directory as template folder
11:15:32 - [32minfo[39m: Loading a default text/sample.md file.
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: fromDirectory
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: fromDirectory
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFilesContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:32 - [34mdebug[39m: loadFileContents
11:15:33 - [34mdebug[39m: fromDirectory
11:15:33 - [34mdebug[39m: loadFileContents
11:15:33 - [34mdebug[39m: buildGrammar
11:15:33 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:15:33 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:15:33 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:15:33 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:15:33 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:15:33 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:15:33 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:15:33 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:15:33 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:15:33 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:15:33 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von (","text":" fuer einen Monatlichen preis von ({{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:15:33 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":159,"lineBreaks":0,"line":1,"col":160}}
11:15:33 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":")","text":")","offset":166,"lineBreaks":0,"line":1,"col":167}
11:15:33 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "683d09b8-c115-4266-a82a-bb8169aa5a81",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von (" 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ")" 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:15:34 - [34mdebug[39m: fromDirectory
11:15:34 - [34mdebug[39m: fromDirectory
11:15:34 - [34mdebug[39m: loadFilesContents
11:15:34 - [34mdebug[39m: loadFilesContents
11:15:34 - [34mdebug[39m: loadFilesContents
11:15:34 - [34mdebug[39m: loadFilesContents
11:15:34 - [34mdebug[39m: loadFilesContents
11:15:34 - [34mdebug[39m: loadFilesContents
11:15:34 - [34mdebug[39m: loadFileContents
11:15:35 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"683d09b8-c115-4266-a82a-bb8169aa5a81","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"USD"}}
11:15:35 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"683d09b8-c115-4266-a82a-bb8169aa5a81","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"USD"}}
11:15:35 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m683d09b8-c115-4266-a82a-bb8169aa5a81[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mUSD[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:15:57 - [32minfo[39m: Using current directory as template folder
11:15:57 - [32minfo[39m: Loading a default text/sample.md file.
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: fromDirectory
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: fromDirectory
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFilesContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:57 - [34mdebug[39m: loadFileContents
11:15:59 - [34mdebug[39m: fromDirectory
11:15:59 - [34mdebug[39m: loadFileContents
11:15:59 - [34mdebug[39m: buildGrammar
11:15:59 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:15:59 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:15:59 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:15:59 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:15:59 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:15:59 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:15:59 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:15:59 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:15:59 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:15:59 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:15:59 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:15:59 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:15:59 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "79aaaf47-2fc5-4b05-afd4-f3d08eb27ca0",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:15:59 - [34mdebug[39m: fromDirectory
11:15:59 - [34mdebug[39m: fromDirectory
11:15:59 - [34mdebug[39m: loadFilesContents
11:15:59 - [34mdebug[39m: loadFilesContents
11:15:59 - [34mdebug[39m: loadFilesContents
11:15:59 - [34mdebug[39m: loadFilesContents
11:15:59 - [34mdebug[39m: loadFilesContents
11:15:59 - [34mdebug[39m: loadFilesContents
11:15:59 - [34mdebug[39m: loadFileContents
11:16:00 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"79aaaf47-2fc5-4b05-afd4-f3d08eb27ca0","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"USD"}}
11:16:00 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"79aaaf47-2fc5-4b05-afd4-f3d08eb27ca0","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"USD"}}
11:16:00 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m79aaaf47-2fc5-4b05-afd4-f3d08eb27ca0[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mUSD[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:16:25 - [32minfo[39m: Using current directory as template folder
11:16:25 - [32minfo[39m: Loading a default text/sample.md file.
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: fromDirectory
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: fromDirectory
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFilesContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:25 - [34mdebug[39m: loadFileContents
11:16:28 - [34mdebug[39m: fromDirectory
11:16:28 - [34mdebug[39m: loadFileContents
11:16:28 - [34mdebug[39m: buildGrammar
11:16:28 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:16:28 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:16:28 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:16:28 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:16:28 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:16:28 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:16:28 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:16:28 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:16:28 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:16:28 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:16:28 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:16:28 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:16:28 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "b0943f7c-cf52-4c4c-b48c-29b4981277e6",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:16:28 - [34mdebug[39m: fromDirectory
11:16:28 - [34mdebug[39m: fromDirectory
11:16:28 - [34mdebug[39m: loadFilesContents
11:16:28 - [34mdebug[39m: loadFilesContents
11:16:28 - [34mdebug[39m: loadFilesContents
11:16:28 - [34mdebug[39m: loadFilesContents
11:16:28 - [34mdebug[39m: loadFilesContents
11:16:28 - [34mdebug[39m: loadFilesContents
11:16:28 - [34mdebug[39m: loadFileContents
11:16:30 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"b0943f7c-cf52-4c4c-b48c-29b4981277e6","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:16:30 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"b0943f7c-cf52-4c4c-b48c-29b4981277e6","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:16:30 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mb0943f7c-cf52-4c4c-b48c-29b4981277e6[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:16:44 - [32minfo[39m: Using current directory as template folder
11:16:44 - [32minfo[39m: Loading a default text/sample.md file.
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: fromDirectory
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: fromDirectory
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFilesContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:44 - [34mdebug[39m: loadFileContents
11:16:46 - [34mdebug[39m: fromDirectory
11:16:46 - [34mdebug[39m: loadFileContents
11:16:46 - [34mdebug[39m: buildGrammar
11:16:46 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:16:46 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:16:46 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:16:46 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:16:46 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:16:46 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:16:46 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:16:46 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:16:46 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:16:46 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:16:46 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:16:46 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:16:46 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:16:46 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "cfac75cc-b5bc-4858-9669-8aaaf12a820a",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:16:46 - [34mdebug[39m: fromDirectory
11:16:46 - [34mdebug[39m: fromDirectory
11:16:46 - [34mdebug[39m: loadFilesContents
11:16:46 - [34mdebug[39m: loadFilesContents
11:16:46 - [34mdebug[39m: loadFilesContents
11:16:46 - [34mdebug[39m: loadFilesContents
11:16:46 - [34mdebug[39m: loadFilesContents
11:16:46 - [34mdebug[39m: loadFilesContents
11:16:46 - [34mdebug[39m: loadFileContents
11:16:48 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"cfac75cc-b5bc-4858-9669-8aaaf12a820a","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:16:48 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"cfac75cc-b5bc-4858-9669-8aaaf12a820a","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:16:48 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mcfac75cc-b5bc-4858-9669-8aaaf12a820a[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:18:24 - [32minfo[39m: Using current directory as template folder
11:18:24 - [32minfo[39m: Loading a default text/sample.md file.
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: fromDirectory
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: fromDirectory
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFilesContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:24 - [34mdebug[39m: loadFileContents
11:18:27 - [34mdebug[39m: fromDirectory
11:18:27 - [34mdebug[39m: loadFileContents
11:18:27 - [34mdebug[39m: buildGrammar
11:18:27 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:18:27 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:18:27 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:18:27 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:18:27 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:18:27 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:18:27 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:18:27 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:18:27 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:18:27 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:18:27 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:18:27 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:18:27 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:18:27 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "ffa94374-4be9-4778-a5e1-12abd59cf6ab",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:18:27 - [34mdebug[39m: fromDirectory
11:18:27 - [34mdebug[39m: fromDirectory
11:18:27 - [34mdebug[39m: loadFilesContents
11:18:27 - [34mdebug[39m: loadFilesContents
11:18:27 - [34mdebug[39m: loadFilesContents
11:18:27 - [34mdebug[39m: loadFilesContents
11:18:27 - [34mdebug[39m: loadFilesContents
11:18:27 - [34mdebug[39m: loadFilesContents
11:18:27 - [34mdebug[39m: loadFileContents
11:18:28 - [31merror[39m: invalid syntax at line 1 col 1:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00 EUR.
  ^
Unexpected "*"

11:18:57 - [32minfo[39m: Using current directory as template folder
11:18:57 - [32minfo[39m: Loading a default text/sample.md file.
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: fromDirectory
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: fromDirectory
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFilesContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:57 - [34mdebug[39m: loadFileContents
11:18:59 - [34mdebug[39m: fromDirectory
11:18:59 - [34mdebug[39m: loadFileContents
11:18:59 - [34mdebug[39m: buildGrammar
11:18:59 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:18:59 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:18:59 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:18:59 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:18:59 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:18:59 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:18:59 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:18:59 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:18:59 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:18:59 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:18:59 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:18:59 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:18:59 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:18:59 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "10213ae2-44be-4316-908d-810f72ff595d",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:18:59 - [34mdebug[39m: fromDirectory
11:18:59 - [34mdebug[39m: fromDirectory
11:18:59 - [34mdebug[39m: loadFilesContents
11:18:59 - [34mdebug[39m: loadFilesContents
11:18:59 - [34mdebug[39m: loadFilesContents
11:18:59 - [34mdebug[39m: loadFilesContents
11:18:59 - [34mdebug[39m: loadFilesContents
11:18:59 - [34mdebug[39m: loadFilesContents
11:18:59 - [34mdebug[39m: loadFileContents
11:19:00 - [31merror[39m: invalid syntax at line 1 col 1:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00 EUR.
  ^
Unexpected "*"

11:19:23 - [32minfo[39m: Using current directory as template folder
11:19:23 - [32minfo[39m: Loading a default text/sample.md file.
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: fromDirectory
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: fromDirectory
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFilesContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:23 - [34mdebug[39m: loadFileContents
11:19:25 - [34mdebug[39m: fromDirectory
11:19:25 - [34mdebug[39m: loadFileContents
11:19:25 - [34mdebug[39m: buildGrammar
11:19:25 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:19:25 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:19:25 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:19:25 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:19:25 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:19:25 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:19:25 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:19:25 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:19:25 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:19:25 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:19:25 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:19:25 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:19:25 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:19:25 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "78a2786d-7e9b-4ec3-88be-e798fb2e4a81",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:19:26 - [34mdebug[39m: fromDirectory
11:19:26 - [34mdebug[39m: fromDirectory
11:19:26 - [34mdebug[39m: loadFilesContents
11:19:26 - [34mdebug[39m: loadFilesContents
11:19:26 - [34mdebug[39m: loadFilesContents
11:19:26 - [34mdebug[39m: loadFilesContents
11:19:26 - [34mdebug[39m: loadFilesContents
11:19:26 - [34mdebug[39m: loadFilesContents
11:19:26 - [34mdebug[39m: loadFileContents
11:19:27 - [31merror[39m: invalid syntax at line 1 col 1:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00 EUR.
  ^
Unexpected "*"

11:19:43 - [32minfo[39m: Using current directory as template folder
11:19:43 - [32minfo[39m: Loading a default text/sample.md file.
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: fromDirectory
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: fromDirectory
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFilesContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:43 - [34mdebug[39m: loadFileContents
11:19:45 - [34mdebug[39m: fromDirectory
11:19:45 - [34mdebug[39m: loadFileContents
11:19:45 - [34mdebug[39m: buildGrammar
11:19:45 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Ich ","text":"Ich {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:19:45 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":6,"lineBreaks":0,"line":1,"col":7}}
11:19:45 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine Wohnung ","text":" vermiete meine Wohnung {{","offset":12,"lineBreaks":0,"line":1,"col":13}
11:19:45 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":38,"lineBreaks":0,"line":1,"col":39}}
11:19:45 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":47,"lineBreaks":0,"line":1,"col":48}
11:19:45 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":53,"lineBreaks":0,"line":1,"col":54}}
11:19:45 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":61,"lineBreaks":0,"line":1,"col":62}
11:19:45 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":86,"lineBreaks":0,"line":1,"col":87}}
11:19:45 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":100,"lineBreaks":0,"line":1,"col":101}
11:19:45 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":107,"lineBreaks":0,"line":1,"col":108}}
11:19:45 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":122,"lineBreaks":0,"line":1,"col":123}
11:19:45 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":158,"lineBreaks":0,"line":1,"col":159}}
11:19:45 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":165,"lineBreaks":0,"line":1,"col":166}
11:19:45 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "69f44fab-d46e-4661-8497-a58db678a876",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Ich " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine Wohnung " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:19:45 - [34mdebug[39m: fromDirectory
11:19:45 - [34mdebug[39m: fromDirectory
11:19:45 - [34mdebug[39m: loadFilesContents
11:19:45 - [34mdebug[39m: loadFilesContents
11:19:45 - [34mdebug[39m: loadFilesContents
11:19:45 - [34mdebug[39m: loadFilesContents
11:19:45 - [34mdebug[39m: loadFilesContents
11:19:45 - [34mdebug[39m: loadFilesContents
11:19:45 - [34mdebug[39m: loadFileContents
11:19:46 - [31merror[39m: invalid syntax at line 1 col 1:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.00 EUR.
  ^
Unexpected "*"

11:20:17 - [32minfo[39m: Using current directory as template folder
11:20:17 - [32minfo[39m: Loading a default text/sample.md file.
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: fromDirectory
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: fromDirectory
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFilesContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:17 - [34mdebug[39m: loadFileContents
11:20:18 - [34mdebug[39m: fromDirectory
11:20:18 - [34mdebug[39m: loadFileContents
11:20:18 - [34mdebug[39m: buildGrammar
11:20:18 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:20:18 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:20:18 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:20:18 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:20:18 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:20:18 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:20:18 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:20:18 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:20:18 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:20:18 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:20:18 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:20:18 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":164,"lineBreaks":0,"line":1,"col":165}}
11:20:18 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":171,"lineBreaks":0,"line":1,"col":172}
11:20:18 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "8a92d227-8b42-4f88-b2c4-fe0846fda168",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:20:19 - [34mdebug[39m: fromDirectory
11:20:19 - [34mdebug[39m: fromDirectory
11:20:19 - [34mdebug[39m: loadFilesContents
11:20:19 - [34mdebug[39m: loadFilesContents
11:20:19 - [34mdebug[39m: loadFilesContents
11:20:19 - [34mdebug[39m: loadFilesContents
11:20:19 - [34mdebug[39m: loadFilesContents
11:20:19 - [34mdebug[39m: loadFilesContents
11:20:19 - [34mdebug[39m: loadFileContents
11:20:20 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"8a92d227-8b42-4f88-b2c4-fe0846fda168","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:20:20 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"8a92d227-8b42-4f88-b2c4-fe0846fda168","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:20:20 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
11:20:20 - [34mdebug[39m: Calling eval with context [object Object]
11:20:20 - [32minfo[39m: **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.0 EUR.
11:20:33 - [32minfo[39m: Using current directory as template folder
11:20:33 - [32minfo[39m: Loading a default text/sample.md file.
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: fromDirectory
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: fromDirectory
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFilesContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:33 - [34mdebug[39m: loadFileContents
11:20:35 - [34mdebug[39m: fromDirectory
11:20:35 - [34mdebug[39m: loadFileContents
11:20:35 - [34mdebug[39m: buildGrammar
11:20:35 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:20:35 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:20:35 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:20:35 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:20:35 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:20:35 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:20:35 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:20:35 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:20:35 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:20:35 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:20:35 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:20:35 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":164,"lineBreaks":0,"line":1,"col":165}}
11:20:35 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":171,"lineBreaks":0,"line":1,"col":172}
11:20:35 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "9dfb18d6-41eb-465f-8a95-b21770bf1ccf",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:20:35 - [34mdebug[39m: fromDirectory
11:20:35 - [34mdebug[39m: fromDirectory
11:20:35 - [34mdebug[39m: loadFilesContents
11:20:35 - [34mdebug[39m: loadFilesContents
11:20:35 - [34mdebug[39m: loadFilesContents
11:20:35 - [34mdebug[39m: loadFilesContents
11:20:35 - [34mdebug[39m: loadFilesContents
11:20:35 - [34mdebug[39m: loadFilesContents
11:20:35 - [34mdebug[39m: loadFileContents
11:20:37 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"9dfb18d6-41eb-465f-8a95-b21770bf1ccf","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:20:37 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"9dfb18d6-41eb-465f-8a95-b21770bf1ccf","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:20:37 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m9dfb18d6-41eb-465f-8a95-b21770bf1ccf[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:20:48 - [32minfo[39m: Using current directory as template folder
11:20:48 - [32minfo[39m: Loading a default data.json file.
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: fromDirectory
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: fromDirectory
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFilesContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:48 - [34mdebug[39m: loadFileContents
11:20:49 - [34mdebug[39m: fromDirectory
11:20:49 - [34mdebug[39m: loadFileContents
11:20:50 - [34mdebug[39m: buildGrammar
11:20:50 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:20:50 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:20:50 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:20:50 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:20:50 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:20:50 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:20:50 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:20:50 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:20:50 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:20:50 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:20:50 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:20:50 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":164,"lineBreaks":0,"line":1,"col":165}}
11:20:50 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":171,"lineBreaks":0,"line":1,"col":172}
11:20:50 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "f7bdf0b7-481f-4dd0-a16b-30ea0bb5b01f",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:20:50 - [34mdebug[39m: fromDirectory
11:20:50 - [34mdebug[39m: fromDirectory
11:20:50 - [34mdebug[39m: loadFilesContents
11:20:50 - [34mdebug[39m: loadFilesContents
11:20:50 - [34mdebug[39m: loadFilesContents
11:20:50 - [34mdebug[39m: loadFilesContents
11:20:50 - [34mdebug[39m: loadFilesContents
11:20:50 - [34mdebug[39m: loadFilesContents
11:20:50 - [34mdebug[39m: loadFileContents
11:20:51 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"dbe2f1d2-f84f-4fc7-9aa2-be2fcc90ac09","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":"400"}
11:20:51 - [31merror[39m: Unexpected properties for type org.accordproject.money.MonetaryAmount: 0, 1, 2
11:21:08 - [32minfo[39m: Using current directory as template folder
11:21:08 - [32minfo[39m: Loading a default text/sample.md file.
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: fromDirectory
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: fromDirectory
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFilesContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:08 - [34mdebug[39m: loadFileContents
11:21:10 - [34mdebug[39m: fromDirectory
11:21:10 - [34mdebug[39m: loadFileContents
11:21:10 - [34mdebug[39m: buildGrammar
11:21:10 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:21:10 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:21:10 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:21:10 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:21:10 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:21:10 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:21:10 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:21:10 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:21:10 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:21:10 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:21:10 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:21:10 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":164,"lineBreaks":0,"line":1,"col":165}}
11:21:10 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":171,"lineBreaks":0,"line":1,"col":172}
11:21:10 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "d651f38a-7370-4859-b6f4-68b60b46975f",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:21:10 - [34mdebug[39m: fromDirectory
11:21:10 - [34mdebug[39m: fromDirectory
11:21:10 - [34mdebug[39m: loadFilesContents
11:21:10 - [34mdebug[39m: loadFilesContents
11:21:10 - [34mdebug[39m: loadFilesContents
11:21:10 - [34mdebug[39m: loadFilesContents
11:21:10 - [34mdebug[39m: loadFilesContents
11:21:10 - [34mdebug[39m: loadFilesContents
11:21:10 - [34mdebug[39m: loadFileContents
11:21:12 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"d651f38a-7370-4859-b6f4-68b60b46975f","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:21:12 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"d651f38a-7370-4859-b6f4-68b60b46975f","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:21:12 - [32minfo[39m: Creating file: data.json
11:21:12 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35md651f38a-7370-4859-b6f4-68b60b46975f[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:21:21 - [32minfo[39m: Using current directory as template folder
11:21:21 - [32minfo[39m: Loading a default data.json file.
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: fromDirectory
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: fromDirectory
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFilesContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:21 - [34mdebug[39m: loadFileContents
11:21:22 - [34mdebug[39m: fromDirectory
11:21:22 - [34mdebug[39m: loadFileContents
11:21:22 - [34mdebug[39m: buildGrammar
11:21:22 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:21:22 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:21:22 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:21:22 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:21:22 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:21:22 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:21:22 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:21:22 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:21:22 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:21:22 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:21:22 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen Monatlichen preis von ","text":" fuer einen Monatlichen preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:21:22 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":164,"lineBreaks":0,"line":1,"col":165}}
11:21:22 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":171,"lineBreaks":0,"line":1,"col":172}
11:21:22 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "42aab207-423a-4697-b10c-e48ae0a08bb4",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen Monatlichen preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:21:22 - [34mdebug[39m: fromDirectory
11:21:22 - [34mdebug[39m: fromDirectory
11:21:22 - [34mdebug[39m: loadFilesContents
11:21:22 - [34mdebug[39m: loadFilesContents
11:21:22 - [34mdebug[39m: loadFilesContents
11:21:22 - [34mdebug[39m: loadFilesContents
11:21:22 - [34mdebug[39m: loadFilesContents
11:21:22 - [34mdebug[39m: loadFilesContents
11:21:22 - [34mdebug[39m: loadFileContents
11:21:24 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"d651f38a-7370-4859-b6f4-68b60b46975f","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:21:24 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
11:21:24 - [34mdebug[39m: Calling eval with context [object Object]
11:21:24 - [32minfo[39m: **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen Monatlichen preis von 400.0 EUR.
11:22:44 - [32minfo[39m: Using current directory as template folder
11:22:44 - [32minfo[39m: Loading a default text/sample.md file.
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: fromDirectory
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: fromDirectory
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFilesContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:44 - [34mdebug[39m: loadFileContents
11:22:46 - [34mdebug[39m: fromDirectory
11:22:46 - [34mdebug[39m: loadFileContents
11:22:46 - [34mdebug[39m: buildGrammar
11:22:46 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:22:46 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:22:46 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:22:46 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:22:46 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:22:46 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:22:46 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:22:46 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:22:46 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:22:46 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:22:46 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:22:46 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":170,"lineBreaks":0,"line":1,"col":171}}
11:22:46 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":177,"lineBreaks":0,"line":1,"col":178}
11:22:46 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "e96ee4e9-a3b6-44e9-96c5-b3160f249877",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:22:46 - [34mdebug[39m: fromDirectory
11:22:46 - [34mdebug[39m: fromDirectory
11:22:46 - [34mdebug[39m: loadFilesContents
11:22:46 - [34mdebug[39m: loadFilesContents
11:22:46 - [34mdebug[39m: loadFilesContents
11:22:46 - [34mdebug[39m: loadFilesContents
11:22:46 - [34mdebug[39m: loadFilesContents
11:22:46 - [34mdebug[39m: loadFilesContents
11:22:46 - [34mdebug[39m: loadFileContents
11:22:48 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:22:48 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:22:48 - [32minfo[39m: Creating file: data.json
11:22:48 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35me96ee4e9-a3b6-44e9-96c5-b3160f249877[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:23:06 - [32minfo[39m: Using current directory as template folder
11:23:06 - [32minfo[39m: Loading a default data.json file.
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: fromDirectory
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: fromDirectory
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFilesContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:06 - [34mdebug[39m: loadFileContents
11:23:08 - [34mdebug[39m: fromDirectory
11:23:08 - [34mdebug[39m: loadFileContents
11:23:08 - [34mdebug[39m: buildGrammar
11:23:08 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:23:08 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:23:08 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:23:08 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:23:08 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:23:08 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:23:08 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:23:08 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:23:08 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:23:08 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:23:08 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:23:08 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":170,"lineBreaks":0,"line":1,"col":171}}
11:23:08 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":177,"lineBreaks":0,"line":1,"col":178}
11:23:08 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "c943ae46-b2fc-4be7-92ce-17aaa7d94334",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:23:08 - [34mdebug[39m: fromDirectory
11:23:08 - [34mdebug[39m: fromDirectory
11:23:08 - [34mdebug[39m: loadFilesContents
11:23:08 - [34mdebug[39m: loadFilesContents
11:23:08 - [34mdebug[39m: loadFilesContents
11:23:08 - [34mdebug[39m: loadFilesContents
11:23:08 - [34mdebug[39m: loadFilesContents
11:23:08 - [34mdebug[39m: loadFilesContents
11:23:08 - [34mdebug[39m: loadFileContents
11:23:09 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:23:09 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
11:23:09 - [34mdebug[39m: Calling eval with context [object Object]
11:23:09 - [32minfo[39m: **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
11:23:35 - [32minfo[39m: Using current directory as template folder
11:23:35 - [32minfo[39m: Loading a default text/sample.md file.
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: fromDirectory
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: fromDirectory
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFilesContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:35 - [34mdebug[39m: loadFileContents
11:23:36 - [34mdebug[39m: fromDirectory
11:23:36 - [34mdebug[39m: loadFileContents
11:23:36 - [34mdebug[39m: buildGrammar
11:23:36 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"**Ich** ","text":"**Ich** {{","offset":0,"lineBreaks":0,"line":1,"col":1}
11:23:36 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":10,"lineBreaks":0,"line":1,"col":11}}
11:23:36 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":16,"lineBreaks":0,"line":1,"col":17}
11:23:36 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":44,"lineBreaks":0,"line":1,"col":45}}
11:23:36 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":53,"lineBreaks":0,"line":1,"col":54}
11:23:36 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":59,"lineBreaks":0,"line":1,"col":60}}
11:23:36 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":67,"lineBreaks":0,"line":1,"col":68}
11:23:36 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":92,"lineBreaks":0,"line":1,"col":93}}
11:23:36 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":106,"lineBreaks":0,"line":1,"col":107}
11:23:36 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":113,"lineBreaks":0,"line":1,"col":114}}
11:23:36 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":128,"lineBreaks":0,"line":1,"col":129}
11:23:36 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":170,"lineBreaks":0,"line":1,"col":171}}
11:23:36 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":177,"lineBreaks":0,"line":1,"col":178}
11:23:36 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "dad08d84-92e0-433b-8477-c8f0e4a72e48",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:23:37 - [34mdebug[39m: fromDirectory
11:23:37 - [34mdebug[39m: fromDirectory
11:23:37 - [34mdebug[39m: loadFilesContents
11:23:37 - [34mdebug[39m: loadFilesContents
11:23:37 - [34mdebug[39m: loadFilesContents
11:23:37 - [34mdebug[39m: loadFilesContents
11:23:37 - [34mdebug[39m: loadFilesContents
11:23:37 - [34mdebug[39m: loadFilesContents
11:23:37 - [34mdebug[39m: loadFileContents
11:23:38 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"dad08d84-92e0-433b-8477-c8f0e4a72e48","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:23:38 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"dad08d84-92e0-433b-8477-c8f0e4a72e48","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:23:38 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mdad08d84-92e0-433b-8477-c8f0e4a72e48[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:25:28 - [32minfo[39m: Using current directory as template folder
11:25:28 - [32minfo[39m: Loading a default text/sample.md file.
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: fromDirectory
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: fromDirectory
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFilesContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:28 - [34mdebug[39m: loadFileContents
11:25:31 - [34mdebug[39m: fromDirectory
11:25:31 - [34mdebug[39m: loadFileContents
11:25:31 - [34mdebug[39m: buildGrammar
11:25:31 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:25:31 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:25:31 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:25:31 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:25:31 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:25:31 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:25:31 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:25:31 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93}}
11:25:31 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":119,"lineBreaks":0,"line":2,"col":107}
11:25:31 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":126,"lineBreaks":0,"line":2,"col":114}}
11:25:31 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":141,"lineBreaks":0,"line":2,"col":129}
11:25:31 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":183,"lineBreaks":0,"line":2,"col":171}}
11:25:31 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":190,"lineBreaks":0,"line":2,"col":178}
11:25:31 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "ce39125d-9c0f-4629-bbd8-a926c8d9b376",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:25:32 - [34mdebug[39m: fromDirectory
11:25:32 - [34mdebug[39m: fromDirectory
11:25:32 - [34mdebug[39m: loadFilesContents
11:25:32 - [34mdebug[39m: loadFilesContents
11:25:32 - [34mdebug[39m: loadFilesContents
11:25:32 - [34mdebug[39m: loadFilesContents
11:25:32 - [34mdebug[39m: loadFilesContents
11:25:32 - [34mdebug[39m: loadFilesContents
11:25:32 - [34mdebug[39m: loadFileContents
11:25:33 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"ce39125d-9c0f-4629-bbd8-a926c8d9b376","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:25:33 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"ce39125d-9c0f-4629-bbd8-a926c8d9b376","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:25:33 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mce39125d-9c0f-4629-bbd8-a926c8d9b376[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:25:43 - [32minfo[39m: Using current directory as template folder
11:25:43 - [32minfo[39m: Loading a default data.json file.
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: fromDirectory
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: fromDirectory
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFilesContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:43 - [34mdebug[39m: loadFileContents
11:25:45 - [34mdebug[39m: fromDirectory
11:25:45 - [34mdebug[39m: loadFileContents
11:25:45 - [34mdebug[39m: buildGrammar
11:25:45 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:25:45 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:25:45 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:25:45 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:25:45 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:25:45 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:25:45 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:25:45 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93}}
11:25:45 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":119,"lineBreaks":0,"line":2,"col":107}
11:25:45 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":126,"lineBreaks":0,"line":2,"col":114}}
11:25:45 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":141,"lineBreaks":0,"line":2,"col":129}
11:25:45 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":183,"lineBreaks":0,"line":2,"col":171}}
11:25:45 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":190,"lineBreaks":0,"line":2,"col":178}
11:25:45 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "1d2f2a66-d60a-46ef-8a71-f57a7bf3f17f",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:25:45 - [34mdebug[39m: fromDirectory
11:25:45 - [34mdebug[39m: fromDirectory
11:25:45 - [34mdebug[39m: loadFilesContents
11:25:45 - [34mdebug[39m: loadFilesContents
11:25:45 - [34mdebug[39m: loadFilesContents
11:25:45 - [34mdebug[39m: loadFilesContents
11:25:45 - [34mdebug[39m: loadFilesContents
11:25:45 - [34mdebug[39m: loadFilesContents
11:25:45 - [34mdebug[39m: loadFileContents
11:25:46 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:25:46 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
11:25:46 - [34mdebug[39m: Calling eval with context [object Object]
11:25:46 - [32minfo[39m: #Mietvertrag
**Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
11:35:08 - [32minfo[39m: Using current directory as template folder
11:35:08 - [32minfo[39m: Loading a default data.json file.
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: fromDirectory
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: fromDirectory
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFilesContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:08 - [34mdebug[39m: loadFileContents
11:35:10 - [34mdebug[39m: fromDirectory
11:35:10 - [34mdebug[39m: loadFileContents
11:35:10 - [34mdebug[39m: buildGrammar
11:35:10 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:35:10 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:35:10 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:35:10 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:35:10 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:35:10 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:35:10 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:35:10 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:35:10 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:35:10 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:35:10 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:35:10 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:35:10 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:35:10 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "6346c00a-3036-4b9c-8d4e-075db3ec9231",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:35:10 - [34mdebug[39m: fromDirectory
11:35:10 - [34mdebug[39m: fromDirectory
11:35:10 - [34mdebug[39m: loadFilesContents
11:35:10 - [34mdebug[39m: loadFilesContents
11:35:10 - [34mdebug[39m: loadFilesContents
11:35:10 - [34mdebug[39m: loadFilesContents
11:35:10 - [34mdebug[39m: loadFilesContents
11:35:10 - [34mdebug[39m: loadFilesContents
11:35:10 - [34mdebug[39m: loadFileContents
11:35:12 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:35:12 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
11:35:12 - [34mdebug[39m: Calling eval with context [object Object]
11:35:12 - [32minfo[39m: #Mietvertrag
**Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
11:35:23 - [32minfo[39m: Using current directory as template folder
11:35:23 - [32minfo[39m: Loading a default text/sample.md file.
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: fromDirectory
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: fromDirectory
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFilesContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:23 - [34mdebug[39m: loadFileContents
11:35:25 - [34mdebug[39m: fromDirectory
11:35:25 - [34mdebug[39m: loadFileContents
11:35:25 - [34mdebug[39m: buildGrammar
11:35:25 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:35:25 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:35:25 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:35:25 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:35:25 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:35:25 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:35:25 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:35:25 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:35:25 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:35:25 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:35:25 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:35:25 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:35:25 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:35:25 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "0a37024f-f546-40dd-b8d2-b47ab0ed0122",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:35:25 - [34mdebug[39m: fromDirectory
11:35:25 - [34mdebug[39m: fromDirectory
11:35:25 - [34mdebug[39m: loadFilesContents
11:35:25 - [34mdebug[39m: loadFilesContents
11:35:25 - [34mdebug[39m: loadFilesContents
11:35:25 - [34mdebug[39m: loadFilesContents
11:35:25 - [34mdebug[39m: loadFilesContents
11:35:25 - [34mdebug[39m: loadFilesContents
11:35:25 - [34mdebug[39m: loadFileContents
11:35:26 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"0a37024f-f546-40dd-b8d2-b47ab0ed0122","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:35:26 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"0a37024f-f546-40dd-b8d2-b47ab0ed0122","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:35:26 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m0a37024f-f546-40dd-b8d2-b47ab0ed0122[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:35:51 - [32minfo[39m: Using current directory as template folder
11:35:51 - [32minfo[39m: Loading a default text/sample.md file.
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: fromDirectory
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: fromDirectory
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFilesContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:51 - [34mdebug[39m: loadFileContents
11:35:52 - [34mdebug[39m: fromDirectory
11:35:52 - [34mdebug[39m: loadFileContents
11:35:52 - [34mdebug[39m: buildGrammar
11:35:52 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:35:52 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:35:52 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:35:52 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:35:52 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:35:52 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:35:52 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:35:52 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:35:52 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:35:52 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:35:52 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:35:52 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:35:52 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:35:52 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "84bdd4e2-c25c-405d-aa72-d903cddee3f2",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:35:52 - [34mdebug[39m: fromDirectory
11:35:52 - [34mdebug[39m: fromDirectory
11:35:52 - [34mdebug[39m: loadFilesContents
11:35:52 - [34mdebug[39m: loadFilesContents
11:35:52 - [34mdebug[39m: loadFilesContents
11:35:52 - [34mdebug[39m: loadFilesContents
11:35:52 - [34mdebug[39m: loadFilesContents
11:35:52 - [34mdebug[39m: loadFilesContents
11:35:52 - [34mdebug[39m: loadFileContents
11:35:54 - [31merror[39m: invalid syntax at line 2 col 123:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 8/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400 EUR.
                                                                                                                            ^
Unexpected "8"

11:36:10 - [32minfo[39m: Using current directory as template folder
11:36:10 - [32minfo[39m: Loading a default text/sample.md file.
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: fromDirectory
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: fromDirectory
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFilesContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:10 - [34mdebug[39m: loadFileContents
11:36:12 - [34mdebug[39m: fromDirectory
11:36:12 - [34mdebug[39m: loadFileContents
11:36:12 - [34mdebug[39m: buildGrammar
11:36:12 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:36:12 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:36:12 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:36:12 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:36:12 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:36:12 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:36:12 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:36:12 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:36:12 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:36:12 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:36:12 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:36:12 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:36:12 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:36:12 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "25c45364-710e-4e52-ac53-4e15f2d105d8",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:36:12 - [34mdebug[39m: fromDirectory
11:36:12 - [34mdebug[39m: fromDirectory
11:36:12 - [34mdebug[39m: loadFilesContents
11:36:12 - [34mdebug[39m: loadFilesContents
11:36:12 - [34mdebug[39m: loadFilesContents
11:36:12 - [34mdebug[39m: loadFilesContents
11:36:12 - [34mdebug[39m: loadFilesContents
11:36:12 - [34mdebug[39m: loadFilesContents
11:36:12 - [34mdebug[39m: loadFileContents
11:36:14 - [31merror[39m: invalid syntax at line 2 col 123:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10 Boeblingen 77777" an "Weisgerber" fuer den Zeitraum von 88/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400 EUR.
                                                                                                                            ^
Unexpected "8"

11:36:29 - [32minfo[39m: Using current directory as template folder
11:36:29 - [32minfo[39m: Loading a default text/sample.md file.
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: fromDirectory
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: fromDirectory
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFilesContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:29 - [34mdebug[39m: loadFileContents
11:36:32 - [34mdebug[39m: fromDirectory
11:36:32 - [34mdebug[39m: loadFileContents
11:36:32 - [34mdebug[39m: buildGrammar
11:36:32 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:36:32 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:36:32 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:36:32 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:36:32 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:36:32 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:36:32 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:36:32 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:36:32 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:36:32 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:36:32 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:36:32 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:36:32 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:36:32 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "6299aa88-638c-4f38-ac61-8fa62f280895",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:36:32 - [34mdebug[39m: fromDirectory
11:36:32 - [34mdebug[39m: fromDirectory
11:36:32 - [34mdebug[39m: loadFilesContents
11:36:32 - [34mdebug[39m: loadFilesContents
11:36:32 - [34mdebug[39m: loadFilesContents
11:36:32 - [34mdebug[39m: loadFilesContents
11:36:32 - [34mdebug[39m: loadFilesContents
11:36:32 - [34mdebug[39m: loadFilesContents
11:36:32 - [34mdebug[39m: loadFileContents
11:36:33 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"6299aa88-638c-4f38-ac61-8fa62f280895","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":11,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:36:33 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"6299aa88-638c-4f38-ac61-8fa62f280895","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-12-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:36:33 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m6299aa88-638c-4f38-ac61-8fa62f280895[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-12-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:36:50 - [32minfo[39m: Using current directory as template folder
11:36:50 - [32minfo[39m: Loading a default text/sample.md file.
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: fromDirectory
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: fromDirectory
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFilesContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:50 - [34mdebug[39m: loadFileContents
11:36:52 - [34mdebug[39m: fromDirectory
11:36:52 - [34mdebug[39m: loadFileContents
11:36:52 - [34mdebug[39m: buildGrammar
11:36:52 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:36:52 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:36:52 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:36:52 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"adresse","text":"adresse","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:36:52 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:36:52 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:36:52 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:36:52 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:36:52 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:36:52 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:36:52 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:36:52 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:36:52 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:36:52 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "31529af7-f3c7-477d-b53a-7e93ee7f2644",
        name : rule1,
        adresse : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> String {% id %} # adresse 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  String  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        adresse : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:36:52 - [34mdebug[39m: fromDirectory
11:36:52 - [34mdebug[39m: fromDirectory
11:36:52 - [34mdebug[39m: loadFilesContents
11:36:52 - [34mdebug[39m: loadFilesContents
11:36:52 - [34mdebug[39m: loadFilesContents
11:36:52 - [34mdebug[39m: loadFilesContents
11:36:52 - [34mdebug[39m: loadFilesContents
11:36:52 - [34mdebug[39m: loadFilesContents
11:36:52 - [34mdebug[39m: loadFileContents
11:36:54 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"31529af7-f3c7-477d-b53a-7e93ee7f2644","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:36:54 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"31529af7-f3c7-477d-b53a-7e93ee7f2644","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:36:54 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m31529af7-f3c7-477d-b53a-7e93ee7f2644[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32madresse[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10 Boeblingen 77777[39m[33m"[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
11:42:17 - [32minfo[39m: Using current directory as template folder
11:42:17 - [32minfo[39m: Loading a default text/sample.md file.
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: fromDirectory
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: fromDirectory
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFilesContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:17 - [34mdebug[39m: loadFileContents
11:42:19 - [34mdebug[39m: fromDirectory
11:42:19 - [34mdebug[39m: loadFileContents
11:42:19 - [34mdebug[39m: buildGrammar
11:42:19 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:42:19 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:42:19 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:42:19 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:42:19 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:42:19 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:42:19 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:42:19 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:42:19 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:42:19 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:42:19 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:42:19 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:42:19 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:42:19 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "6786c30a-237f-483b-8c81-e32f73180763",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:42:19 - [34mdebug[39m: fromDirectory
11:42:19 - [34mdebug[39m: fromDirectory
11:42:19 - [34mdebug[39m: loadFilesContents
11:42:19 - [34mdebug[39m: loadFilesContents
11:42:19 - [34mdebug[39m: loadFilesContents
11:42:19 - [34mdebug[39m: loadFilesContents
11:42:19 - [34mdebug[39m: loadFilesContents
11:42:19 - [34mdebug[39m: loadFilesContents
11:42:19 - [34mdebug[39m: loadFileContents
11:42:21 - [31merror[39m: invalid syntax at line 2 col 89:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400 EUR.
                                                                                          ^
Unexpected "a"

11:42:48 - [32minfo[39m: Using current directory as template folder
11:42:48 - [32minfo[39m: Loading a default text/sample.md file.
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: fromDirectory
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: fromDirectory
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFilesContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:48 - [34mdebug[39m: loadFileContents
11:42:50 - [34mdebug[39m: fromDirectory
11:42:50 - [34mdebug[39m: loadFileContents
11:42:50 - [34mdebug[39m: buildGrammar
11:42:50 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:42:50 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:42:50 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:42:50 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:42:50 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:42:50 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:42:50 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:42:50 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:42:50 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:42:50 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:42:50 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:42:50 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:42:50 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:42:50 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "6a380bb6-5bae-485c-a978-d7cf0f1ef53e",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:42:50 - [34mdebug[39m: fromDirectory
11:42:50 - [34mdebug[39m: fromDirectory
11:42:50 - [34mdebug[39m: loadFilesContents
11:42:50 - [34mdebug[39m: loadFilesContents
11:42:50 - [34mdebug[39m: loadFilesContents
11:42:50 - [34mdebug[39m: loadFilesContents
11:42:50 - [34mdebug[39m: loadFilesContents
11:42:50 - [34mdebug[39m: loadFilesContents
11:42:50 - [34mdebug[39m: loadFileContents
11:42:52 - [31merror[39m: invalid syntax at line 2 col 92:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400 EUR.
                                                                                             ^
Unexpected "a"

11:43:05 - [32minfo[39m: Using current directory as template folder
11:43:05 - [32minfo[39m: Loading a default text/sample.md file.
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: fromDirectory
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: fromDirectory
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFilesContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:05 - [34mdebug[39m: loadFileContents
11:43:07 - [34mdebug[39m: fromDirectory
11:43:07 - [34mdebug[39m: loadFileContents
11:43:07 - [34mdebug[39m: buildGrammar
11:43:07 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:43:07 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:43:07 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:43:07 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:43:07 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:43:07 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:43:07 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:43:07 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:43:07 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:43:07 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:43:07 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:43:07 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:43:07 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:43:07 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "50afa1d2-e91a-41a0-bb31-9b5582c890b5",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:43:07 - [34mdebug[39m: fromDirectory
11:43:07 - [34mdebug[39m: fromDirectory
11:43:07 - [34mdebug[39m: loadFilesContents
11:43:07 - [34mdebug[39m: loadFilesContents
11:43:07 - [34mdebug[39m: loadFilesContents
11:43:07 - [34mdebug[39m: loadFilesContents
11:43:07 - [34mdebug[39m: loadFilesContents
11:43:07 - [34mdebug[39m: loadFilesContents
11:43:07 - [34mdebug[39m: loadFileContents
11:43:09 - [31merror[39m: invalid syntax at line 2 col 95:

  **Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400 EUR.
                                                                                                ^
Unexpected "a"

11:43:30 - [32minfo[39m: Using current directory as template folder
11:43:30 - [32minfo[39m: Loading a default text/sample.md file.
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: fromDirectory
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: fromDirectory
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFilesContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:30 - [34mdebug[39m: loadFileContents
11:43:33 - [34mdebug[39m: fromDirectory
11:43:33 - [34mdebug[39m: loadFileContents
11:43:33 - [34mdebug[39m: buildGrammar
11:43:33 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
11:43:33 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
11:43:33 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
11:43:33 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
11:43:33 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
11:43:33 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
11:43:33 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
11:43:33 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
11:43:33 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
11:43:33 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
11:43:33 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
11:43:33 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
11:43:33 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":".","text":".","offset":206,"lineBreaks":0,"line":2,"col":194}
11:43:33 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "b0dafce6-c8e0-429f-a9ea-3c259cf4e9ac",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> "." 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        contractId : data[12],
        parties : data[14]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



11:43:33 - [34mdebug[39m: fromDirectory
11:43:33 - [34mdebug[39m: fromDirectory
11:43:33 - [34mdebug[39m: loadFilesContents
11:43:33 - [34mdebug[39m: loadFilesContents
11:43:33 - [34mdebug[39m: loadFilesContents
11:43:33 - [34mdebug[39m: loadFilesContents
11:43:33 - [34mdebug[39m: loadFilesContents
11:43:33 - [34mdebug[39m: loadFilesContents
11:43:33 - [34mdebug[39m: loadFileContents
11:43:35 - [34mdebug[39m: Result of parsing: {"$class":"org.example.mietvertrag01.MyContract","contractId":"b0dafce6-c8e0-429f-a9ea-3c259cf4e9ac","name":"Hendrik","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Weisgerber","erstes_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2020},"zweites_datum":{"$class":"ParsedDateTime","months":7,"days":20,"years":2021},"preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:43:35 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"b0dafce6-c8e0-429f-a9ea-3c259cf4e9ac","name":"Hendrik","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}
11:43:35 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mb0dafce6-c8e0-429f-a9ea-3c259cf4e9ac[39m[33m"[39m[33m,[39m
  [33m"[39m[32mname[39m[33m"[39m[33m: [39m[33m"[39m[35mHendrik[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mWeisgerber[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m
[33m}[39m
12:09:32 - [32minfo[39m: Using current directory as template folder
12:09:32 - [32minfo[39m: Loading a default data.json file.
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: fromDirectory
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: fromDirectory
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFilesContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:32 - [34mdebug[39m: loadFileContents
12:09:34 - [34mdebug[39m: fromDirectory
12:09:34 - [34mdebug[39m: loadFileContents
12:09:34 - [34mdebug[39m: buildGrammar
12:09:34 - [31merror[39m: invalid syntax at line 3 col 4:

  {{#pleite
     ^
Unexpected startblockid token: "pleite"

12:19:04 - [32minfo[39m: Using current directory as template folder
12:19:04 - [32minfo[39m: Loading a default data.json file.
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: fromDirectory
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: fromDirectory
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFilesContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:04 - [34mdebug[39m: loadFileContents
12:19:05 - [34mdebug[39m: fromDirectory
12:19:05 - [34mdebug[39m: loadFileContents
12:19:05 - [34mdebug[39m: buildGrammar
12:19:05 - [31merror[39m: invalid syntax at line 3 col 4:

  {{# 
     ^
Unexpected startblockspace token: " "

12:21:44 - [32minfo[39m: Using current directory as template folder
12:21:44 - [32minfo[39m: Loading a default data.json file.
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: fromDirectory
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: fromDirectory
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFilesContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:44 - [34mdebug[39m: loadFileContents
12:21:46 - [34mdebug[39m: fromDirectory
12:21:46 - [34mdebug[39m: loadFileContents
12:21:46 - [34mdebug[39m: buildGrammar
12:21:46 - [31merror[39m: invalid syntax at line 3 col 97:

  {{#with pleite}} Der {{mieter}} hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{else
                                                                                                  ^
Unexpected varelseid token: "else"

12:22:32 - [32minfo[39m: Using current directory as template folder
12:22:32 - [32minfo[39m: Loading a default data.json file.
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: fromDirectory
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: fromDirectory
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFilesContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:32 - [34mdebug[39m: loadFileContents
12:22:33 - [34mdebug[39m: fromDirectory
12:22:33 - [34mdebug[39m: loadFileContents
12:22:33 - [34mdebug[39m: buildGrammar
12:22:33 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:22:33 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:22:33 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:22:33 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:22:33 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:22:33 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:22:33 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:22:33 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:22:33 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:22:33 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:22:33 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:22:33 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:22:33 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:22:33 - [34mdebug[39m: element rule13 {"type":"WithBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":" Der ","text":" Der {{","offset":224,"lineBreaks":0,"line":3,"col":17},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":231,"lineBreaks":0,"line":3,"col":24}},{"type":"Chunk","value":" hat nicht genug Geld auf seinem Konto um die miete zu Zahlen.  Der ","text":" hat nicht genug Geld auf seinem Konto um die miete zu Zahlen.  Der {{","offset":239,"lineBreaks":0,"line":3,"col":32},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":309,"lineBreaks":0,"line":3,"col":102}},{"type":"Chunk","value":" zahlt rechtzeitig.","text":" zahlt rechtzeitig.{{","offset":317,"lineBreaks":0,"line":3,"col":110}]},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":216,"lineBreaks":0,"line":3,"col":9}}
12:22:33 - [31merror[39m: Namespace is not defined for type Boolean
12:37:23 - [32minfo[39m: Using current directory as template folder
12:37:23 - [32minfo[39m: Loading a default data.json file.
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: fromDirectory
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: fromDirectory
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFilesContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:23 - [34mdebug[39m: loadFileContents
12:37:25 - [34mdebug[39m: fromDirectory
12:37:25 - [34mdebug[39m: loadFileContents
12:37:25 - [34mdebug[39m: buildGrammar
12:37:25 - [31merror[39m: invalid syntax at line 3 col 22:

  {{#if pleite}} Der {{mieter
                       ^
Unexpected varid token: "mieter"

12:38:02 - [32minfo[39m: Using current directory as template folder
12:38:02 - [32minfo[39m: Loading a default data.json file.
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: fromDirectory
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: fromDirectory
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFilesContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:02 - [34mdebug[39m: loadFileContents
12:38:04 - [34mdebug[39m: fromDirectory
12:38:04 - [34mdebug[39m: loadFileContents
12:38:04 - [34mdebug[39m: buildGrammar
12:38:04 - [31merror[39m: invalid syntax at line 3 col 22:

  {{#if pleite}} Der {{mieter
                       ^
Unexpected varid token: "mieter"

12:39:13 - [32minfo[39m: Using current directory as template folder
12:39:13 - [32minfo[39m: Loading a default data.json file.
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: fromDirectory
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: fromDirectory
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFilesContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:13 - [34mdebug[39m: loadFileContents
12:39:14 - [34mdebug[39m: fromDirectory
12:39:14 - [34mdebug[39m: loadFileContents
12:39:15 - [34mdebug[39m: buildGrammar
12:39:15 - [31merror[39m: invalid syntax at line 3 col 22:

  {{#if pleite}} Der {{mieter
                       ^
Unexpected varid token: "mieter"

12:39:30 - [32minfo[39m: Using current directory as template folder
12:39:30 - [32minfo[39m: Loading a default text/sample.md file.
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: fromDirectory
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: fromDirectory
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFilesContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:30 - [34mdebug[39m: loadFileContents
12:39:34 - [34mdebug[39m: fromDirectory
12:39:34 - [34mdebug[39m: loadFileContents
12:39:34 - [34mdebug[39m: buildGrammar
12:39:34 - [31merror[39m: invalid syntax at line 3 col 22:

  {{#if pleite}} Der {{mieter
                       ^
Unexpected varid token: "mieter"

12:41:45 - [32minfo[39m: Using current directory as template folder
12:41:45 - [32minfo[39m: Loading a default text/sample.md file.
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: fromDirectory
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: fromDirectory
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFilesContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:45 - [34mdebug[39m: loadFileContents
12:41:47 - [34mdebug[39m: fromDirectory
12:41:47 - [34mdebug[39m: loadFileContents
12:41:47 - [34mdebug[39m: buildGrammar
12:41:47 - [31merror[39m: invalid syntax at line 3 col 97:

  {{#if pleite}} Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{else}} Der {{mieter
                                                                                                  ^
Unexpected varid token: "mieter"

12:41:55 - [32minfo[39m: Using current directory as template folder
12:41:55 - [32minfo[39m: Loading a default data.json file.
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: fromDirectory
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: fromDirectory
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFilesContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:55 - [34mdebug[39m: loadFileContents
12:41:57 - [34mdebug[39m: fromDirectory
12:41:57 - [34mdebug[39m: loadFileContents
12:41:57 - [34mdebug[39m: buildGrammar
12:41:57 - [31merror[39m: invalid syntax at line 3 col 97:

  {{#if pleite}} Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{else}} Der {{mieter
                                                                                                  ^
Unexpected varid token: "mieter"

12:42:09 - [32minfo[39m: Using current directory as template folder
12:42:09 - [32minfo[39m: Loading a default data.json file.
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: fromDirectory
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: fromDirectory
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFilesContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:09 - [34mdebug[39m: loadFileContents
12:42:11 - [34mdebug[39m: fromDirectory
12:42:11 - [34mdebug[39m: loadFileContents
12:42:11 - [34mdebug[39m: buildGrammar
12:42:11 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:42:11 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:42:11 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:42:11 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:42:11 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:42:11 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:42:11 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:42:11 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:42:11 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:42:11 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:42:11 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:42:11 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:42:11 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:42:11 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:42:11 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "02ad3aa5-f914-4003-93e5-5abe33a4caed",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:42:11 - [34mdebug[39m: fromDirectory
12:42:11 - [34mdebug[39m: fromDirectory
12:42:11 - [34mdebug[39m: loadFilesContents
12:42:11 - [34mdebug[39m: loadFilesContents
12:42:11 - [34mdebug[39m: loadFilesContents
12:42:11 - [34mdebug[39m: loadFilesContents
12:42:11 - [34mdebug[39m: loadFilesContents
12:42:11 - [34mdebug[39m: loadFilesContents
12:42:11 - [34mdebug[39m: loadFileContents
12:42:13 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","adresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
12:42:13 - [31merror[39m: Unexpected properties for type org.example.mietvertrag01.MyContract: adresse
12:42:55 - [32minfo[39m: Using current directory as template folder
12:42:55 - [32minfo[39m: Loading a default data.json file.
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: fromDirectory
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: fromDirectory
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFilesContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:42:55 - [34mdebug[39m: loadFileContents
12:44:33 - [34mdebug[39m: fromDirectory
12:44:33 - [34mdebug[39m: loadFileContents
12:44:33 - [34mdebug[39m: buildGrammar
12:44:33 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:44:33 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:44:33 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:44:33 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:44:33 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:44:33 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:44:33 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:44:33 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:44:33 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:44:33 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:44:33 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:44:33 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:44:33 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:44:33 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:44:33 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2cc4318c-c562-4997-8114-a756527f70a7",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:44:33 - [34mdebug[39m: fromDirectory
12:44:33 - [34mdebug[39m: fromDirectory
12:44:33 - [34mdebug[39m: loadFilesContents
12:44:33 - [34mdebug[39m: loadFilesContents
12:44:33 - [34mdebug[39m: loadFilesContents
12:44:33 - [34mdebug[39m: loadFilesContents
12:44:33 - [34mdebug[39m: loadFilesContents
12:44:33 - [34mdebug[39m: loadFilesContents
12:44:33 - [34mdebug[39m: loadFileContents
12:44:36 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","addresse":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
12:44:36 - [31merror[39m: Unexpected properties for type org.example.mietvertrag01.MyContract: addresse
12:45:08 - [32minfo[39m: Using current directory as template folder
12:45:08 - [32minfo[39m: Loading a default data.json file.
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: fromDirectory
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: fromDirectory
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFilesContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:08 - [34mdebug[39m: loadFileContents
12:45:44 - [31merror[39m: Failed to load model file. Queue: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object] Details: Error: read ECONNRESET
12:46:41 - [32minfo[39m: Using current directory as template folder
12:46:41 - [32minfo[39m: Loading a default data.json file.
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: fromDirectory
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: fromDirectory
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFilesContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:46:41 - [34mdebug[39m: loadFileContents
12:47:17 - [34mdebug[39m: fromDirectory
12:47:17 - [34mdebug[39m: loadFileContents
12:47:17 - [34mdebug[39m: buildGrammar
12:47:17 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:47:17 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:47:17 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:47:17 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:47:17 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:47:17 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:47:17 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:47:17 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:47:17 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:47:17 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:47:17 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:47:17 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:47:17 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:47:17 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:47:17 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "94ddddac-b756-44bb-a97c-72c6886b7ac0",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:47:17 - [34mdebug[39m: fromDirectory
12:47:17 - [34mdebug[39m: fromDirectory
12:47:17 - [34mdebug[39m: loadFilesContents
12:47:17 - [34mdebug[39m: loadFilesContents
12:47:17 - [34mdebug[39m: loadFilesContents
12:47:17 - [34mdebug[39m: loadFilesContents
12:47:17 - [34mdebug[39m: loadFilesContents
12:47:17 - [34mdebug[39m: loadFilesContents
12:47:17 - [34mdebug[39m: loadFileContents
12:47:19 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","address":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
12:47:19 - [31merror[39m: Unexpected properties for type org.accordproject.address.PostalAddress: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37
12:47:36 - [32minfo[39m: Using current directory as template folder
12:47:36 - [32minfo[39m: Loading a default data.json file.
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: fromDirectory
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: fromDirectory
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFilesContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:36 - [34mdebug[39m: loadFileContents
12:47:38 - [34mdebug[39m: fromDirectory
12:47:38 - [34mdebug[39m: loadFileContents
12:47:38 - [34mdebug[39m: buildGrammar
12:47:38 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:47:38 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:47:38 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:47:38 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:47:38 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:47:38 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:47:38 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:47:38 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:47:38 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:47:38 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:47:38 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:47:38 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:47:38 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:47:38 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:47:38 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "46098755-c412-45ff-94bf-c1696bab2b8b",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:47:38 - [34mdebug[39m: fromDirectory
12:47:38 - [34mdebug[39m: fromDirectory
12:47:38 - [34mdebug[39m: loadFilesContents
12:47:38 - [34mdebug[39m: loadFilesContents
12:47:38 - [34mdebug[39m: loadFilesContents
12:47:38 - [34mdebug[39m: loadFilesContents
12:47:38 - [34mdebug[39m: loadFilesContents
12:47:38 - [34mdebug[39m: loadFilesContents
12:47:38 - [34mdebug[39m: loadFileContents
12:47:39 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","address":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
12:47:39 - [31merror[39m: Unexpected properties for type org.accordproject.address.PostalAddress: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37
12:47:43 - [32minfo[39m: Using current directory as template folder
12:47:43 - [32minfo[39m: Loading a default data.json file.
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: fromDirectory
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: fromDirectory
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFilesContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:43 - [34mdebug[39m: loadFileContents
12:47:45 - [34mdebug[39m: fromDirectory
12:47:45 - [34mdebug[39m: loadFileContents
12:47:45 - [34mdebug[39m: buildGrammar
12:47:45 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:47:45 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:47:45 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:47:45 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:47:45 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:47:45 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:47:45 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:47:45 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:47:45 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:47:45 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:47:45 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:47:45 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:47:45 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:47:45 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:47:45 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "78ec646f-217f-4618-b11b-67f210b8375a",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:47:45 - [34mdebug[39m: fromDirectory
12:47:45 - [34mdebug[39m: fromDirectory
12:47:45 - [34mdebug[39m: loadFilesContents
12:47:45 - [34mdebug[39m: loadFilesContents
12:47:45 - [34mdebug[39m: loadFilesContents
12:47:45 - [34mdebug[39m: loadFilesContents
12:47:45 - [34mdebug[39m: loadFilesContents
12:47:45 - [34mdebug[39m: loadFilesContents
12:47:45 - [34mdebug[39m: loadFileContents
12:47:47 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","address":"Boeblinger Strasse 10 Boeblingen 77777","mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
12:47:47 - [31merror[39m: Unexpected properties for type org.accordproject.address.PostalAddress: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37
12:49:16 - [32minfo[39m: Using current directory as template folder
12:49:16 - [32minfo[39m: Loading a default data.json file.
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: fromDirectory
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: fromDirectory
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFilesContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:16 - [34mdebug[39m: loadFileContents
12:49:18 - [34mdebug[39m: fromDirectory
12:49:18 - [34mdebug[39m: loadFileContents
12:49:18 - [34mdebug[39m: buildGrammar
12:49:18 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:49:18 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:49:18 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:49:18 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:49:18 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:49:18 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:49:18 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:49:18 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:49:18 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:49:18 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:49:18 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:49:18 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:49:18 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:49:18 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:49:18 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "5c443476-35f0-4154-8e78-4aad1a36d8db",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:49:18 - [34mdebug[39m: fromDirectory
12:49:18 - [34mdebug[39m: fromDirectory
12:49:18 - [34mdebug[39m: loadFilesContents
12:49:18 - [34mdebug[39m: loadFilesContents
12:49:18 - [34mdebug[39m: loadFilesContents
12:49:18 - [34mdebug[39m: loadFilesContents
12:49:18 - [34mdebug[39m: loadFilesContents
12:49:18 - [34mdebug[39m: loadFilesContents
12:49:18 - [34mdebug[39m: loadFileContents
12:49:19 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
12:49:19 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
12:49:19 - [34mdebug[39m: Calling eval with context [object Object]
12:49:19 - [32minfo[39m: #Mietvertrag
**Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen.
12:49:56 - [32minfo[39m: Using current directory as template folder
12:49:56 - [32minfo[39m: Loading a default data.json file.
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: fromDirectory
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: fromDirectory
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFilesContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:56 - [34mdebug[39m: loadFileContents
12:49:59 - [34mdebug[39m: fromDirectory
12:49:59 - [34mdebug[39m: loadFileContents
12:49:59 - [34mdebug[39m: buildGrammar
12:49:59 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
12:49:59 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
12:49:59 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
12:49:59 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
12:49:59 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
12:49:59 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
12:49:59 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
12:49:59 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
12:49:59 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
12:49:59 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
12:49:59 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
12:49:59 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
12:49:59 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
12:49:59 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":297,"lineBreaks":0,"line":3,"col":90},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
12:49:59 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "721536c0-b4d9-4d96-9d36-1210945b9937",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



12:49:59 - [34mdebug[39m: fromDirectory
12:49:59 - [34mdebug[39m: fromDirectory
12:49:59 - [34mdebug[39m: loadFilesContents
12:49:59 - [34mdebug[39m: loadFilesContents
12:49:59 - [34mdebug[39m: loadFilesContents
12:49:59 - [34mdebug[39m: loadFilesContents
12:49:59 - [34mdebug[39m: loadFilesContents
12:49:59 - [34mdebug[39m: loadFilesContents
12:49:59 - [34mdebug[39m: loadFileContents
12:50:00 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false}
12:50:00 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
12:50:00 - [34mdebug[39m: Calling eval with context [object Object]
12:50:00 - [32minfo[39m: #Mietvertrag
**Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Der zahlt rechtzeitig.
12:50:43 - [32minfo[39m: Using current directory as template folder
12:50:43 - [32minfo[39m: Loading a default data.json file.
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: fromDirectory
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: fromDirectory
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFilesContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:43 - [34mdebug[39m: loadFileContents
12:50:45 - [34mdebug[39m: fromDirectory
12:50:45 - [34mdebug[39m: loadFileContents
12:50:45 - [34mdebug[39m: buildGrammar
12:50:45 - [31merror[39m: invalid syntax at line 3 col 22:

  {{#if pleite}} Der {{mieter
                       ^
Unexpected varid token: "mieter"

12:52:22 - [32minfo[39m: Using current directory as template folder
12:52:22 - [32minfo[39m: Loading a default data.json file.
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: fromDirectory
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: fromDirectory
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFilesContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:22 - [34mdebug[39m: loadFileContents
12:52:23 - [34mdebug[39m: fromDirectory
12:52:23 - [34mdebug[39m: loadFileContents
12:52:24 - [34mdebug[39m: buildGrammar
12:52:24 - [31merror[39m: invalid syntax at line 4 col 7:

  Der {{mieter
        ^
Unexpected varid token: "mieter"

13:01:39 - [32minfo[39m: Using current directory as template folder
13:01:39 - [32minfo[39m: Loading a default data.json file.
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: fromDirectory
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: fromDirectory
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFilesContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:39 - [34mdebug[39m: loadFileContents
13:01:41 - [34mdebug[39m: fromDirectory
13:01:41 - [34mdebug[39m: loadFileContents
13:01:41 - [34mdebug[39m: buildGrammar
13:01:41 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
13:01:41 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":23,"lineBreaks":0,"line":2,"col":11}}
13:01:41 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" vermiete meine *Wohnung* ","text":" vermiete meine *Wohnung* {{","offset":29,"lineBreaks":0,"line":2,"col":17}
13:01:41 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":57,"lineBreaks":0,"line":2,"col":45}}
13:01:41 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":66,"lineBreaks":0,"line":2,"col":54}
13:01:41 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":72,"lineBreaks":0,"line":2,"col":60}}
13:01:41 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":80,"lineBreaks":0,"line":2,"col":68}
13:01:41 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":105,"lineBreaks":0,"line":2,"col":93},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":121,"lineBreaks":0,"line":2,"col":109}}
13:01:41 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":135,"lineBreaks":0,"line":2,"col":123}
13:01:41 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":142,"lineBreaks":0,"line":2,"col":130}}
13:01:41 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":157,"lineBreaks":0,"line":2,"col":145}
13:01:41 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":199,"lineBreaks":0,"line":2,"col":187}}
13:01:41 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":206,"lineBreaks":1,"line":2,"col":194}
13:01:41 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":222,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":304,"lineBreaks":0,"line":3,"col":97},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":214,"lineBreaks":0,"line":3,"col":7}}
13:01:41 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "abbecdf2-54e0-4172-b77b-5219ec3cd124",
        name : rule1,
        address : rule3,
        mieter : rule5,
        erstes_datum : rule7,
        zweites_datum : rule9,
        preis : rule11,
        pleite : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** " 


rule1 -> String {% id %} # name 


rule2 -> " vermiete meine *Wohnung* " 


rule3 -> PostalAddress {% id %} # address 


rule4 -> " an " 


rule5 -> String {% id %} # mieter 


rule6 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule8 -> " bis " 


rule9 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule10 -> " fuer einen ***Monatlichen*** preis von " 


rule11 -> MonetaryAmount {% id %} # preis 


rule12 -> ".\n" 


rule13 -> (" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. "|" Der zahlt rechtzeitig.") {% (d) => {return d[0][0] === " Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ";}%} # pleite 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> String  __  PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        name : data[0],
        address : data[2],
        mieter : data[4],
        erstes_datum : data[6],
        zweites_datum : data[8],
        preis : data[10],
        pleite : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



13:01:41 - [34mdebug[39m: fromDirectory
13:01:41 - [34mdebug[39m: fromDirectory
13:01:41 - [34mdebug[39m: loadFilesContents
13:01:41 - [34mdebug[39m: loadFilesContents
13:01:41 - [34mdebug[39m: loadFilesContents
13:01:41 - [34mdebug[39m: loadFilesContents
13:01:41 - [34mdebug[39m: loadFilesContents
13:01:41 - [34mdebug[39m: loadFilesContents
13:01:41 - [34mdebug[39m: loadFileContents
13:01:42 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","name":"Hendrik","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Weisgerber","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true}
13:01:42 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
13:01:42 - [34mdebug[39m: Calling eval with context [object Object]
13:01:42 - [32minfo[39m: #Mietvertrag
**Ich** "Hendrik" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Weisgerber" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen.
14:17:54 - [32minfo[39m: Using current directory as template folder
14:17:54 - [32minfo[39m: Loading a default data.json file.
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: fromDirectory
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: fromDirectory
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFilesContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:54 - [34mdebug[39m: loadFileContents
14:17:56 - [34mdebug[39m: fromDirectory
14:17:56 - [34mdebug[39m: loadFileContents
14:17:56 - [34mdebug[39m: buildGrammar
14:17:56 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
14:17:56 - [34mdebug[39m: element rule1 {"type":"WithBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":" ","text":" {{","offset":40,"lineBreaks":0,"line":2,"col":28},{"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":43,"lineBreaks":0,"line":2,"col":31}},{"type":"Chunk","value":" ","text":" {{","offset":49,"lineBreaks":0,"line":2,"col":37},{"type":"Binding","fieldName":{"type":"varid","value":"nachname","text":"nachname","offset":52,"lineBreaks":0,"line":2,"col":40}},{"type":"Chunk","value":" ","text":" {{","offset":62,"lineBreaks":0,"line":2,"col":50}]},"fieldName":{"type":"startblockid","value":"vermieter","text":"vermieter","offset":29,"lineBreaks":0,"line":2,"col":17}}
14:17:56 - [34mdebug[39m: element rule2 {"type":"Chunk","value":"vermiete meine *Wohnung* ","text":"vermiete meine *Wohnung* {{","offset":72,"lineBreaks":0,"line":2,"col":60}
14:17:56 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":99,"lineBreaks":0,"line":2,"col":87}}
14:17:56 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":108,"lineBreaks":0,"line":2,"col":96}
14:17:56 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":114,"lineBreaks":0,"line":2,"col":102}}
14:17:56 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":122,"lineBreaks":0,"line":2,"col":110}
14:17:56 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":147,"lineBreaks":0,"line":2,"col":135},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":163,"lineBreaks":0,"line":2,"col":151}}
14:17:56 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":177,"lineBreaks":0,"line":2,"col":165}
14:17:56 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":184,"lineBreaks":0,"line":2,"col":172}}
14:17:56 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":199,"lineBreaks":0,"line":2,"col":187}
14:17:56 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":241,"lineBreaks":0,"line":2,"col":229}}
14:17:56 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":248,"lineBreaks":1,"line":2,"col":236}
14:17:56 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":264,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":346,"lineBreaks":0,"line":3,"col":97},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":256,"lineBreaks":0,"line":3,"col":7}}
14:17:56 - [31merror[39m: Namespace is not defined for type String
14:18:42 - [32minfo[39m: Using current directory as template folder
14:18:42 - [32minfo[39m: Loading a default data.json file.
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: fromDirectory
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: fromDirectory
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFilesContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:42 - [34mdebug[39m: loadFileContents
14:18:44 - [34mdebug[39m: fromDirectory
14:18:44 - [34mdebug[39m: loadFileContents
14:18:44 - [34mdebug[39m: buildGrammar
14:18:44 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
14:18:44 - [34mdebug[39m: element rule1 {"type":"WithBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":" ","text":" {{","offset":40,"lineBreaks":0,"line":2,"col":28},{"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":43,"lineBreaks":0,"line":2,"col":31}},{"type":"Chunk","value":" ","text":" {{","offset":49,"lineBreaks":0,"line":2,"col":37},{"type":"Binding","fieldName":{"type":"varid","value":"nachname","text":"nachname","offset":52,"lineBreaks":0,"line":2,"col":40}},{"type":"Chunk","value":" ","text":" {{","offset":62,"lineBreaks":0,"line":2,"col":50}]},"fieldName":{"type":"startblockid","value":"vermieter","text":"vermieter","offset":29,"lineBreaks":0,"line":2,"col":17}}
14:18:44 - [34mdebug[39m: element rule2 {"type":"Chunk","value":"vermiete meine *Wohnung* ","text":"vermiete meine *Wohnung* {{","offset":72,"lineBreaks":0,"line":2,"col":60}
14:18:44 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":99,"lineBreaks":0,"line":2,"col":87}}
14:18:44 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":108,"lineBreaks":0,"line":2,"col":96}
14:18:44 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":114,"lineBreaks":0,"line":2,"col":102}}
14:18:44 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":122,"lineBreaks":0,"line":2,"col":110}
14:18:44 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":147,"lineBreaks":0,"line":2,"col":135},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":163,"lineBreaks":0,"line":2,"col":151}}
14:18:44 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":177,"lineBreaks":0,"line":2,"col":165}
14:18:44 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":184,"lineBreaks":0,"line":2,"col":172}}
14:18:44 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":199,"lineBreaks":0,"line":2,"col":187}
14:18:44 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":241,"lineBreaks":0,"line":2,"col":229}}
14:18:44 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":248,"lineBreaks":1,"line":2,"col":236}
14:18:44 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":264,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":346,"lineBreaks":0,"line":3,"col":97},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":256,"lineBreaks":0,"line":3,"col":7}}
14:18:44 - [31merror[39m: Template references a property 'vermieter' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 2 column 17
14:20:36 - [32minfo[39m: Using current directory as template folder
14:20:36 - [32minfo[39m: Loading a default data.json file.
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: fromDirectory
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: fromDirectory
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFilesContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:36 - [34mdebug[39m: loadFileContents
14:20:38 - [34mdebug[39m: fromDirectory
14:20:38 - [34mdebug[39m: loadFileContents
14:20:38 - [34mdebug[39m: buildGrammar
14:20:38 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
14:20:38 - [34mdebug[39m: element rule1 {"type":"WithBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":" ","text":" {{","offset":40,"lineBreaks":0,"line":2,"col":28},{"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":43,"lineBreaks":0,"line":2,"col":31}},{"type":"Chunk","value":" ","text":" {{","offset":49,"lineBreaks":0,"line":2,"col":37},{"type":"Binding","fieldName":{"type":"varid","value":"nachname","text":"nachname","offset":52,"lineBreaks":0,"line":2,"col":40}},{"type":"Chunk","value":" ","text":" {{","offset":62,"lineBreaks":0,"line":2,"col":50}]},"fieldName":{"type":"startblockid","value":"vermieter","text":"vermieter","offset":29,"lineBreaks":0,"line":2,"col":17}}
14:20:38 - [34mdebug[39m: element rule2 {"type":"Chunk","value":"vermiete meine *Wohnung* ","text":"vermiete meine *Wohnung* {{","offset":72,"lineBreaks":0,"line":2,"col":60}
14:20:38 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":99,"lineBreaks":0,"line":2,"col":87}}
14:20:38 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":108,"lineBreaks":0,"line":2,"col":96}
14:20:38 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":114,"lineBreaks":0,"line":2,"col":102}}
14:20:38 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":122,"lineBreaks":0,"line":2,"col":110}
14:20:38 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":147,"lineBreaks":0,"line":2,"col":135},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":163,"lineBreaks":0,"line":2,"col":151}}
14:20:38 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":177,"lineBreaks":0,"line":2,"col":165}
14:20:38 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":184,"lineBreaks":0,"line":2,"col":172}}
14:20:38 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":199,"lineBreaks":0,"line":2,"col":187}
14:20:38 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":241,"lineBreaks":0,"line":2,"col":229}}
14:20:38 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":248,"lineBreaks":1,"line":2,"col":236}
14:20:38 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. ","text":" Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen. {{","offset":264,"lineBreaks":0,"line":3,"col":15},"stringElse":{"type":"Chunk","value":" Der zahlt rechtzeitig.","text":" Der zahlt rechtzeitig.{{","offset":346,"lineBreaks":0,"line":3,"col":97},"fieldName":{"type":"startblockid","value":"pleite","text":"pleite","offset":256,"lineBreaks":0,"line":3,"col":7}}
14:20:38 - [31merror[39m: Template references a property 'vermieter' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 2 column 17
14:22:21 - [32minfo[39m: Using current directory as template folder
14:22:21 - [32minfo[39m: Loading a default data.json file.
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: fromDirectory
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: fromDirectory
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFilesContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:21 - [34mdebug[39m: loadFileContents
14:22:22 - [31merror[39m: Undeclared type enum in property org.example.mietvertrag01.MyContract.vermieter File 'C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto': 
15:04:17 - [32minfo[39m: Using current directory as template folder
15:04:17 - [32minfo[39m: Loading a default data.json file.
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: fromDirectory
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: fromDirectory
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFilesContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [34mdebug[39m: loadFileContents
15:04:17 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "S" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 26 column 5
15:05:10 - [32minfo[39m: Using current directory as template folder
15:05:10 - [32minfo[39m: Loading a default data.json file.
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: fromDirectory
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: fromDirectory
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFilesContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [34mdebug[39m: loadFileContents
15:05:10 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "a" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 36 column 1
15:05:17 - [32minfo[39m: Using current directory as template folder
15:05:17 - [32minfo[39m: Loading a default data.json file.
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: fromDirectory
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: fromDirectory
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFilesContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [34mdebug[39m: loadFileContents
15:05:17 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "a" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 36 column 1
15:22:45 - [32minfo[39m: Using current directory as template folder
15:22:45 - [32minfo[39m: Loading a default data.json file.
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: fromDirectory
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: fromDirectory
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFileContents
15:22:45 - [34mdebug[39m: loadFilesContents
15:22:47 - [34mdebug[39m: fromDirectory
15:22:47 - [34mdebug[39m: loadFileContents
15:22:47 - [34mdebug[39m: buildGrammar
15:22:47 - [31merror[39m: invalid syntax at line 3 col 22:

  {{#if pleite}} Der {{mieter
                       ^
Unexpected varid token: "mieter"

15:31:43 - [32minfo[39m: Using current directory as template folder
15:31:43 - [32minfo[39m: Loading a default data.json file.
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: fromDirectory
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: fromDirectory
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFileContents
15:31:43 - [34mdebug[39m: loadFilesContents
15:31:45 - [34mdebug[39m: fromDirectory
15:31:45 - [34mdebug[39m: loadFileContents
15:31:45 - [34mdebug[39m: buildGrammar
15:31:45 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:31:45 - [34mdebug[39m: element rule1 {"type":"WithBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":" ","text":" {{","offset":40,"lineBreaks":0,"line":2,"col":28},{"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":43,"lineBreaks":0,"line":2,"col":31}},{"type":"Chunk","value":" ","text":" {{","offset":49,"lineBreaks":0,"line":2,"col":37},{"type":"Binding","fieldName":{"type":"varid","value":"nachname","text":"nachname","offset":52,"lineBreaks":0,"line":2,"col":40}},{"type":"Chunk","value":" ","text":" {{","offset":62,"lineBreaks":0,"line":2,"col":50}]},"fieldName":{"type":"startblockid","value":"vermieter","text":"vermieter","offset":29,"lineBreaks":0,"line":2,"col":17}}
15:31:45 - [34mdebug[39m: element rule2 {"type":"Chunk","value":"vermiete meine *Wohnung* ","text":"vermiete meine *Wohnung* {{","offset":72,"lineBreaks":0,"line":2,"col":60}
15:31:45 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":99,"lineBreaks":0,"line":2,"col":87}}
15:31:45 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":108,"lineBreaks":0,"line":2,"col":96}
15:31:45 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":114,"lineBreaks":0,"line":2,"col":102}}
15:31:45 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":122,"lineBreaks":0,"line":2,"col":110}
15:31:45 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":147,"lineBreaks":0,"line":2,"col":135},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":163,"lineBreaks":0,"line":2,"col":151}}
15:31:45 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":177,"lineBreaks":0,"line":2,"col":165}
15:31:45 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":184,"lineBreaks":0,"line":2,"col":172}}
15:31:45 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":199,"lineBreaks":0,"line":2,"col":187}
15:31:45 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":241,"lineBreaks":0,"line":2,"col":229}}
15:31:45 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":248,"lineBreaks":1,"line":2,"col":236}
15:31:45 - [34mdebug[39m: element rule13 {"type":"Expr"}
15:31:45 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n","text":"\n{{","offset":403,"lineBreaks":1,"line":7,"col":4}
15:31:45 - [34mdebug[39m: element rule15 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":421,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":462,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":410,"lineBreaks":0,"line":8,"col":7}}
15:31:45 - [31merror[39m: Template references a property 'vermieter' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 2 column 17
15:33:10 - [32minfo[39m: Using current directory as template folder
15:33:10 - [32minfo[39m: Loading a default data.json file.
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: fromDirectory
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: fromDirectory
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFilesContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:10 - [34mdebug[39m: loadFileContents
15:33:11 - [34mdebug[39m: loadFileContents
15:33:11 - [34mdebug[39m: loadFileContents
15:33:11 - [34mdebug[39m: loadFileContents
15:33:11 - [34mdebug[39m: loadFilesContents
15:33:12 - [34mdebug[39m: fromDirectory
15:33:12 - [34mdebug[39m: loadFileContents
15:33:12 - [34mdebug[39m: buildGrammar
15:33:12 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** ","text":"#Mietvertrag\n**Ich** {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:33:12 - [34mdebug[39m: element rule1 {"type":"WithBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":" ","text":" {{","offset":40,"lineBreaks":0,"line":2,"col":28},{"type":"Binding","fieldName":{"type":"varid","value":"name","text":"name","offset":43,"lineBreaks":0,"line":2,"col":31}},{"type":"Chunk","value":" ","text":" {{","offset":49,"lineBreaks":0,"line":2,"col":37},{"type":"Binding","fieldName":{"type":"varid","value":"nachname","text":"nachname","offset":52,"lineBreaks":0,"line":2,"col":40}},{"type":"Chunk","value":" ","text":" {{","offset":62,"lineBreaks":0,"line":2,"col":50}]},"fieldName":{"type":"startblockid","value":"vermieter","text":"vermieter","offset":29,"lineBreaks":0,"line":2,"col":17}}
15:33:12 - [34mdebug[39m: element rule2 {"type":"Chunk","value":"vermiete meine *Wohnung* ","text":"vermiete meine *Wohnung* {{","offset":72,"lineBreaks":0,"line":2,"col":60}
15:33:12 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":99,"lineBreaks":0,"line":2,"col":87}}
15:33:12 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" an ","text":" an {{","offset":108,"lineBreaks":0,"line":2,"col":96}
15:33:12 - [34mdebug[39m: element rule5 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":114,"lineBreaks":0,"line":2,"col":102}}
15:33:12 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":122,"lineBreaks":0,"line":2,"col":110}
15:33:12 - [34mdebug[39m: element rule7 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":147,"lineBreaks":0,"line":2,"col":135},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":163,"lineBreaks":0,"line":2,"col":151}}
15:33:12 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" bis ","text":" bis {{","offset":177,"lineBreaks":0,"line":2,"col":165}
15:33:12 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":184,"lineBreaks":0,"line":2,"col":172}}
15:33:12 - [34mdebug[39m: element rule10 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":199,"lineBreaks":0,"line":2,"col":187}
15:33:12 - [34mdebug[39m: element rule11 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":241,"lineBreaks":0,"line":2,"col":229}}
15:33:12 - [34mdebug[39m: element rule12 {"type":"Chunk","value":".\n","text":".\n{{","offset":248,"lineBreaks":1,"line":2,"col":236}
15:33:12 - [34mdebug[39m: element rule13 {"type":"Expr"}
15:33:12 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n","text":"\n{{","offset":402,"lineBreaks":1,"line":7,"col":4}
15:33:12 - [34mdebug[39m: element rule15 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":420,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":461,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":409,"lineBreaks":0,"line":8,"col":7}}
15:33:12 - [31merror[39m: Template references a property 'vermieter' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 2 column 17
15:33:37 - [32minfo[39m: Using current directory as template folder
15:33:37 - [32minfo[39m: Loading a default data.json file.
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: fromDirectory
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: fromDirectory
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFileContents
15:33:37 - [34mdebug[39m: loadFilesContents
15:33:38 - [34mdebug[39m: fromDirectory
15:33:38 - [34mdebug[39m: loadFileContents
15:33:38 - [34mdebug[39m: buildGrammar
15:33:38 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:33:38 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:33:38 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:33:38 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:33:38 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:33:38 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:33:38 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:33:38 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:33:38 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:33:38 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:33:38 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:33:38 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:33:38 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:33:38 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:33:38 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "872c24c3-6208-4376-9ba1-ca7ec185143c",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:33:38 - [34mdebug[39m: fromDirectory
15:33:38 - [34mdebug[39m: fromDirectory
15:33:38 - [34mdebug[39m: loadFilesContents
15:33:38 - [34mdebug[39m: loadFilesContents
15:33:38 - [34mdebug[39m: loadFilesContents
15:33:38 - [34mdebug[39m: loadFilesContents
15:33:38 - [34mdebug[39m: loadFilesContents
15:33:38 - [34mdebug[39m: loadFileContents
15:33:38 - [34mdebug[39m: loadFilesContents
15:33:40 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","vermieter":{"name":"Hendrik","nachname":"Weisgerber"},"address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:33:40 - [31merror[39m: Unexpected properties for type org.example.mietvertrag01.MyContract: vermieter
15:41:28 - [32minfo[39m: Using current directory as template folder
15:41:28 - [32minfo[39m: Loading a default data.json file.
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: fromDirectory
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: fromDirectory
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFileContents
15:41:28 - [34mdebug[39m: loadFilesContents
15:41:29 - [34mdebug[39m: fromDirectory
15:41:29 - [34mdebug[39m: loadFileContents
15:41:29 - [34mdebug[39m: buildGrammar
15:41:29 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:41:29 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:41:29 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:41:29 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:41:29 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:41:29 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:41:29 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:41:29 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:41:29 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:41:29 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:41:29 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:41:29 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:41:29 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:41:29 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:41:29 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "83d73614-94d7-4761-af58-23adc8dbd187",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:41:30 - [34mdebug[39m: fromDirectory
15:41:30 - [34mdebug[39m: fromDirectory
15:41:30 - [34mdebug[39m: loadFilesContents
15:41:30 - [34mdebug[39m: loadFilesContents
15:41:30 - [34mdebug[39m: loadFilesContents
15:41:30 - [34mdebug[39m: loadFilesContents
15:41:30 - [34mdebug[39m: loadFilesContents
15:41:30 - [34mdebug[39m: loadFilesContents
15:41:30 - [34mdebug[39m: loadFileContents
15:41:31 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","vermieter":{"name":"Hendrik","nachname":"Weisgerber"},"address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:41:31 - [31merror[39m: Unexpected properties for type org.example.mietvertrag01.MyContract: vermieter
15:42:01 - [32minfo[39m: Using current directory as template folder
15:42:01 - [32minfo[39m: Loading a default data.json file.
15:42:01 - [31merror[39m: Unexpected token / in JSON at position 112
15:42:56 - [32minfo[39m: Using current directory as template folder
15:42:56 - [32minfo[39m: Loading a default data.json file.
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: fromDirectory
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: fromDirectory
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFileContents
15:42:56 - [34mdebug[39m: loadFilesContents
15:43:01 - [34mdebug[39m: fromDirectory
15:43:01 - [34mdebug[39m: loadFileContents
15:43:01 - [34mdebug[39m: buildGrammar
15:43:01 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:43:01 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:43:01 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:43:01 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:43:01 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:43:01 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:43:01 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:43:01 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:43:01 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:43:01 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:43:01 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:43:01 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:43:01 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:43:01 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:43:01 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "3b756b53-5972-4dab-bb92-64a6f0e8e9d0",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:43:01 - [34mdebug[39m: fromDirectory
15:43:01 - [34mdebug[39m: fromDirectory
15:43:01 - [34mdebug[39m: loadFilesContents
15:43:01 - [34mdebug[39m: loadFilesContents
15:43:01 - [34mdebug[39m: loadFilesContents
15:43:01 - [34mdebug[39m: loadFilesContents
15:43:01 - [34mdebug[39m: loadFilesContents
15:43:01 - [34mdebug[39m: loadFileContents
15:43:01 - [34mdebug[39m: loadFilesContents
15:43:02 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:43:02 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
15:43:02 - [34mdebug[39m: Calling eval with context [object Object]
15:43:02 - [32minfo[39m: #Mietvertrag
**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen."}}
Der mieter kann trotzdem zahlen
15:43:36 - [32minfo[39m: Using current directory as template folder
15:43:36 - [32minfo[39m: Loading a default data.json file.
15:43:36 - [34mdebug[39m: loadFileContents
15:43:36 - [34mdebug[39m: loadFileContents
15:43:36 - [34mdebug[39m: loadFileContents
15:43:36 - [34mdebug[39m: fromDirectory
15:43:36 - [34mdebug[39m: loadFilesContents
15:43:36 - [34mdebug[39m: loadFilesContents
15:43:36 - [34mdebug[39m: loadFilesContents
15:43:36 - [34mdebug[39m: loadFilesContents
15:43:36 - [34mdebug[39m: loadFilesContents
15:43:36 - [34mdebug[39m: loadFilesContents
15:43:36 - [34mdebug[39m: loadFileContents
15:43:36 - [34mdebug[39m: fromDirectory
15:43:37 - [34mdebug[39m: loadFilesContents
15:43:37 - [34mdebug[39m: loadFilesContents
15:43:37 - [34mdebug[39m: loadFilesContents
15:43:37 - [34mdebug[39m: loadFilesContents
15:43:37 - [34mdebug[39m: loadFilesContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFileContents
15:43:37 - [34mdebug[39m: loadFilesContents
15:43:38 - [34mdebug[39m: fromDirectory
15:43:38 - [34mdebug[39m: loadFileContents
15:43:38 - [34mdebug[39m: buildGrammar
15:43:38 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:43:38 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:43:38 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:43:38 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:43:38 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:43:38 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:43:38 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:43:38 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:43:38 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:43:38 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:43:38 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:43:38 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:43:38 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:43:38 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:43:38 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "cdacb7a0-88f1-4735-be10-b7d31abecabf",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:43:38 - [34mdebug[39m: fromDirectory
15:43:38 - [34mdebug[39m: fromDirectory
15:43:38 - [34mdebug[39m: loadFilesContents
15:43:38 - [34mdebug[39m: loadFilesContents
15:43:38 - [34mdebug[39m: loadFilesContents
15:43:38 - [34mdebug[39m: loadFilesContents
15:43:38 - [34mdebug[39m: loadFilesContents
15:43:38 - [34mdebug[39m: loadFileContents
15:43:38 - [34mdebug[39m: loadFilesContents
15:43:40 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:43:40 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
15:43:40 - [34mdebug[39m: Calling eval with context [object Object]
15:43:40 - [32minfo[39m: Creating file: sample.md
15:43:40 - [32minfo[39m: #Mietvertrag
**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen."}}
Der mieter kann trotzdem zahlen
15:46:33 - [32minfo[39m: Using current directory as template folder
15:46:33 - [32minfo[39m: Loading a default data.json file.
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: fromDirectory
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: fromDirectory
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFileContents
15:46:33 - [34mdebug[39m: loadFilesContents
15:46:40 - [31merror[39m: Failed to load model file. Queue: [object Object],[object Object],[object Object],[object Object] Details: Error: read ECONNRESET
15:47:05 - [32minfo[39m: Using current directory as template folder
15:47:05 - [32minfo[39m: Loading a default data.json file.
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: fromDirectory
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: fromDirectory
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFileContents
15:47:05 - [34mdebug[39m: loadFilesContents
15:47:09 - [34mdebug[39m: fromDirectory
15:47:09 - [34mdebug[39m: loadFileContents
15:47:09 - [34mdebug[39m: buildGrammar
15:47:09 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:47:09 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:47:09 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:47:09 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:47:09 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:47:09 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:47:09 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:47:09 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:47:09 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:47:09 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:47:09 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:47:09 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:47:09 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:47:09 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:47:09 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2ace68d1-2a33-40e6-81dc-16ab9db51145",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:47:09 - [34mdebug[39m: fromDirectory
15:47:09 - [34mdebug[39m: fromDirectory
15:47:09 - [34mdebug[39m: loadFilesContents
15:47:09 - [34mdebug[39m: loadFilesContents
15:47:09 - [34mdebug[39m: loadFilesContents
15:47:09 - [34mdebug[39m: loadFilesContents
15:47:09 - [34mdebug[39m: loadFilesContents
15:47:09 - [34mdebug[39m: loadFileContents
15:47:09 - [34mdebug[39m: loadFilesContents
15:47:10 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:47:10 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
15:47:10 - [34mdebug[39m: Calling eval with context [object Object]
15:47:10 - [32minfo[39m: Creating file: .\text\sample.md
15:47:10 - [32minfo[39m: #Mietvertrag
**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen."}}
Der mieter kann trotzdem zahlen
15:50:06 - [32minfo[39m: Using current directory as template folder
15:50:06 - [32minfo[39m: Loading a default data.json file.
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: fromDirectory
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: fromDirectory
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFileContents
15:50:06 - [34mdebug[39m: loadFilesContents
15:50:09 - [34mdebug[39m: fromDirectory
15:50:09 - [34mdebug[39m: loadFileContents
15:50:09 - [34mdebug[39m: buildGrammar
15:50:09 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:50:09 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:50:09 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:50:09 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:50:09 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:50:09 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:50:09 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:50:09 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:50:09 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:50:09 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:50:09 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:50:09 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:50:09 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:50:09 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:50:09 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "69538e52-9556-464b-a87b-44e75b0602b1",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:50:09 - [34mdebug[39m: fromDirectory
15:50:09 - [34mdebug[39m: fromDirectory
15:50:09 - [34mdebug[39m: loadFilesContents
15:50:09 - [34mdebug[39m: loadFilesContents
15:50:09 - [34mdebug[39m: loadFilesContents
15:50:09 - [34mdebug[39m: loadFilesContents
15:50:09 - [34mdebug[39m: loadFilesContents
15:50:09 - [34mdebug[39m: loadFileContents
15:50:09 - [34mdebug[39m: loadFilesContents
15:50:11 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:50:11 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
15:50:11 - [34mdebug[39m: Calling eval with context [object Object]
15:50:11 - [32minfo[39m: #Mietvertrag
**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen."}}
Der mieter kann trotzdem zahlen
15:50:15 - [32minfo[39m: Using current directory as template folder
15:50:15 - [32minfo[39m: Loading a default text/sample.md file.
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: fromDirectory
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: fromDirectory
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFileContents
15:50:15 - [34mdebug[39m: loadFilesContents
15:50:17 - [34mdebug[39m: fromDirectory
15:50:17 - [34mdebug[39m: loadFileContents
15:50:17 - [34mdebug[39m: buildGrammar
15:50:17 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* ","text":"#Mietvertrag\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":1,"line":1,"col":1}
15:50:17 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":48,"lineBreaks":0,"line":2,"col":36}}
15:50:17 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":57,"lineBreaks":0,"line":2,"col":45}
15:50:17 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":63,"lineBreaks":0,"line":2,"col":51}}
15:50:17 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":71,"lineBreaks":0,"line":2,"col":59}
15:50:17 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":96,"lineBreaks":0,"line":2,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":112,"lineBreaks":0,"line":2,"col":100}}
15:50:17 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":126,"lineBreaks":0,"line":2,"col":114}
15:50:17 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":133,"lineBreaks":0,"line":2,"col":121}}
15:50:17 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":148,"lineBreaks":0,"line":2,"col":136}
15:50:17 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":190,"lineBreaks":0,"line":2,"col":178}}
15:50:17 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":197,"lineBreaks":1,"line":2,"col":185}
15:50:17 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:50:17 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":351,"lineBreaks":1,"line":7,"col":4}
15:50:17 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":369,"lineBreaks":0,"line":8,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":410,"lineBreaks":0,"line":8,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":358,"lineBreaks":0,"line":8,"col":7}}
15:50:17 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "a9f2e28f-1366-4cec-baeb-81eec2fd3fab",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "#Mietvertrag\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:50:17 - [34mdebug[39m: fromDirectory
15:50:17 - [34mdebug[39m: fromDirectory
15:50:17 - [34mdebug[39m: loadFilesContents
15:50:17 - [34mdebug[39m: loadFilesContents
15:50:17 - [34mdebug[39m: loadFilesContents
15:50:17 - [34mdebug[39m: loadFilesContents
15:50:17 - [34mdebug[39m: loadFilesContents
15:50:17 - [34mdebug[39m: loadFileContents
15:50:17 - [34mdebug[39m: loadFilesContents
15:50:19 - [31merror[39m: invalid syntax at line 1 col 1:

  Mietvertrag
  ^
Unexpected "M"

15:50:57 - [32minfo[39m: Using current directory as template folder
15:50:57 - [32minfo[39m: Loading a default data.json file.
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: fromDirectory
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: fromDirectory
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFilesContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:57 - [34mdebug[39m: loadFileContents
15:50:59 - [34mdebug[39m: fromDirectory
15:51:00 - [34mdebug[39m: loadFileContents
15:51:00 - [34mdebug[39m: buildGrammar
15:51:00 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
15:51:00 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
15:51:00 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
15:51:00 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
15:51:00 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
15:51:00 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
15:51:00 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
15:51:00 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
15:51:00 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
15:51:00 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
15:51:00 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
15:51:00 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:51:00 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":373,"lineBreaks":1,"line":14,"col":4}
15:51:00 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":391,"lineBreaks":0,"line":15,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":432,"lineBreaks":0,"line":15,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":380,"lineBreaks":0,"line":15,"col":7}}
15:51:00 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "dec18fd4-423a-4cc0-b056-b9b80442c743",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:51:00 - [34mdebug[39m: fromDirectory
15:51:00 - [34mdebug[39m: fromDirectory
15:51:00 - [34mdebug[39m: loadFilesContents
15:51:00 - [34mdebug[39m: loadFilesContents
15:51:00 - [34mdebug[39m: loadFilesContents
15:51:00 - [34mdebug[39m: loadFilesContents
15:51:00 - [34mdebug[39m: loadFilesContents
15:51:00 - [34mdebug[39m: loadFilesContents
15:51:00 - [34mdebug[39m: loadFileContents
15:51:01 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:51:01 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
15:51:01 - [34mdebug[39m: Calling eval with context [object Object]
15:51:01 - [32minfo[39m: Mietvertrag
====

Ü2
----

### Ü3

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen."}}
Der mieter kann trotzdem zahlen
15:51:17 - [32minfo[39m: Using current directory as template folder
15:51:17 - [32minfo[39m: Loading a default data.json file.
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: fromDirectory
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: fromDirectory
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFileContents
15:51:17 - [34mdebug[39m: loadFilesContents
15:51:23 - [34mdebug[39m: fromDirectory
15:51:23 - [34mdebug[39m: loadFileContents
15:51:23 - [34mdebug[39m: buildGrammar
15:51:23 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
15:51:23 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
15:51:23 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
15:51:23 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
15:51:23 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
15:51:23 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
15:51:23 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
15:51:23 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
15:51:23 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
15:51:23 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
15:51:23 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
15:51:23 - [34mdebug[39m: element rule11 {"type":"Expr"}
15:51:23 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":373,"lineBreaks":1,"line":14,"col":4}
15:51:23 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der mieter kann trotzdem zahlen ","text":" Der mieter kann trotzdem zahlen {{","offset":391,"lineBreaks":0,"line":15,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer!","text":" selbst die Sparbüchse ist leer!{{","offset":432,"lineBreaks":0,"line":15,"col":59},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":380,"lineBreaks":0,"line":15,"col":7}}
15:51:23 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "2f5a0ff0-9b97-4aef-93aa-8410a663c450",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der mieter kann trotzdem zahlen "|" selbst die Sparbüchse ist leer!") {% (d) => {return d[0][0] === " Der mieter kann trotzdem zahlen ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



15:51:23 - [34mdebug[39m: fromDirectory
15:51:23 - [34mdebug[39m: fromDirectory
15:51:23 - [34mdebug[39m: loadFilesContents
15:51:23 - [34mdebug[39m: loadFilesContents
15:51:23 - [34mdebug[39m: loadFilesContents
15:51:23 - [34mdebug[39m: loadFilesContents
15:51:23 - [34mdebug[39m: loadFilesContents
15:51:23 - [34mdebug[39m: loadFileContents
15:51:23 - [34mdebug[39m: loadFilesContents
15:51:25 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
15:51:25 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
15:51:25 - [34mdebug[39m: Calling eval with context [object Object]
15:51:25 - [32minfo[39m: Creating file: .\text\sample.md
15:51:25 - [32minfo[39m: Mietvertrag
====

Ü2
----

### Ü3

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"Der mieter hat nicht genug Geld auf seinem Konto um die miete zu Zahlen."}}
Der mieter kann trotzdem zahlen
16:00:48 - [32minfo[39m: Using current directory as template folder
16:00:48 - [32minfo[39m: Loading a default data.json file.
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: fromDirectory
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: fromDirectory
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:48 - [34mdebug[39m: loadFilesContents
16:00:48 - [34mdebug[39m: loadFileContents
16:00:50 - [34mdebug[39m: fromDirectory
16:00:50 - [34mdebug[39m: loadFileContents
16:00:50 - [34mdebug[39m: buildGrammar
16:00:50 - [31merror[39m: invalid syntax at line 16 col 3:

  {{%
    ^
Unexpected markupexpr token: "%"

16:01:45 - [32minfo[39m: Using current directory as template folder
16:01:45 - [32minfo[39m: Loading a default data.json file.
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: fromDirectory
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: fromDirectory
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFileContents
16:01:45 - [34mdebug[39m: loadFilesContents
16:01:49 - [34mdebug[39m: fromDirectory
16:01:49 - [34mdebug[39m: loadFileContents
16:01:49 - [34mdebug[39m: buildGrammar
16:01:49 - [31merror[39m: invalid syntax at line 11 col 3:

  {{%
    ^
Unexpected markupexpr token: "%"

16:03:56 - [32minfo[39m: Using current directory as template folder
16:03:56 - [32minfo[39m: Loading a default data.json file.
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: fromDirectory
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: fromDirectory
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFileContents
16:03:56 - [34mdebug[39m: loadFilesContents
16:03:57 - [34mdebug[39m: fromDirectory
16:03:57 - [34mdebug[39m: loadFileContents
16:03:57 - [34mdebug[39m: buildGrammar
16:03:57 - [31merror[39m: invalid syntax at line 11 col 3:

  {{%
    ^
Unexpected markupexpr token: "%"

16:04:06 - [32minfo[39m: Using current directory as template folder
16:04:06 - [32minfo[39m: Loading a default data.json file.
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: fromDirectory
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: fromDirectory
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFileContents
16:04:06 - [34mdebug[39m: loadFilesContents
16:04:09 - [34mdebug[39m: fromDirectory
16:04:09 - [34mdebug[39m: loadFileContents
16:04:09 - [34mdebug[39m: buildGrammar
16:04:09 - [31merror[39m: invalid syntax at line 11 col 3:

  {{%
    ^
Unexpected markupexpr token: "%"

16:04:23 - [32minfo[39m: Using current directory as template folder
16:04:23 - [32minfo[39m: Loading a default data.json file.
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: fromDirectory
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: fromDirectory
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFileContents
16:04:23 - [34mdebug[39m: loadFilesContents
16:04:24 - [34mdebug[39m: fromDirectory
16:04:24 - [34mdebug[39m: loadFileContents
16:04:24 - [34mdebug[39m: buildGrammar
16:04:24 - [31merror[39m: invalid syntax at line 11 col 3:

  {{%
    ^
Unexpected markupexpr token: "%"

16:04:36 - [32minfo[39m: Using current directory as template folder
16:04:36 - [32minfo[39m: Loading a default data.json file.
16:04:36 - [34mdebug[39m: loadFileContents
16:04:36 - [34mdebug[39m: loadFileContents
16:04:36 - [34mdebug[39m: loadFileContents
16:04:36 - [34mdebug[39m: fromDirectory
16:04:36 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: fromDirectory
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFileContents
16:04:37 - [34mdebug[39m: loadFilesContents
16:04:38 - [34mdebug[39m: fromDirectory
16:04:38 - [34mdebug[39m: loadFileContents
16:04:38 - [34mdebug[39m: buildGrammar
16:04:38 - [31merror[39m: invalid syntax at line 11 col 3:

  {{
    ^
16:05:20 - [32minfo[39m: Using current directory as template folder
16:05:20 - [32minfo[39m: Loading a default data.json file.
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: fromDirectory
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: fromDirectory
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFileContents
16:05:20 - [34mdebug[39m: loadFilesContents
16:05:22 - [34mdebug[39m: fromDirectory
16:05:22 - [34mdebug[39m: loadFileContents
16:05:22 - [34mdebug[39m: buildGrammar
16:05:22 - [31merror[39m: invalid syntax at line 11 col 3:

  {{%
    ^
Unexpected markupexpr token: "%"

16:11:08 - [32minfo[39m: Using current directory as template folder
16:11:08 - [32minfo[39m: Loading a default data.json file.
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: fromDirectory
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: fromDirectory
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFileContents
16:11:08 - [34mdebug[39m: loadFilesContents
16:11:10 - [34mdebug[39m: fromDirectory
16:11:10 - [34mdebug[39m: loadFileContents
16:11:10 - [34mdebug[39m: buildGrammar
16:11:10 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
16:11:10 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
16:11:10 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
16:11:10 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
16:11:10 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
16:11:10 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
16:11:10 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
16:11:10 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
16:11:10 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
16:11:10 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
16:11:10 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
16:11:10 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:11:10 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "9d4bff6c-f86a-4422-9370-5b3fc6c83bab",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:11:10 - [34mdebug[39m: fromDirectory
16:11:10 - [34mdebug[39m: fromDirectory
16:11:10 - [34mdebug[39m: loadFilesContents
16:11:10 - [34mdebug[39m: loadFilesContents
16:11:10 - [34mdebug[39m: loadFilesContents
16:11:10 - [34mdebug[39m: loadFilesContents
16:11:10 - [34mdebug[39m: loadFilesContents
16:11:10 - [34mdebug[39m: loadFileContents
16:11:10 - [34mdebug[39m: loadFilesContents
16:11:10 - [31merror[39m: Parse error (at file text/grammar.tem.md line 11 col 7). 
       if erspartes 
       ^^           
16:12:10 - [32minfo[39m: Using current directory as template folder
16:12:10 - [32minfo[39m: Loading a default data.json file.
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: fromDirectory
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: fromDirectory
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFileContents
16:12:10 - [34mdebug[39m: loadFilesContents
16:12:12 - [34mdebug[39m: fromDirectory
16:12:12 - [34mdebug[39m: loadFileContents
16:12:12 - [34mdebug[39m: buildGrammar
16:12:12 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
16:12:12 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
16:12:12 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
16:12:12 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
16:12:12 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
16:12:12 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
16:12:12 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
16:12:12 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
16:12:12 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
16:12:12 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
16:12:12 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
16:12:12 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:12:12 - [34mdebug[39m: element rule12 {"type":"LastChunk","value":"\n\n```\nelse \"Mieter zahlt fristgerecht\"\n```\n\n\n\n%}}","text":"\n\n```\nelse \"Mieter zahlt fristgerecht\"\n```\n\n\n\n%}}","offset":386,"lineBreaks":8,"line":17,"col":4}
16:12:12 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "4541309e-62cb-4010-9299-e288dcc7ecb6",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n\n```\nelse \"Mieter zahlt fristgerecht\"\n```\n\n\n\n%}}" 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:12:12 - [34mdebug[39m: fromDirectory
16:12:12 - [34mdebug[39m: fromDirectory
16:12:12 - [34mdebug[39m: loadFilesContents
16:12:12 - [34mdebug[39m: loadFilesContents
16:12:12 - [34mdebug[39m: loadFilesContents
16:12:12 - [34mdebug[39m: loadFilesContents
16:12:12 - [34mdebug[39m: loadFilesContents
16:12:12 - [34mdebug[39m: loadFileContents
16:12:12 - [34mdebug[39m: loadFilesContents
16:12:13 - [31merror[39m: Parse error (at file text/grammar.tem.md line 11 col 8). 
        {{%
        ^  
16:17:04 - [32minfo[39m: Using current directory as template folder
16:17:04 - [32minfo[39m: Loading a default data.json file.
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: fromDirectory
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: fromDirectory
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFileContents
16:17:04 - [34mdebug[39m: loadFilesContents
16:17:06 - [34mdebug[39m: fromDirectory
16:17:06 - [34mdebug[39m: loadFileContents
16:17:06 - [34mdebug[39m: buildGrammar
16:17:06 - [31merror[39m: invalid syntax at line 15 col 6:

  {{if erspartes
       ^
Unexpected varid token: "erspartes"

16:17:30 - [32minfo[39m: Using current directory as template folder
16:17:30 - [32minfo[39m: Loading a default data.json file.
16:17:30 - [34mdebug[39m: loadFileContents
16:17:30 - [34mdebug[39m: loadFileContents
16:17:30 - [34mdebug[39m: loadFileContents
16:17:30 - [34mdebug[39m: fromDirectory
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:30 - [34mdebug[39m: loadFileContents
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:30 - [34mdebug[39m: fromDirectory
16:17:30 - [34mdebug[39m: loadFilesContents
16:17:31 - [34mdebug[39m: loadFilesContents
16:17:31 - [34mdebug[39m: loadFilesContents
16:17:31 - [34mdebug[39m: loadFilesContents
16:17:31 - [34mdebug[39m: loadFilesContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:31 - [34mdebug[39m: loadFilesContents
16:17:31 - [34mdebug[39m: loadFileContents
16:17:32 - [34mdebug[39m: fromDirectory
16:17:32 - [34mdebug[39m: loadFileContents
16:17:32 - [34mdebug[39m: buildGrammar
16:17:32 - [31merror[39m: invalid syntax at line 15 col 6:

  {{if erspartes
       ^
Unexpected varid token: "erspartes"

16:17:50 - [32minfo[39m: Using current directory as template folder
16:17:50 - [32minfo[39m: Loading a default data.json file.
16:17:50 - [34mdebug[39m: loadFileContents
16:17:50 - [34mdebug[39m: loadFileContents
16:17:50 - [34mdebug[39m: loadFileContents
16:17:50 - [34mdebug[39m: fromDirectory
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:50 - [34mdebug[39m: loadFileContents
16:17:50 - [34mdebug[39m: fromDirectory
16:17:50 - [34mdebug[39m: loadFilesContents
16:17:51 - [34mdebug[39m: loadFilesContents
16:17:51 - [34mdebug[39m: loadFilesContents
16:17:51 - [34mdebug[39m: loadFilesContents
16:17:51 - [34mdebug[39m: loadFilesContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFileContents
16:17:51 - [34mdebug[39m: loadFilesContents
16:17:58 - [34mdebug[39m: fromDirectory
16:17:58 - [34mdebug[39m: loadFileContents
16:17:58 - [34mdebug[39m: buildGrammar
16:17:58 - [31merror[39m: invalid syntax at line 15 col 6:

  {{if erspartes
       ^
Unexpected varid token: "erspartes"

16:18:17 - [32minfo[39m: Using current directory as template folder
16:18:17 - [32minfo[39m: Loading a default data.json file.
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: fromDirectory
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: fromDirectory
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFileContents
16:18:17 - [34mdebug[39m: loadFilesContents
16:18:19 - [34mdebug[39m: fromDirectory
16:18:19 - [34mdebug[39m: loadFileContents
16:18:19 - [34mdebug[39m: buildGrammar
16:18:19 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
16:18:19 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
16:18:19 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
16:18:19 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
16:18:19 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
16:18:19 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
16:18:19 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
16:18:19 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
16:18:19 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
16:18:19 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
16:18:19 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
16:18:19 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:18:19 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":314,"lineBreaks":1,"line":14,"col":4}
16:18:19 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":332,"lineBreaks":0,"line":15,"col":18},"stringElse":{"type":"Chunk","value":" doch nicht ","text":" doch nicht {{","offset":375,"lineBreaks":0,"line":15,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":321,"lineBreaks":0,"line":15,"col":7}}
16:18:19 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "b9128a05-9154-4bfd-9b95-020396b67839",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" doch nicht ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:18:19 - [34mdebug[39m: fromDirectory
16:18:19 - [34mdebug[39m: fromDirectory
16:18:19 - [34mdebug[39m: loadFilesContents
16:18:19 - [34mdebug[39m: loadFilesContents
16:18:19 - [34mdebug[39m: loadFilesContents
16:18:19 - [34mdebug[39m: loadFilesContents
16:18:19 - [34mdebug[39m: loadFilesContents
16:18:19 - [34mdebug[39m: loadFileContents
16:18:19 - [34mdebug[39m: loadFilesContents
16:18:21 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
16:18:21 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
16:18:21 - [34mdebug[39m: Calling eval with context [object Object]
16:18:21 - [32minfo[39m: Mietvertrag
====

Ü2
----

### Ü3

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.
16:18:56 - [32minfo[39m: Using current directory as template folder
16:18:56 - [32minfo[39m: Loading a default data.json file.
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: fromDirectory
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: fromDirectory
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFileContents
16:18:56 - [34mdebug[39m: loadFilesContents
16:18:58 - [34mdebug[39m: fromDirectory
16:18:58 - [34mdebug[39m: loadFileContents
16:18:58 - [34mdebug[39m: buildGrammar
16:18:58 - [31merror[39m: invalid syntax at line 15 col 55:

  {{#if erspartes}} Der Mieter kann doch noch zahlen. {{#
                                                        ^
Unexpected markupstartblock token: "#"

16:19:41 - [32minfo[39m: Using current directory as template folder
16:19:41 - [32minfo[39m: Loading a default data.json file.
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: fromDirectory
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: fromDirectory
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFileContents
16:19:41 - [34mdebug[39m: loadFilesContents
16:19:43 - [34mdebug[39m: fromDirectory
16:19:43 - [34mdebug[39m: loadFileContents
16:19:43 - [34mdebug[39m: buildGrammar
16:19:43 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
16:19:43 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
16:19:43 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
16:19:43 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
16:19:43 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
16:19:43 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
16:19:43 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
16:19:43 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
16:19:43 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
16:19:43 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
16:19:43 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
16:19:43 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:19:43 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":314,"lineBreaks":1,"line":14,"col":4}
16:19:43 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":332,"lineBreaks":0,"line":15,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":375,"lineBreaks":0,"line":15,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":321,"lineBreaks":0,"line":15,"col":7}}
16:19:43 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "89cf82bb-0eba-4e6e-9186-3af9ba9a995e",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:19:43 - [34mdebug[39m: fromDirectory
16:19:43 - [34mdebug[39m: fromDirectory
16:19:43 - [34mdebug[39m: loadFilesContents
16:19:43 - [34mdebug[39m: loadFilesContents
16:19:43 - [34mdebug[39m: loadFilesContents
16:19:43 - [34mdebug[39m: loadFilesContents
16:19:43 - [34mdebug[39m: loadFilesContents
16:19:43 - [34mdebug[39m: loadFileContents
16:19:43 - [34mdebug[39m: loadFilesContents
16:19:45 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
16:19:45 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
16:19:45 - [34mdebug[39m: Calling eval with context [object Object]
16:19:45 - [32minfo[39m: Mietvertrag
====

Ü2
----

### Ü3

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.
16:19:55 - [32minfo[39m: Using current directory as template folder
16:19:55 - [32minfo[39m: Loading a default data.json file.
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: fromDirectory
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: fromDirectory
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFileContents
16:19:55 - [34mdebug[39m: loadFilesContents
16:19:57 - [34mdebug[39m: fromDirectory
16:19:57 - [34mdebug[39m: loadFileContents
16:19:57 - [34mdebug[39m: buildGrammar
16:19:57 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":8,"line":1,"col":1}
16:19:57 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":70,"lineBreaks":0,"line":9,"col":36}}
16:19:57 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":79,"lineBreaks":0,"line":9,"col":45}
16:19:57 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":85,"lineBreaks":0,"line":9,"col":51}}
16:19:57 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":93,"lineBreaks":0,"line":9,"col":59}
16:19:57 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":118,"lineBreaks":0,"line":9,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":134,"lineBreaks":0,"line":9,"col":100}}
16:19:57 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":148,"lineBreaks":0,"line":9,"col":114}
16:19:57 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":155,"lineBreaks":0,"line":9,"col":121}}
16:19:57 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":170,"lineBreaks":0,"line":9,"col":136}
16:19:57 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":212,"lineBreaks":0,"line":9,"col":178}}
16:19:57 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":219,"lineBreaks":1,"line":9,"col":185}
16:19:57 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:19:57 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":314,"lineBreaks":1,"line":14,"col":4}
16:19:57 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":332,"lineBreaks":0,"line":15,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":375,"lineBreaks":0,"line":15,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":321,"lineBreaks":0,"line":15,"col":7}}
16:19:57 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "bbc8db6a-b355-47e6-948a-6a996f974536",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\nÜ2\n----\n\n### Ü3\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        contractId : data[14],
        parties : data[16]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:19:57 - [34mdebug[39m: fromDirectory
16:19:57 - [34mdebug[39m: fromDirectory
16:19:57 - [34mdebug[39m: loadFilesContents
16:19:57 - [34mdebug[39m: loadFilesContents
16:19:57 - [34mdebug[39m: loadFilesContents
16:19:57 - [34mdebug[39m: loadFilesContents
16:19:57 - [34mdebug[39m: loadFilesContents
16:19:57 - [34mdebug[39m: loadFileContents
16:19:57 - [34mdebug[39m: loadFilesContents
16:19:58 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true}
16:19:58 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
16:19:58 - [34mdebug[39m: Calling eval with context [object Object]
16:19:58 - [32minfo[39m: Creating file: .\text\sample.md
16:19:58 - [32minfo[39m: Mietvertrag
====

Ü2
----

### Ü3

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.
16:30:39 - [32minfo[39m: Using current directory as template folder
16:30:39 - [32minfo[39m: Loading a default data.json file.
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: fromDirectory
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: fromDirectory
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFileContents
16:30:39 - [34mdebug[39m: loadFilesContents
16:30:41 - [34mdebug[39m: fromDirectory
16:30:41 - [34mdebug[39m: loadFileContents
16:30:41 - [34mdebug[39m: buildGrammar
16:30:41 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:30:41 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:30:41 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:30:41 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:30:41 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:30:41 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:30:41 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:30:41 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:30:41 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:30:41 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:30:41 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:30:41 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:30:41 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:30:41 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:30:41 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:30:41 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":432,"lineBreaks":1,"line":15,"col":20},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":439,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":447,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":459,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die miete (","text":" die miete ({{","offset":470,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":484,"lineBreaks":0,"line":16,"col":52}},{"type":"Chunk","value":") ","text":") {{","offset":491,"lineBreaks":0,"line":16,"col":59},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":495,"lineBreaks":0,"line":16,"col":63}},{"type":"Chunk","value":"\n","text":"\n{{","offset":506,"lineBreaks":1,"line":16,"col":74}]},"fieldName":{"type":"startblockid","value":"payment","text":"payment","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:30:41 - [34mdebug[39m: element rule16 {"type":"LastChunk","value":"}}","text":"}}","offset":518,"lineBreaks":0,"line":17,"col":12}
16:30:41 - [31merror[39m: Template references a property 'payment' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 15 column 11
16:32:14 - [32minfo[39m: Using current directory as template folder
16:32:14 - [32minfo[39m: Loading a default data.json file.
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: fromDirectory
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: fromDirectory
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFileContents
16:32:14 - [34mdebug[39m: loadFilesContents
16:32:16 - [34mdebug[39m: fromDirectory
16:32:16 - [34mdebug[39m: loadFileContents
16:32:16 - [34mdebug[39m: buildGrammar
16:32:16 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:32:16 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:32:16 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:32:16 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:32:16 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:32:16 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:32:16 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:32:16 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:32:16 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:32:16 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:32:16 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:32:16 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:32:16 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:32:16 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:32:16 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:32:16 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":432,"lineBreaks":1,"line":15,"col":20},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":439,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":447,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":459,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die miete (","text":" die miete ({{","offset":470,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":484,"lineBreaks":0,"line":16,"col":52}},{"type":"Chunk","value":") ","text":") {{","offset":491,"lineBreaks":0,"line":16,"col":59},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":495,"lineBreaks":0,"line":16,"col":63}},{"type":"Chunk","value":"\n","text":"\n{{","offset":506,"lineBreaks":1,"line":16,"col":74}]},"fieldName":{"type":"startblockid","value":"payment","text":"payment","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:32:16 - [34mdebug[39m: element rule16 {"type":"LastChunk","value":"}}","text":"}}","offset":518,"lineBreaks":0,"line":17,"col":12}
16:32:16 - [31merror[39m: Template references a property 'payment' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 15 column 11
16:32:53 - [32minfo[39m: Using current directory as template folder
16:32:53 - [32minfo[39m: Loading a default data.json file.
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: fromDirectory
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: fromDirectory
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFileContents
16:32:53 - [34mdebug[39m: loadFilesContents
16:32:54 - [34mdebug[39m: fromDirectory
16:32:54 - [34mdebug[39m: loadFileContents
16:32:54 - [34mdebug[39m: buildGrammar
16:32:54 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:32:54 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:32:54 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:32:54 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:32:54 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:32:54 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:32:54 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:32:54 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:32:54 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:32:54 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:32:54 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:32:54 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:32:54 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:32:54 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:32:54 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:32:54 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":432,"lineBreaks":1,"line":15,"col":20},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":439,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":447,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":459,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die miete (","text":" die miete ({{","offset":470,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":484,"lineBreaks":0,"line":16,"col":52}},{"type":"Chunk","value":") ","text":") {{","offset":491,"lineBreaks":0,"line":16,"col":59},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":495,"lineBreaks":0,"line":16,"col":63}},{"type":"Chunk","value":"\n","text":"\n{{","offset":506,"lineBreaks":1,"line":16,"col":74}]},"fieldName":{"type":"startblockid","value":"payment","text":"payment","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:32:54 - [31merror[39m: Template references a property 'payment' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 15 column 11
16:36:54 - [32minfo[39m: Using current directory as template folder
16:36:54 - [32minfo[39m: Loading a default text/sample.md file.
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: fromDirectory
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: fromDirectory
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFileContents
16:36:54 - [34mdebug[39m: loadFilesContents
16:36:56 - [34mdebug[39m: fromDirectory
16:36:56 - [34mdebug[39m: loadFileContents
16:36:56 - [34mdebug[39m: buildGrammar
16:36:56 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:36:56 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:36:56 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:36:56 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:36:56 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:36:56 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:36:56 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:36:56 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:36:56 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:36:56 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:36:56 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:36:56 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:36:56 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:36:56 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:36:56 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:36:56 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":432,"lineBreaks":1,"line":15,"col":20},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":439,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":447,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":459,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die miete (","text":" die miete ({{","offset":470,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":484,"lineBreaks":0,"line":16,"col":52}},{"type":"Chunk","value":") ","text":") {{","offset":491,"lineBreaks":0,"line":16,"col":59},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":495,"lineBreaks":0,"line":16,"col":63}},{"type":"Chunk","value":"\n","text":"\n{{","offset":506,"lineBreaks":1,"line":16,"col":74}]},"fieldName":{"type":"startblockid","value":"payment","text":"payment","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:36:56 - [31merror[39m: Template references a property 'payment' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 15 column 11
16:38:49 - [32minfo[39m: Using current directory as template folder
16:38:49 - [32minfo[39m: Loading a default text/sample.md file.
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: fromDirectory
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: fromDirectory
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFileContents
16:38:49 - [34mdebug[39m: loadFilesContents
16:38:51 - [34mdebug[39m: fromDirectory
16:38:51 - [34mdebug[39m: loadFileContents
16:38:51 - [34mdebug[39m: buildGrammar
16:38:51 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:38:51 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:38:51 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:38:51 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:38:51 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:38:51 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:38:51 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:38:51 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:38:51 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:38:51 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:38:51 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:38:51 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:38:51 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:38:51 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:38:51 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:38:51 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":432,"lineBreaks":1,"line":15,"col":20},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":439,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":447,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":459,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die miete (","text":" die miete ({{","offset":470,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":484,"lineBreaks":0,"line":16,"col":52}},{"type":"Chunk","value":") ","text":") {{","offset":491,"lineBreaks":0,"line":16,"col":59},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":495,"lineBreaks":0,"line":16,"col":63}},{"type":"Chunk","value":"\n","text":"\n{{","offset":506,"lineBreaks":1,"line":16,"col":74}]},"fieldName":{"type":"startblockid","value":"payment","text":"payment","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:38:51 - [31merror[39m: Template references a property 'payment' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 15 column 11
16:45:18 - [32minfo[39m: Using current directory as template folder
16:45:18 - [32minfo[39m: Loading a default text/sample.md file.
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: fromDirectory
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: fromDirectory
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFileContents
16:45:18 - [34mdebug[39m: loadFilesContents
16:45:19 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "a" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 44 column 1
16:46:54 - [32minfo[39m: Using current directory as template folder
16:46:54 - [32minfo[39m: Loading a default text/sample.md file.
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: fromDirectory
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: fromDirectory
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFilesContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [34mdebug[39m: loadFileContents
16:46:54 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "a" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 44 column 1
16:49:10 - [32minfo[39m: Using current directory as template folder
16:49:10 - [32minfo[39m: Loading a default text/sample.md file.
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: fromDirectory
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: fromDirectory
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFilesContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [34mdebug[39m: loadFileContents
16:49:10 - [31merror[39m: Expected "-->", "@", "default", "o", "optional", "}", comment, end of line, or whitespace but "a" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 44 column 1
16:49:45 - [32minfo[39m: Using current directory as template folder
16:49:45 - [32minfo[39m: Loading a default text/sample.md file.
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: fromDirectory
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: fromDirectory
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFilesContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:45 - [34mdebug[39m: loadFileContents
16:49:47 - [34mdebug[39m: fromDirectory
16:49:47 - [34mdebug[39m: loadFileContents
16:49:47 - [34mdebug[39m: buildGrammar
16:49:47 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:49:47 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:49:47 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:49:47 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:49:47 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:49:47 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:49:47 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:49:47 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:49:47 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:49:47 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:49:47 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:49:47 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:49:47 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:49:47 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:49:47 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:49:47 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":432,"lineBreaks":1,"line":15,"col":20},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":439,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":447,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":459,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die ","text":" die {{","offset":470,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":477,"lineBreaks":0,"line":16,"col":45}},{"type":"Chunk","value":" (","text":" ({{","offset":489,"lineBreaks":0,"line":16,"col":57},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":493,"lineBreaks":0,"line":16,"col":61}},{"type":"Chunk","value":") ","text":") {{","offset":501,"lineBreaks":0,"line":16,"col":69},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":505,"lineBreaks":0,"line":16,"col":73}},{"type":"Chunk","value":"\n","text":"\n{{","offset":516,"lineBreaks":1,"line":16,"col":84}]},"fieldName":{"type":"startblockid","value":"payment","text":"payment","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:49:47 - [31merror[39m: Template references a property 'payment' that is not declared in the template model 'org.example.mietvertrag01.MyContract' File text/grammar.tem.md line 15 column 11
16:51:11 - [32minfo[39m: Using current directory as template folder
16:51:11 - [32minfo[39m: Loading a default text/sample.md file.
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: fromDirectory
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: fromDirectory
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFilesContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:11 - [34mdebug[39m: loadFileContents
16:51:17 - [34mdebug[39m: fromDirectory
16:51:17 - [34mdebug[39m: loadFileContents
16:51:17 - [34mdebug[39m: buildGrammar
16:51:17 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:51:17 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:51:17 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:51:17 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:51:17 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:51:17 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:51:17 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:51:17 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:51:17 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:51:17 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:51:17 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:51:17 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:51:17 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:51:17 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:51:17 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:51:17 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":445,"lineBreaks":0,"line":16,"col":7}},{"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":453,"lineBreaks":0,"line":16,"col":15},{"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":465,"lineBreaks":0,"line":16,"col":27}},{"type":"Chunk","value":" die ","text":" die {{","offset":476,"lineBreaks":0,"line":16,"col":38},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":483,"lineBreaks":0,"line":16,"col":45}},{"type":"Chunk","value":" (","text":" ({{","offset":495,"lineBreaks":0,"line":16,"col":57},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":499,"lineBreaks":0,"line":16,"col":61}},{"type":"Chunk","value":") ","text":") {{","offset":507,"lineBreaks":0,"line":16,"col":69},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":511,"lineBreaks":0,"line":16,"col":73}},{"type":"Chunk","value":"\n","text":"\n{{","offset":522,"lineBreaks":1,"line":16,"col":84}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:51:17 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer ","text":"\nDer {{","offset":438,"lineBreaks":1,"line":15,"col":26}
16:51:17 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":445,"lineBreaks":0,"line":16,"col":7}}
16:51:17 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" muss dem ","text":" muss dem {{","offset":453,"lineBreaks":0,"line":16,"col":15}
16:51:17 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"vermieter","text":"vermieter","offset":465,"lineBreaks":0,"line":16,"col":27}}
16:51:17 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":" die ","text":" die {{","offset":476,"lineBreaks":0,"line":16,"col":38}
16:51:17 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":483,"lineBreaks":0,"line":16,"col":45}}
16:51:17 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":" (","text":" ({{","offset":495,"lineBreaks":0,"line":16,"col":57}
16:51:17 - [34mdebug[39m: element paymentClause7 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":499,"lineBreaks":0,"line":16,"col":61}}
16:51:17 - [34mdebug[39m: element paymentClause8 {"type":"Chunk","value":") ","text":") {{","offset":507,"lineBreaks":0,"line":16,"col":69}
16:51:17 - [34mdebug[39m: element paymentClause9 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":511,"lineBreaks":0,"line":16,"col":73}}
16:51:17 - [34mdebug[39m: element paymentClause10 {"type":"Chunk","value":"\n","text":"\n{{","offset":522,"lineBreaks":1,"line":16,"col":84}
16:51:17 - [31merror[39m: Template references a property 'mieter' that is not declared in the template model 'org.example.mietvertrag01.PaymentClause' File text/grammar.tem.md line 16 column 7
16:51:59 - [32minfo[39m: Using current directory as template folder
16:51:59 - [32minfo[39m: Loading a default text/sample.md file.
16:51:59 - [34mdebug[39m: loadFileContents
16:51:59 - [34mdebug[39m: loadFileContents
16:51:59 - [34mdebug[39m: loadFileContents
16:51:59 - [34mdebug[39m: fromDirectory
16:51:59 - [34mdebug[39m: loadFilesContents
16:51:59 - [34mdebug[39m: loadFilesContents
16:51:59 - [34mdebug[39m: loadFilesContents
16:51:59 - [34mdebug[39m: loadFilesContents
16:51:59 - [34mdebug[39m: loadFilesContents
16:51:59 - [34mdebug[39m: loadFilesContents
16:51:59 - [34mdebug[39m: loadFileContents
16:51:59 - [34mdebug[39m: fromDirectory
16:52:00 - [34mdebug[39m: loadFilesContents
16:52:00 - [34mdebug[39m: loadFilesContents
16:52:00 - [34mdebug[39m: loadFilesContents
16:52:00 - [34mdebug[39m: loadFilesContents
16:52:00 - [34mdebug[39m: loadFilesContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFileContents
16:52:00 - [34mdebug[39m: loadFilesContents
16:52:04 - [34mdebug[39m: fromDirectory
16:52:04 - [34mdebug[39m: loadFileContents
16:52:04 - [34mdebug[39m: buildGrammar
16:52:04 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:52:04 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:52:04 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:52:04 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:52:04 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:52:04 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:52:04 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:52:04 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:52:04 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:52:04 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:52:04 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:52:04 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:52:04 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:52:04 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:52:04 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:52:04 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:52:04 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
16:52:04 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
16:52:04 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
16:52:04 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
16:52:04 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
16:52:04 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
16:52:04 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
16:52:04 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "432941bc-3aeb-47b5-85cf-e79af1cedbdd",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "59de1353-4864-49bd-af1f-c25928ad13f5",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymethod : data[14],
        paymentClause : data[16],
        contractId : data[18],
        parties : data[20]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:52:04 - [34mdebug[39m: fromDirectory
16:52:04 - [34mdebug[39m: fromDirectory
16:52:04 - [34mdebug[39m: loadFilesContents
16:52:04 - [34mdebug[39m: loadFilesContents
16:52:04 - [34mdebug[39m: loadFilesContents
16:52:04 - [34mdebug[39m: loadFilesContents
16:52:04 - [34mdebug[39m: loadFilesContents
16:52:04 - [34mdebug[39m: loadFileContents
16:52:04 - [34mdebug[39m: loadFilesContents
16:52:05 - [31merror[39m: invalid syntax at line 4 col 1:

  Ü2
  ^
Unexpected "Ü"

16:52:23 - [32minfo[39m: Using current directory as template folder
16:52:23 - [32minfo[39m: Loading a default text/sample.md file.
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: fromDirectory
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: fromDirectory
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFileContents
16:52:23 - [34mdebug[39m: loadFilesContents
16:52:26 - [34mdebug[39m: fromDirectory
16:52:26 - [34mdebug[39m: loadFileContents
16:52:26 - [34mdebug[39m: buildGrammar
16:52:26 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:52:26 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:52:26 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:52:26 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:52:26 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:52:26 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:52:26 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:52:26 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:52:26 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:52:26 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:52:26 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:52:26 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:52:26 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:52:26 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:52:26 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:52:26 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:52:26 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
16:52:26 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
16:52:26 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
16:52:26 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
16:52:26 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
16:52:26 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
16:52:26 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
16:52:26 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "73598ccc-d572-4cc0-868d-f5b7fff17b61",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "6834bd97-2139-42f8-a65b-5aa7c53a43bc",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymethod : data[14],
        paymentClause : data[16],
        contractId : data[18],
        parties : data[20]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:52:26 - [34mdebug[39m: fromDirectory
16:52:26 - [34mdebug[39m: fromDirectory
16:52:26 - [34mdebug[39m: loadFilesContents
16:52:26 - [34mdebug[39m: loadFilesContents
16:52:26 - [34mdebug[39m: loadFilesContents
16:52:26 - [34mdebug[39m: loadFilesContents
16:52:26 - [34mdebug[39m: loadFilesContents
16:52:26 - [34mdebug[39m: loadFileContents
16:52:26 - [34mdebug[39m: loadFilesContents
16:52:28 - [34mdebug[39m: Result of parsing: undefined
16:52:28 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
16:54:51 - [32minfo[39m: Using current directory as template folder
16:54:51 - [32minfo[39m: Loading a default text/sample.md file.
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: fromDirectory
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: fromDirectory
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFileContents
16:54:51 - [34mdebug[39m: loadFilesContents
16:54:53 - [34mdebug[39m: fromDirectory
16:54:53 - [34mdebug[39m: loadFileContents
16:54:53 - [34mdebug[39m: buildGrammar
16:54:53 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:54:53 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:54:53 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:54:53 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:54:53 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:54:53 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:54:53 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:54:53 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:54:53 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:54:53 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:54:53 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:54:53 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:54:53 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:54:53 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:54:53 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:54:53 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:54:53 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
16:54:53 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
16:54:53 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
16:54:53 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
16:54:53 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
16:54:53 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
16:54:53 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
16:54:53 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "7d04b277-620b-4f08-9e6f-22fe903da250",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "bcd04b19-27af-4cc6-b671-26d14b5d234f",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymethod : data[14],
        paymentClause : data[16],
        contractId : data[18],
        parties : data[20]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:54:53 - [34mdebug[39m: fromDirectory
16:54:53 - [34mdebug[39m: fromDirectory
16:54:53 - [34mdebug[39m: loadFilesContents
16:54:53 - [34mdebug[39m: loadFilesContents
16:54:53 - [34mdebug[39m: loadFilesContents
16:54:53 - [34mdebug[39m: loadFilesContents
16:54:53 - [34mdebug[39m: loadFilesContents
16:54:53 - [34mdebug[39m: loadFileContents
16:54:53 - [34mdebug[39m: loadFilesContents
16:54:55 - [34mdebug[39m: Result of parsing: undefined
16:54:55 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
16:55:19 - [32minfo[39m: Using current directory as template folder
16:55:19 - [32minfo[39m: Loading a default data.json file.
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: fromDirectory
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: fromDirectory
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFileContents
16:55:19 - [34mdebug[39m: loadFilesContents
16:55:21 - [34mdebug[39m: fromDirectory
16:55:21 - [34mdebug[39m: loadFileContents
16:55:21 - [34mdebug[39m: buildGrammar
16:55:21 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
16:55:21 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
16:55:21 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
16:55:21 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
16:55:21 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
16:55:21 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
16:55:21 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
16:55:21 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
16:55:21 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
16:55:21 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
16:55:21 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
16:55:21 - [34mdebug[39m: element rule11 {"type":"Expr"}
16:55:21 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
16:55:21 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
16:55:21 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
16:55:21 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
16:55:21 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
16:55:21 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
16:55:21 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
16:55:21 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
16:55:21 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
16:55:21 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
16:55:21 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
16:55:21 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "a7fb0bc1-fefa-4bfa-8e31-8ef51e6f745e",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "264ff204-a234-442e-9c05-cf7bbe99448e",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymethod : data[14],
        paymentClause : data[16],
        contractId : data[18],
        parties : data[20]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



16:55:21 - [34mdebug[39m: fromDirectory
16:55:21 - [34mdebug[39m: fromDirectory
16:55:21 - [34mdebug[39m: loadFilesContents
16:55:21 - [34mdebug[39m: loadFilesContents
16:55:21 - [34mdebug[39m: loadFilesContents
16:55:21 - [34mdebug[39m: loadFilesContents
16:55:21 - [34mdebug[39m: loadFilesContents
16:55:21 - [34mdebug[39m: loadFileContents
16:55:21 - [34mdebug[39m: loadFilesContents
16:55:23 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","paymethod":"überweisen"}}
16:55:23 - [31merror[39m: Invalid or missing identifier for Type PaymentClause in namespace org.example.mietvertrag01
17:04:30 - [32minfo[39m: Using current directory as template folder
17:04:30 - [32minfo[39m: Loading a default data.json file.
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: fromDirectory
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: fromDirectory
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFileContents
17:04:30 - [34mdebug[39m: loadFilesContents
17:04:32 - [34mdebug[39m: fromDirectory
17:04:32 - [34mdebug[39m: loadFileContents
17:04:32 - [34mdebug[39m: buildGrammar
17:04:32 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:04:32 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:04:32 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:04:32 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:04:32 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:04:32 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:04:32 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:04:32 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:04:32 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:04:32 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:04:32 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:04:32 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:04:32 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:04:32 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:04:32 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:04:32 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:04:32 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:04:32 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:04:32 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:04:32 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:04:32 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:04:32 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:04:32 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:04:32 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "d569eab5-264c-43da-b36a-381fc7586f0c",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "ee6cb6d9-e95d-47a5-a23f-bb181e4fb5a8",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  String  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymethod : data[14],
        paymentClause : data[16],
        contractId : data[18],
        parties : data[20]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:04:32 - [34mdebug[39m: fromDirectory
17:04:32 - [34mdebug[39m: fromDirectory
17:04:32 - [34mdebug[39m: loadFilesContents
17:04:32 - [34mdebug[39m: loadFilesContents
17:04:32 - [34mdebug[39m: loadFilesContents
17:04:32 - [34mdebug[39m: loadFilesContents
17:04:32 - [34mdebug[39m: loadFilesContents
17:04:32 - [34mdebug[39m: loadFileContents
17:04:32 - [34mdebug[39m: loadFilesContents
17:04:34 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen"}}
17:04:34 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#e96ee4e9-a3b6-44e9-96c5-b3160f249877 missing required field paymethod
17:05:19 - [32minfo[39m: Using current directory as template folder
17:05:19 - [32minfo[39m: Loading a default data.json file.
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: fromDirectory
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: fromDirectory
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFilesContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:19 - [34mdebug[39m: loadFileContents
17:05:20 - [34mdebug[39m: fromDirectory
17:05:20 - [34mdebug[39m: loadFileContents
17:05:20 - [34mdebug[39m: buildGrammar
17:05:20 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:05:20 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:05:20 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:05:20 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:05:20 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:05:20 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:05:20 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:05:20 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:05:20 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:05:20 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:05:20 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:05:20 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:05:20 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:05:20 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:05:20 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:05:20 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:05:20 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:05:20 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:05:20 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:05:20 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:05:20 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:05:20 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:05:20 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:05:20 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "839feff1-7f07-4a64-9bca-aa4411f8a015",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "d7fbca1b-bcc5-42fe-965b-b224fd269760",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:05:21 - [34mdebug[39m: fromDirectory
17:05:21 - [34mdebug[39m: fromDirectory
17:05:21 - [34mdebug[39m: loadFilesContents
17:05:21 - [34mdebug[39m: loadFilesContents
17:05:21 - [34mdebug[39m: loadFilesContents
17:05:21 - [34mdebug[39m: loadFilesContents
17:05:21 - [34mdebug[39m: loadFilesContents
17:05:21 - [34mdebug[39m: loadFileContents
17:05:21 - [34mdebug[39m: loadFilesContents
17:05:22 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen"}}
17:05:22 - [31merror[39m: Instance org.example.mietvertrag01.PaymentClause#3c72cd74-cbcf-49f7-b7f0-314501961b76 missing required field amountText
17:06:28 - [32minfo[39m: Using current directory as template folder
17:06:28 - [32minfo[39m: Loading a default data.json file.
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: fromDirectory
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: fromDirectory
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFileContents
17:06:28 - [34mdebug[39m: loadFilesContents
17:06:30 - [34mdebug[39m: fromDirectory
17:06:30 - [34mdebug[39m: loadFileContents
17:06:30 - [34mdebug[39m: buildGrammar
17:06:30 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:06:30 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:06:30 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:06:30 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:06:30 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:06:30 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:06:30 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:06:30 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:06:30 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:06:30 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:06:30 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:06:30 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:06:30 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:06:30 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:06:30 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:06:30 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:06:30 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:06:30 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:06:30 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:06:30 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:06:30 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:06:30 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:06:30 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:06:30 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "447b79ad-df38-41b8-af2b-6dd70eddb27a",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "17bc7515-f9c6-4120-ac80-7d1f29228181",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:06:30 - [34mdebug[39m: fromDirectory
17:06:30 - [34mdebug[39m: fromDirectory
17:06:30 - [34mdebug[39m: loadFilesContents
17:06:30 - [34mdebug[39m: loadFilesContents
17:06:30 - [34mdebug[39m: loadFilesContents
17:06:30 - [34mdebug[39m: loadFilesContents
17:06:30 - [34mdebug[39m: loadFilesContents
17:06:30 - [34mdebug[39m: loadFileContents
17:06:30 - [34mdebug[39m: loadFilesContents
17:06:31 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amoutText":"vierhunder","amount":400}}
17:06:31 - [31merror[39m: Unexpected properties for type org.example.mietvertrag01.PaymentClause: amoutText
17:06:48 - [32minfo[39m: Using current directory as template folder
17:06:48 - [32minfo[39m: Loading a default data.json file.
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: fromDirectory
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: fromDirectory
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFileContents
17:06:48 - [34mdebug[39m: loadFilesContents
17:06:50 - [34mdebug[39m: fromDirectory
17:06:50 - [34mdebug[39m: loadFileContents
17:06:50 - [34mdebug[39m: buildGrammar
17:06:50 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:06:50 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:06:50 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:06:50 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:06:50 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:06:50 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:06:50 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:06:50 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:06:50 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:06:50 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:06:50 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:06:50 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:06:50 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:06:50 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:06:50 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:06:50 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:06:50 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:06:50 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:06:50 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:06:50 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:06:50 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:06:50 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:06:50 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:06:50 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "3734bb7c-37c6-469f-b2f2-a1b10fa5dda7",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "289f9dcd-0199-4ac1-b29e-1045ff76b6ff",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:06:51 - [34mdebug[39m: fromDirectory
17:06:51 - [34mdebug[39m: fromDirectory
17:06:51 - [34mdebug[39m: loadFilesContents
17:06:51 - [34mdebug[39m: loadFilesContents
17:06:51 - [34mdebug[39m: loadFilesContents
17:06:51 - [34mdebug[39m: loadFilesContents
17:06:51 - [34mdebug[39m: loadFilesContents
17:06:51 - [34mdebug[39m: loadFileContents
17:06:51 - [34mdebug[39m: loadFilesContents
17:06:52 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":400}}
17:06:52 - [31merror[39m: Instance org.example.mietvertrag01.PaymentClause#3c72cd74-cbcf-49f7-b7f0-314501961b76 missing required field doubleValue
17:10:25 - [32minfo[39m: Using current directory as template folder
17:10:25 - [32minfo[39m: Loading a default data.json file.
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: fromDirectory
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: fromDirectory
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFileContents
17:10:25 - [34mdebug[39m: loadFilesContents
17:10:28 - [34mdebug[39m: fromDirectory
17:10:28 - [34mdebug[39m: loadFileContents
17:10:28 - [34mdebug[39m: buildGrammar
17:10:28 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:10:28 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:10:28 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:10:28 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:10:28 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:10:28 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:10:28 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:10:28 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:10:28 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:10:28 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:10:28 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:10:28 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:10:28 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:10:28 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:10:28 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:10:28 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:10:28 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:10:28 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:10:28 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:10:28 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:10:28 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:10:28 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:10:28 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:10:28 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "b5e54e01-6922-4236-aebe-1185cca2c062",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "f65cd68c-821f-4910-801d-c6eb2316b6cc",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:10:28 - [34mdebug[39m: fromDirectory
17:10:28 - [34mdebug[39m: fromDirectory
17:10:28 - [34mdebug[39m: loadFilesContents
17:10:28 - [34mdebug[39m: loadFilesContents
17:10:28 - [34mdebug[39m: loadFilesContents
17:10:28 - [34mdebug[39m: loadFilesContents
17:10:28 - [34mdebug[39m: loadFilesContents
17:10:28 - [34mdebug[39m: loadFileContents
17:10:28 - [34mdebug[39m: loadFilesContents
17:10:30 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
17:10:30 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
17:10:30 - [34mdebug[39m: Calling eval with context [object Object]
17:10:30 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen"
17:11:38 - [32minfo[39m: Using current directory as template folder
17:11:38 - [32minfo[39m: Loading a default data.json file.
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: fromDirectory
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: fromDirectory
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFileContents
17:11:38 - [34mdebug[39m: loadFilesContents
17:11:39 - [34mdebug[39m: fromDirectory
17:11:39 - [34mdebug[39m: loadFileContents
17:11:39 - [34mdebug[39m: buildGrammar
17:11:39 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:11:39 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:11:39 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:11:39 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:11:39 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:11:39 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:11:39 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:11:39 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:11:39 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:11:39 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:11:39 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:11:39 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:11:39 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:11:39 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:11:39 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:11:39 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:11:39 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:11:39 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:11:39 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:11:39 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:11:39 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:11:39 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:11:39 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:11:39 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "266e4ff2-0882-41f1-bca4-e857e99f5381",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "b198aa53-498f-4e80-90b0-6916c6d637a2",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:11:39 - [34mdebug[39m: fromDirectory
17:11:39 - [34mdebug[39m: fromDirectory
17:11:39 - [34mdebug[39m: loadFilesContents
17:11:39 - [34mdebug[39m: loadFilesContents
17:11:39 - [34mdebug[39m: loadFilesContents
17:11:39 - [34mdebug[39m: loadFilesContents
17:11:39 - [34mdebug[39m: loadFilesContents
17:11:39 - [34mdebug[39m: loadFileContents
17:11:39 - [34mdebug[39m: loadFilesContents
17:11:41 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
17:11:41 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
17:11:41 - [34mdebug[39m: Calling eval with context [object Object]
17:11:41 - [32minfo[39m: Creating file: .\text\sample.md
17:11:41 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen"
17:13:36 - [32minfo[39m: Using current directory as template folder
17:13:36 - [32minfo[39m: Loading a default text/sample.md file.
17:13:36 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: fromDirectory
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: fromDirectory
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFileContents
17:13:37 - [34mdebug[39m: loadFilesContents
17:13:39 - [34mdebug[39m: fromDirectory
17:13:39 - [34mdebug[39m: loadFileContents
17:13:40 - [34mdebug[39m: buildGrammar
17:13:40 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:13:40 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:13:40 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:13:40 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:13:40 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:13:40 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:13:40 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:13:40 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:13:40 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:13:40 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:13:40 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:13:40 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:13:40 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:13:40 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:13:40 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:13:40 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:13:40 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:13:40 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:13:40 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:13:40 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:13:40 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:13:40 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:13:40 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:13:40 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "30e7ab64-ca4c-479a-a348-5ce90ea8eed7",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "ae6bc90b-215a-4683-b10b-e52ec830dbfb",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:13:40 - [34mdebug[39m: fromDirectory
17:13:40 - [34mdebug[39m: fromDirectory
17:13:40 - [34mdebug[39m: loadFilesContents
17:13:40 - [34mdebug[39m: loadFilesContents
17:13:40 - [34mdebug[39m: loadFilesContents
17:13:40 - [34mdebug[39m: loadFilesContents
17:13:40 - [34mdebug[39m: loadFilesContents
17:13:40 - [34mdebug[39m: loadFileContents
17:13:40 - [34mdebug[39m: loadFilesContents
17:13:41 - [34mdebug[39m: Result of parsing: undefined
17:13:41 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
17:13:53 - [32minfo[39m: Using current directory as template folder
17:13:53 - [32minfo[39m: Loading a default data.json file.
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: fromDirectory
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: fromDirectory
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFileContents
17:13:53 - [34mdebug[39m: loadFilesContents
17:13:58 - [34mdebug[39m: fromDirectory
17:13:58 - [34mdebug[39m: loadFileContents
17:13:58 - [34mdebug[39m: buildGrammar
17:13:58 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:13:58 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:13:58 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:13:58 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:13:58 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:13:58 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:13:58 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:13:58 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:13:58 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:13:58 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:13:58 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:13:58 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:13:58 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:13:58 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:13:58 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:13:58 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:13:58 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:13:58 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:13:58 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:13:58 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:13:58 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:13:58 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:13:58 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":"\n","text":"\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:13:58 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "f2f57fc7-232a-483f-a324-bf22b2882434",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "df28af62-cb2b-435b-90ec-7a7defcdb260",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> "\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:13:58 - [34mdebug[39m: fromDirectory
17:13:58 - [34mdebug[39m: fromDirectory
17:13:58 - [34mdebug[39m: loadFilesContents
17:13:58 - [34mdebug[39m: loadFilesContents
17:13:58 - [34mdebug[39m: loadFilesContents
17:13:58 - [34mdebug[39m: loadFilesContents
17:13:58 - [34mdebug[39m: loadFilesContents
17:13:58 - [34mdebug[39m: loadFileContents
17:13:58 - [34mdebug[39m: loadFilesContents
17:13:59 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
17:13:59 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
17:13:59 - [34mdebug[39m: Calling eval with context [object Object]
17:13:59 - [32minfo[39m: Creating file: .\text\sample.md
17:13:59 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen"
17:14:10 - [32minfo[39m: Using current directory as template folder
17:14:10 - [32minfo[39m: Loading a default data.json file.
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: fromDirectory
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: fromDirectory
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFileContents
17:14:10 - [34mdebug[39m: loadFilesContents
17:14:13 - [34mdebug[39m: fromDirectory
17:14:13 - [34mdebug[39m: loadFileContents
17:14:13 - [34mdebug[39m: buildGrammar
17:14:13 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:14:13 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:14:13 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:14:13 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:14:13 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:14:13 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:14:13 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:14:13 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:14:13 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:14:13 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:14:13 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:14:13 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:14:13 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:14:13 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:14:13 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:14:13 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:14:13 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:14:13 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:14:13 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:14:13 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:14:13 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:14:13 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:14:13 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:14:13 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "71372a91-b00d-42dd-9567-552993505295",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "a6dcbdd1-7076-4f5c-9ea3-87b01d08942d",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:14:13 - [34mdebug[39m: fromDirectory
17:14:13 - [34mdebug[39m: fromDirectory
17:14:13 - [34mdebug[39m: loadFilesContents
17:14:13 - [34mdebug[39m: loadFilesContents
17:14:13 - [34mdebug[39m: loadFilesContents
17:14:13 - [34mdebug[39m: loadFilesContents
17:14:13 - [34mdebug[39m: loadFilesContents
17:14:13 - [34mdebug[39m: loadFileContents
17:14:13 - [34mdebug[39m: loadFilesContents
17:14:15 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
17:14:15 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
17:14:15 - [34mdebug[39m: Calling eval with context [object Object]
17:14:15 - [32minfo[39m: Creating file: .\text\sample.md
17:14:15 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen".
17:14:28 - [32minfo[39m: Using current directory as template folder
17:14:28 - [32minfo[39m: Loading a default text/sample.md file.
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: fromDirectory
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: fromDirectory
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFileContents
17:14:28 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: fromDirectory
17:14:31 - [34mdebug[39m: loadFileContents
17:14:31 - [34mdebug[39m: buildGrammar
17:14:31 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
17:14:31 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
17:14:31 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
17:14:31 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
17:14:31 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
17:14:31 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
17:14:31 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
17:14:31 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
17:14:31 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
17:14:31 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
17:14:31 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
17:14:31 - [34mdebug[39m: element rule11 {"type":"Expr"}
17:14:31 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
17:14:31 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
17:14:31 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
17:14:31 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
17:14:31 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
17:14:31 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
17:14:31 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
17:14:31 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
17:14:31 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
17:14:31 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
17:14:31 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
17:14:31 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "9baf0cc1-7e5e-4988-bd76-e1d0ec69dd37",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "e6918945-3508-43f2-895b-74f08ff375d8",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



17:14:31 - [34mdebug[39m: fromDirectory
17:14:31 - [34mdebug[39m: fromDirectory
17:14:31 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: loadFilesContents
17:14:31 - [34mdebug[39m: loadFileContents
17:14:32 - [34mdebug[39m: Result of parsing: undefined
17:14:32 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
8:35:14 - [32minfo[39m: Using current directory as template folder
8:35:14 - [32minfo[39m: Loading a default text/sample.md file.
8:35:14 - [32minfo[39m: Loading a default request.json file.
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: fromDirectory
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: fromDirectory
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFileContents
8:35:14 - [34mdebug[39m: loadFilesContents
8:35:20 - [34mdebug[39m: fromDirectory
8:35:20 - [34mdebug[39m: loadFileContents
8:35:20 - [34mdebug[39m: buildGrammar
8:35:20 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
8:35:20 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
8:35:20 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
8:35:20 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
8:35:20 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
8:35:20 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
8:35:20 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
8:35:20 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
8:35:20 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
8:35:20 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
8:35:20 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
8:35:20 - [34mdebug[39m: element rule11 {"type":"Expr"}
8:35:20 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
8:35:20 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
8:35:20 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
8:35:20 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
8:35:20 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
8:35:20 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
8:35:20 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
8:35:20 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
8:35:20 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
8:35:20 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
8:35:20 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
8:35:20 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "da121da0-8b29-475d-9d5c-5edcd8dd783d",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "a2c6f57b-f823-441f-8574-ba039cfbe864",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



8:35:20 - [34mdebug[39m: fromDirectory
8:35:20 - [34mdebug[39m: fromDirectory
8:35:20 - [34mdebug[39m: loadFilesContents
8:35:20 - [34mdebug[39m: loadFilesContents
8:35:20 - [34mdebug[39m: loadFilesContents
8:35:20 - [34mdebug[39m: loadFilesContents
8:35:20 - [34mdebug[39m: loadFilesContents
8:35:20 - [34mdebug[39m: loadFileContents
8:35:20 - [34mdebug[39m: loadFilesContents
8:35:21 - [34mdebug[39m: Result of parsing: undefined
8:35:21 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
9:22:27 - [32minfo[39m: Using current directory as template folder
9:22:27 - [32minfo[39m: Loading a default text/sample.md file.
9:22:27 - [32minfo[39m: Loading a default request.json file.
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: fromDirectory
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: fromDirectory
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFilesContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:27 - [34mdebug[39m: loadFileContents
9:22:34 - [34mdebug[39m: fromDirectory
9:22:34 - [34mdebug[39m: loadFileContents
9:22:34 - [34mdebug[39m: buildGrammar
9:22:34 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:22:34 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:22:34 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:22:34 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:22:34 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:22:34 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:22:34 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:22:34 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:22:34 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:22:34 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:22:34 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:22:34 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:22:34 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:22:34 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:22:34 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:22:34 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:22:34 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:22:34 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:22:34 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:22:34 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:22:34 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:22:34 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:22:34 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:22:34 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "26088576-2dcc-497e-a7bc-42ddb80ed6af",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "ef5f40e6-2a2c-4317-8192-0c4797884220",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:22:34 - [34mdebug[39m: fromDirectory
9:22:34 - [34mdebug[39m: fromDirectory
9:22:34 - [34mdebug[39m: loadFilesContents
9:22:34 - [34mdebug[39m: loadFilesContents
9:22:34 - [34mdebug[39m: loadFilesContents
9:22:34 - [34mdebug[39m: loadFilesContents
9:22:34 - [34mdebug[39m: loadFilesContents
9:22:34 - [34mdebug[39m: loadFileContents
9:22:34 - [34mdebug[39m: loadFilesContents
9:22:36 - [34mdebug[39m: Result of parsing: undefined
9:22:36 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
9:22:47 - [32minfo[39m: Using current directory as template folder
9:22:47 - [32minfo[39m: Loading a default data.json file.
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: fromDirectory
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: fromDirectory
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFileContents
9:22:47 - [34mdebug[39m: loadFilesContents
9:22:53 - [34mdebug[39m: fromDirectory
9:22:53 - [34mdebug[39m: loadFileContents
9:22:53 - [34mdebug[39m: buildGrammar
9:22:53 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:22:53 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:22:53 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:22:53 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:22:53 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:22:53 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:22:53 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:22:53 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:22:53 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:22:53 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:22:53 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:22:53 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:22:53 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:22:53 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:22:53 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:22:53 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:22:53 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:22:53 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:22:53 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:22:53 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:22:53 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:22:53 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:22:53 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:22:53 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "930724c0-b27f-42d2-860a-af9e409b9bdf",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "d736253d-e15f-480d-9c5e-650b411f54b2",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:22:53 - [34mdebug[39m: fromDirectory
9:22:53 - [34mdebug[39m: fromDirectory
9:22:53 - [34mdebug[39m: loadFilesContents
9:22:53 - [34mdebug[39m: loadFilesContents
9:22:53 - [34mdebug[39m: loadFilesContents
9:22:53 - [34mdebug[39m: loadFilesContents
9:22:53 - [34mdebug[39m: loadFilesContents
9:22:53 - [34mdebug[39m: loadFileContents
9:22:53 - [34mdebug[39m: loadFilesContents
9:22:54 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"","addressLocality":"","addressCountry":""},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
9:22:55 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
9:22:55 - [34mdebug[39m: Calling eval with context [object Object]
9:22:55 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "" "" "" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen".
9:23:55 - [32minfo[39m: Using current directory as template folder
9:23:55 - [32minfo[39m: Loading a default data.json file.
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: fromDirectory
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: fromDirectory
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFileContents
9:23:55 - [34mdebug[39m: loadFilesContents
9:24:01 - [34mdebug[39m: fromDirectory
9:24:01 - [34mdebug[39m: loadFileContents
9:24:01 - [34mdebug[39m: buildGrammar
9:24:01 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:24:01 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:24:01 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:24:01 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:24:01 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:24:01 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:24:01 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:24:01 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:24:01 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:24:01 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:24:01 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:24:01 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:24:01 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:24:01 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:24:01 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:24:01 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:24:01 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:24:01 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:24:01 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:24:01 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:24:01 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:24:01 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:24:01 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:24:01 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "6838689a-1917-4fcd-9bbe-b44811d60ddb",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "a9723fd2-fc65-41c5-8651-e98352d96ce8",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:24:01 - [34mdebug[39m: fromDirectory
9:24:01 - [34mdebug[39m: fromDirectory
9:24:01 - [34mdebug[39m: loadFilesContents
9:24:01 - [34mdebug[39m: loadFilesContents
9:24:01 - [34mdebug[39m: loadFilesContents
9:24:01 - [34mdebug[39m: loadFilesContents
9:24:01 - [34mdebug[39m: loadFilesContents
9:24:01 - [34mdebug[39m: loadFileContents
9:24:01 - [34mdebug[39m: loadFilesContents
9:24:02 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
9:24:02 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
9:24:02 - [34mdebug[39m: Calling eval with context [object Object]
9:24:02 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen".
9:24:42 - [32minfo[39m: Using current directory as template folder
9:24:42 - [32minfo[39m: Loading a default data.json file.
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: fromDirectory
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: fromDirectory
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFileContents
9:24:42 - [34mdebug[39m: loadFilesContents
9:24:47 - [34mdebug[39m: fromDirectory
9:24:47 - [34mdebug[39m: loadFileContents
9:24:47 - [34mdebug[39m: buildGrammar
9:24:47 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:24:47 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:24:47 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:24:47 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:24:47 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:24:47 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:24:47 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:24:47 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:24:47 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:24:47 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:24:47 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:24:47 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:24:47 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:24:47 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:24:47 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:24:47 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:24:47 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:24:47 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:24:47 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:24:47 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:24:47 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:24:47 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:24:47 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:24:47 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "810b9114-cd8b-42b1-a265-b6da8c0bee91",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "f2687b9b-8911-4395-81d3-7e6ba3cd26b0",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:24:47 - [34mdebug[39m: fromDirectory
9:24:47 - [34mdebug[39m: fromDirectory
9:24:47 - [34mdebug[39m: loadFilesContents
9:24:47 - [34mdebug[39m: loadFilesContents
9:24:47 - [34mdebug[39m: loadFilesContents
9:24:47 - [34mdebug[39m: loadFilesContents
9:24:47 - [34mdebug[39m: loadFilesContents
9:24:47 - [34mdebug[39m: loadFileContents
9:24:47 - [34mdebug[39m: loadFilesContents
9:24:49 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"doubleValue":400,"currencyCode":"EUR"}}}
9:24:49 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
9:24:49 - [34mdebug[39m: Calling eval with context [object Object]
9:24:49 - [32minfo[39m: Creating file: .\text\sample.md
9:24:49 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen".
9:24:58 - [32minfo[39m: Using current directory as template folder
9:24:58 - [32minfo[39m: Loading a default text/sample.md file.
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: fromDirectory
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: fromDirectory
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFileContents
9:24:58 - [34mdebug[39m: loadFilesContents
9:25:04 - [34mdebug[39m: fromDirectory
9:25:04 - [34mdebug[39m: loadFileContents
9:25:04 - [34mdebug[39m: buildGrammar
9:25:04 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:25:04 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:25:04 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:25:04 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:25:04 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:25:04 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:25:04 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:25:04 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:25:04 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:25:04 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:25:04 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:25:04 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:25:04 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:25:04 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:25:04 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:25:04 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:25:04 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:25:04 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:25:04 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:25:04 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:25:04 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:25:04 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:25:04 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:25:04 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "eeb13796-c76c-4e0c-85dc-b9ab399690a8",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "ea7c1522-982b-4aab-a387-b8febb2284de",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:25:04 - [34mdebug[39m: fromDirectory
9:25:04 - [34mdebug[39m: fromDirectory
9:25:04 - [34mdebug[39m: loadFilesContents
9:25:04 - [34mdebug[39m: loadFilesContents
9:25:04 - [34mdebug[39m: loadFilesContents
9:25:04 - [34mdebug[39m: loadFilesContents
9:25:04 - [34mdebug[39m: loadFilesContents
9:25:04 - [34mdebug[39m: loadFileContents
9:25:04 - [34mdebug[39m: loadFilesContents
9:25:05 - [34mdebug[39m: Result of parsing: undefined
9:25:05 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
9:26:00 - [32minfo[39m: Using current directory as template folder
9:26:00 - [32minfo[39m: Loading a default data.json file.
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: fromDirectory
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: fromDirectory
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFileContents
9:26:00 - [34mdebug[39m: loadFilesContents
9:26:06 - [34mdebug[39m: fromDirectory
9:26:06 - [34mdebug[39m: loadFileContents
9:26:06 - [34mdebug[39m: buildGrammar
9:26:06 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:26:06 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:26:06 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:26:06 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:26:06 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:26:06 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:26:06 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:26:06 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:26:06 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:26:06 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:26:06 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:26:06 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:26:06 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:26:06 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:26:06 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:26:06 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:26:06 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:26:06 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:26:06 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:26:06 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:26:06 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:26:06 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:26:06 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:26:06 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "6caaa76c-89ca-4f2e-bdb4-4a38d0da9f12",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "962eee1a-edc7-4ed0-bc65-2f95d0ce6f49",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:26:06 - [34mdebug[39m: fromDirectory
9:26:06 - [34mdebug[39m: fromDirectory
9:26:06 - [34mdebug[39m: loadFilesContents
9:26:06 - [34mdebug[39m: loadFilesContents
9:26:06 - [34mdebug[39m: loadFilesContents
9:26:06 - [34mdebug[39m: loadFilesContents
9:26:06 - [34mdebug[39m: loadFilesContents
9:26:06 - [34mdebug[39m: loadFileContents
9:26:06 - [34mdebug[39m: loadFilesContents
9:26:07 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhunder","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}}
9:26:07 - [34mdebug[39m: Engine processing clause toText with state org.accordproject.cicero.contract.AccordContractState
9:26:07 - [34mdebug[39m: Calling eval with context [object Object]
9:26:07 - [32minfo[39m: Creating file: .\text\sample.md
9:26:07 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{"mieter kann nicht zahlen"}}
Der Mieter kann doch noch zahlen.

Payment
----

Der mieter muss dem vermieter die "vierhunder" (400.0 EUR) "überweisen".
9:26:12 - [32minfo[39m: Using current directory as template folder
9:26:12 - [32minfo[39m: Loading a default text/sample.md file.
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: fromDirectory
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: fromDirectory
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFileContents
9:26:12 - [34mdebug[39m: loadFilesContents
9:26:19 - [34mdebug[39m: fromDirectory
9:26:19 - [34mdebug[39m: loadFileContents
9:26:19 - [34mdebug[39m: buildGrammar
9:26:19 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:26:19 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:26:19 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:26:19 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:26:19 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:26:19 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:26:19 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:26:19 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:26:19 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:26:19 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:26:19 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:26:19 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:26:19 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:26:19 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:26:19 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:26:19 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:26:19 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:26:19 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:26:19 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:26:19 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:26:19 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:26:19 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:26:19 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:26:19 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "10963233-72e3-4ad1-add4-f9dbc1a9834a",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "c8fc7529-bfa1-4c08-a8ae-603cf03e662b",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:26:19 - [34mdebug[39m: fromDirectory
9:26:19 - [34mdebug[39m: fromDirectory
9:26:19 - [34mdebug[39m: loadFilesContents
9:26:19 - [34mdebug[39m: loadFilesContents
9:26:19 - [34mdebug[39m: loadFilesContents
9:26:19 - [34mdebug[39m: loadFilesContents
9:26:19 - [34mdebug[39m: loadFilesContents
9:26:19 - [34mdebug[39m: loadFileContents
9:26:19 - [34mdebug[39m: loadFilesContents
9:26:20 - [34mdebug[39m: Result of parsing: undefined
9:26:20 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
9:50:50 - [32minfo[39m: Using current directory as template folder
9:50:50 - [32minfo[39m: Loading a default text/sample.md file.
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: fromDirectory
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: fromDirectory
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFileContents
9:50:50 - [34mdebug[39m: loadFilesContents
9:50:56 - [34mdebug[39m: fromDirectory
9:50:56 - [34mdebug[39m: loadFileContents
9:50:56 - [34mdebug[39m: buildGrammar
9:50:56 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:50:56 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:50:56 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:50:56 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:50:56 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:50:56 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:50:56 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:50:56 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:50:56 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:50:56 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:50:56 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:50:56 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:50:56 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:50:56 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:50:56 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:50:56 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:50:56 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:50:56 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:50:56 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:50:56 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:50:56 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:50:56 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:50:56 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:50:56 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "1752f971-38ff-46e3-a3f3-72a71b815da6",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "4eddacd3-7603-4bc1-a710-0f1bb2895dc6",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:50:56 - [34mdebug[39m: fromDirectory
9:50:56 - [34mdebug[39m: fromDirectory
9:50:56 - [34mdebug[39m: loadFilesContents
9:50:56 - [34mdebug[39m: loadFilesContents
9:50:56 - [34mdebug[39m: loadFilesContents
9:50:56 - [34mdebug[39m: loadFilesContents
9:50:56 - [34mdebug[39m: loadFilesContents
9:50:56 - [34mdebug[39m: loadFileContents
9:50:56 - [34mdebug[39m: loadFilesContents
9:50:57 - [34mdebug[39m: Result of parsing: undefined
9:50:57 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
9:51:50 - [31merror[39m: Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html
9:55:41 - [32minfo[39m: Loading a default text/sample.md file.
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: fromDirectory
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: fromDirectory
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFileContents
9:55:41 - [34mdebug[39m: loadFilesContents
9:55:47 - [34mdebug[39m: fromDirectory
9:55:47 - [34mdebug[39m: loadFileContents
9:55:47 - [34mdebug[39m: buildGrammar
9:55:47 - [34mdebug[39m: element rule0 {"type":"Chunk","value":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* ","text":"Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* {{","offset":0,"lineBreaks":3,"line":1,"col":1}
9:55:47 - [34mdebug[39m: element rule1 {"type":"Binding","fieldName":{"type":"varid","value":"address","text":"address","offset":53,"lineBreaks":0,"line":4,"col":36}}
9:55:47 - [34mdebug[39m: element rule2 {"type":"Chunk","value":" an ","text":" an {{","offset":62,"lineBreaks":0,"line":4,"col":45}
9:55:47 - [34mdebug[39m: element rule3 {"type":"Binding","fieldName":{"type":"varid","value":"mieter","text":"mieter","offset":68,"lineBreaks":0,"line":4,"col":51}}
9:55:47 - [34mdebug[39m: element rule4 {"type":"Chunk","value":" fuer den Zeitraum von ","text":" fuer den Zeitraum von {{","offset":76,"lineBreaks":0,"line":4,"col":59}
9:55:47 - [34mdebug[39m: element rule5 {"type":"FormattedBinding","fieldName":{"type":"varid","value":"erstes_datum","text":"erstes_datum","offset":101,"lineBreaks":0,"line":4,"col":84},"format":{"type":"varstring","value":"\"MM/DD/YYYY\"","text":"\"MM/DD/YYYY\"","offset":117,"lineBreaks":0,"line":4,"col":100}}
9:55:47 - [34mdebug[39m: element rule6 {"type":"Chunk","value":" bis ","text":" bis {{","offset":131,"lineBreaks":0,"line":4,"col":114}
9:55:47 - [34mdebug[39m: element rule7 {"type":"Binding","fieldName":{"type":"varid","value":"zweites_datum","text":"zweites_datum","offset":138,"lineBreaks":0,"line":4,"col":121}}
9:55:47 - [34mdebug[39m: element rule8 {"type":"Chunk","value":" fuer einen ***Monatlichen*** preis von ","text":" fuer einen ***Monatlichen*** preis von {{","offset":153,"lineBreaks":0,"line":4,"col":136}
9:55:47 - [34mdebug[39m: element rule9 {"type":"Binding","fieldName":{"type":"varid","value":"preis","text":"preis","offset":195,"lineBreaks":0,"line":4,"col":178}}
9:55:47 - [34mdebug[39m: element rule10 {"type":"Chunk","value":".\n","text":".\n{{","offset":202,"lineBreaks":1,"line":4,"col":185}
9:55:47 - [34mdebug[39m: element rule11 {"type":"Expr"}
9:55:47 - [34mdebug[39m: element rule12 {"type":"Chunk","value":"\n","text":"\n{{","offset":297,"lineBreaks":1,"line":9,"col":4}
9:55:47 - [34mdebug[39m: element rule13 {"type":"IfElseBinding","stringIf":{"type":"Chunk","value":" Der Mieter kann doch noch zahlen. ","text":" Der Mieter kann doch noch zahlen. {{","offset":315,"lineBreaks":0,"line":10,"col":18},"stringElse":{"type":"Chunk","value":" selbst die Sparbüchse ist leer ","text":" selbst die Sparbüchse ist leer {{","offset":358,"lineBreaks":0,"line":10,"col":61},"fieldName":{"type":"startblockid","value":"erspartes","text":"erspartes","offset":304,"lineBreaks":0,"line":10,"col":7}}
9:55:47 - [34mdebug[39m: element rule14 {"type":"Chunk","value":"\n\nPayment\n----\n\n","text":"\n\nPayment\n----\n\n{{","offset":397,"lineBreaks":5,"line":10,"col":100}
9:55:47 - [34mdebug[39m: element rule15 {"type":"ClauseBinding","template":{"type":"ClauseTemplate","data":[{"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26},{"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}},{"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49},{"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}},{"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61},{"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}},{"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}]},"fieldName":{"type":"startblockid","value":"paymentClause","text":"paymentClause","offset":423,"lineBreaks":0,"line":15,"col":11}}
9:55:47 - [34mdebug[39m: element paymentClause0 {"type":"Chunk","value":"\nDer mieter muss dem vermieter die ","text":"\nDer mieter muss dem vermieter die {{","offset":438,"lineBreaks":1,"line":15,"col":26}
9:55:47 - [34mdebug[39m: element paymentClause1 {"type":"Binding","fieldName":{"type":"varid","value":"amountText","text":"amountText","offset":475,"lineBreaks":0,"line":16,"col":37}}
9:55:47 - [34mdebug[39m: element paymentClause2 {"type":"Chunk","value":" (","text":" ({{","offset":487,"lineBreaks":0,"line":16,"col":49}
9:55:47 - [34mdebug[39m: element paymentClause3 {"type":"Binding","fieldName":{"type":"varid","value":"amount","text":"amount","offset":491,"lineBreaks":0,"line":16,"col":53}}
9:55:47 - [34mdebug[39m: element paymentClause4 {"type":"Chunk","value":") ","text":") {{","offset":499,"lineBreaks":0,"line":16,"col":61}
9:55:47 - [34mdebug[39m: element paymentClause5 {"type":"Binding","fieldName":{"type":"varid","value":"paymethod","text":"paymethod","offset":503,"lineBreaks":0,"line":16,"col":65}}
9:55:47 - [34mdebug[39m: element paymentClause6 {"type":"Chunk","value":".\n","text":".\n{{","offset":514,"lineBreaks":1,"line":16,"col":76}
9:55:47 - [34mdebug[39m: Generated template grammar#
# This grammar is dynamically generated
#

#
# Grammar rules from template text
#

rule -> rule0 rule1 rule2 rule3 rule4 rule5 rule6 rule7 rule8 rule9 rule10 rule11 rule12 rule13 rule14 rule15 
{% ([ rule0,rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15 ]) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        contractId : "e016b82a-2d8e-45fd-9801-948644d7275f",
        address : rule1,
        mieter : rule3,
        erstes_datum : rule5,
        zweites_datum : rule7,
        preis : rule9,
        erspartes : rule13,
        paymentClause : rule15,
    };
}
%}

paymentClause -> paymentClause0 paymentClause1 paymentClause2 paymentClause3 paymentClause4 paymentClause5 paymentClause6 
{% ([ paymentClause0,paymentClause1,paymentClause2,paymentClause3,paymentClause4,paymentClause5,paymentClause6 ]) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        clauseId : "ee8f1b00-537a-4805-9eed-e7d256ef9e51",
        amountText : paymentClause1,
        amount : paymentClause3,
        paymethod : paymentClause5,
    };
}
%}


#
# Grammar rules from the template data model
#

rule0 -> "Mietvertrag\n====\n\n**Ich** vermiete meine *Wohnung* " 


rule1 -> PostalAddress {% id %} # address 


rule2 -> " an " 


rule3 -> String {% id %} # mieter 


rule4 -> " fuer den Zeitraum von " 


DateTime_b59007c1b17ec17147913c556282cf79 -> MM  "/" DD  "/" YYYY  {% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%} # erstes_datum as "MM/DD/YYYY" 


rule5 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # erstes_datum 


rule6 -> " bis " 


rule7 -> DateTime_b59007c1b17ec17147913c556282cf79 {% id %} # zweites_datum 


rule8 -> " fuer einen ***Monatlichen*** preis von " 


rule9 -> MonetaryAmount {% id %} # preis 


rule10 -> ".\n" 


rule11 -> Any 


rule12 -> "\n" 


rule13 -> (" Der Mieter kann doch noch zahlen. "|" selbst die Sparbüchse ist leer ") {% (d) => {return d[0][0] === " Der Mieter kann doch noch zahlen. ";}%} # erspartes 


rule14 -> "\n\nPayment\n----\n\n" 


paymentClause0 -> "\nDer mieter muss dem vermieter die " 


paymentClause1 -> String {% id %} # amountText 


paymentClause2 -> " (" 


paymentClause3 -> MonetaryAmount {% id %} # amount 


paymentClause4 -> ") " 


paymentClause5 -> String {% id %} # paymethod 


paymentClause6 -> ".\n" 


rule15 -> paymentClause {% id %} # paymentClause 


PostalAddress -> String:?  __  String:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.address.PostalAddress",
        streetAddress : data[0],
        postalCode : data[2],
        postOfficeBoxNumber : data[4],
        addressRegion : data[6],
        addressLocality : data[8],
        addressCountry : data[10]
    };
}
%}


AccordContractState -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordContractState",
        stateId : data[0]
    };
}
%}


AccordParty -> String 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.contract.AccordParty",
        partyId : data[0]
    };
}
%}


Request -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Request",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


Response -> String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Response",
        transactionId : data[0],
        timestamp : data[2]
    };
}
%}


PaymentObligation -> MonetaryAmount  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.PaymentObligation",
        amount : data[0],
        description : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


NotificationObligation -> String  __  String  __  String  __  String  __  String  __  DateTime:?  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.NotificationObligation",
        title : data[0],
        message : data[2],
        contract : data[4],
        promisor : data[6],
        promisee : data[8],
        deadline : data[10],
        eventId : data[12],
        timestamp : data[14]
    };
}
%}


Payload -> AccordContract  __  Request  __  AccordContractState:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Payload",
        contract : data[0],
        request : data[2],
        state : data[4]
    };
}
%}


Success -> Response  __  AccordContractState  __  Event:+ 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Success",
        response : data[0],
        state : data[2],
        emit : data[4]
    };
}
%}


Failure -> ErrorResponse 

{% ( data ) => {
    return {
        $class: "org.accordproject.cicero.runtime.Failure",
        error : data[0]
    };
}
%}


GeoCoordinates -> PostalAddress:?  __  String:?  __  Double:?  __  Double:?  __  Double:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.GeoCoordinates",
        address : data[0],
        addressCountry : data[2],
        elevation : data[4],
        latitude : data[6],
        longitude : data[8]
    };
}
%}


Place -> PostalAddress:?  __  String:?  __  String:?  __  GeoCoordinates:?  __  String:?  __  String:?  __  String:?  __  String:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Place",
        address : data[0],
        branchCode : data[2],
        faxNumber : data[4],
        geo : data[6],
        globalLocationNumber : data[8],
        mapUrl : data[10],
        isicsV4 : data[12],
        telephone : data[14]
    };
}
%}


Country -> String  __  CountryCodeISOAlpha2 

{% ( data ) => {
    return {
        $class: "org.accordproject.geo.Country",
        name : data[0],
        optional : data[2]
    };
}
%}


CountryCodeISOAlpha2 -> "AD" {% id %} | "AE" {% id %} | "AF" {% id %} | "AG" {% id %} | "AI" {% id %} | "AL" {% id %} | "AM" {% id %} | "AO" {% id %} | "AQ" {% id %} | "AR" {% id %} | "AS" {% id %} | "AT" {% id %} | "AU" {% id %} | "AW" {% id %} | "AX" {% id %} | "AZ" {% id %} | "BA" {% id %} | "BB" {% id %} | "BD" {% id %} | "BE" {% id %} | "BF" {% id %} | "BG" {% id %} | "BH" {% id %} | "BI" {% id %} | "BJ" {% id %} | "BL" {% id %} | "BM" {% id %} | "BN" {% id %} | "BO" {% id %} | "BQ" {% id %} | "BR" {% id %} | "BS" {% id %} | "BT" {% id %} | "BV" {% id %} | "BW" {% id %} | "BY" {% id %} | "BZ" {% id %} | "CA" {% id %} | "CC" {% id %} | "CD" {% id %} | "CF" {% id %} | "CG" {% id %} | "CH" {% id %} | "CI" {% id %} | "CK" {% id %} | "CL" {% id %} | "CM" {% id %} | "CN" {% id %} | "CO" {% id %} | "CR" {% id %} | "CU" {% id %} | "CV" {% id %} | "CW" {% id %} | "CX" {% id %} | "CY" {% id %} | "CZ" {% id %} | "DE" {% id %} | "DJ" {% id %} | "DK" {% id %} | "DM" {% id %} | "DO" {% id %} | "DZ" {% id %} | "EC" {% id %} | "EE" {% id %} | "EG" {% id %} | "EH" {% id %} | "ER" {% id %} | "ES" {% id %} | "ET" {% id %} | "FI" {% id %} | "FJ" {% id %} | "FK" {% id %} | "FM" {% id %} | "FO" {% id %} | "FR" {% id %} | "GA" {% id %} | "GB" {% id %} | "GD" {% id %} | "GE" {% id %} | "GF" {% id %} | "GG" {% id %} | "GH" {% id %} | "GI" {% id %} | "GL" {% id %} | "GM" {% id %} | "GN" {% id %} | "GP" {% id %} | "GQ" {% id %} | "GR" {% id %} | "GS" {% id %} | "GT" {% id %} | "GU" {% id %} | "GW" {% id %} | "GY" {% id %} | "HK" {% id %} | "HM" {% id %} | "HN" {% id %} | "HR" {% id %} | "HT" {% id %} | "HU" {% id %} | "ID" {% id %} | "IE" {% id %} | "IL" {% id %} | "IM" {% id %} | "IN" {% id %} | "IO" {% id %} | "IQ" {% id %} | "IR" {% id %} | "IS" {% id %} | "IT" {% id %} | "JE" {% id %} | "JM" {% id %} | "JO" {% id %} | "JP" {% id %} | "KE" {% id %} | "KG" {% id %} | "KH" {% id %} | "KI" {% id %} | "KM" {% id %} | "KN" {% id %} | "KP" {% id %} | "KR" {% id %} | "KW" {% id %} | "KY" {% id %} | "KZ" {% id %} | "LA" {% id %} | "LB" {% id %} | "LC" {% id %} | "LI" {% id %} | "LK" {% id %} | "LR" {% id %} | "LS" {% id %} | "LT" {% id %} | "LU" {% id %} | "LV" {% id %} | "LY" {% id %} | "MA" {% id %} | "MC" {% id %} | "MD" {% id %} | "ME" {% id %} | "MF" {% id %} | "MG" {% id %} | "MH" {% id %} | "MK" {% id %} | "ML" {% id %} | "MM" {% id %} | "MN" {% id %} | "MO" {% id %} | "MP" {% id %} | "MQ" {% id %} | "MR" {% id %} | "MS" {% id %} | "MT" {% id %} | "MU" {% id %} | "MV" {% id %} | "MW" {% id %} | "MX" {% id %} | "MY" {% id %} | "MZ" {% id %} | "NA" {% id %} | "NC" {% id %} | "NE" {% id %} | "NF" {% id %} | "NG" {% id %} | "NI" {% id %} | "NL" {% id %} | "NO" {% id %} | "NP" {% id %} | "NR" {% id %} | "NU" {% id %} | "NZ" {% id %} | "OM" {% id %} | "PA" {% id %} | "PE" {% id %} | "PF" {% id %} | "PG" {% id %} | "PH" {% id %} | "PK" {% id %} | "PL" {% id %} | "PM" {% id %} | "PN" {% id %} | "PR" {% id %} | "PS" {% id %} | "PT" {% id %} | "PW" {% id %} | "PY" {% id %} | "QA" {% id %} | "RE" {% id %} | "RO" {% id %} | "RS" {% id %} | "RU" {% id %} | "RW" {% id %} | "SA" {% id %} | "SB" {% id %} | "SC" {% id %} | "SD" {% id %} | "SE" {% id %} | "SG" {% id %} | "SH" {% id %} | "SI" {% id %} | "SJ" {% id %} | "SK" {% id %} | "SL" {% id %} | "SM" {% id %} | "SN" {% id %} | "SO" {% id %} | "SR" {% id %} | "SS" {% id %} | "ST" {% id %} | "SV" {% id %} | "SX" {% id %} | "SY" {% id %} | "SZ" {% id %} | "TC" {% id %} | "TD" {% id %} | "TF" {% id %} | "TG" {% id %} | "TH" {% id %} | "TJ" {% id %} | "TK" {% id %} | "TL" {% id %} | "TM" {% id %} | "TN" {% id %} | "TO" {% id %} | "TR" {% id %} | "TT" {% id %} | "TV" {% id %} | "TW" {% id %} | "TZ" {% id %} | "UA" {% id %} | "UG" {% id %} | "UM" {% id %} | "US" {% id %} | "UY" {% id %} | "UZ" {% id %} | "VA" {% id %} | "VC" {% id %} | "VE" {% id %} | "VG" {% id %} | "VI" {% id %} | "VN" {% id %} | "VU" {% id %} | "WF" {% id %} | "WS" {% id %} | "YE" {% id %} | "YT" {% id %} | "ZA" {% id %} | "ZM" {% id %} | "ZW" {% id %} 


CryptoMonetaryAmount -> Double  __  CryptoCurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.CryptoMonetaryAmount",
        doubleValue : data[0],
        cryptoCurrencyCode : data[2]
    };
}
%}


CryptoCurrencyCode -> "ADA" {% id %} | "BCH" {% id %} | "BTC" {% id %} | "DASH" {% id %} | "EOS" {% id %} | "ETC" {% id %} | "ETH" {% id %} | "LTC" {% id %} | "NEO" {% id %} | "XLM" {% id %} | "XMR" {% id %} | "XRP" {% id %} | "ZEC" {% id %} 


MonetaryAmount -> Double  __  CurrencyCode 

{% ( data ) => {
    return {
        $class: "org.accordproject.money.MonetaryAmount",
        doubleValue : data[0],
        currencyCode : data[2]
    };
}
%}


CurrencyCode -> "AED" {% id %} | "AFN" {% id %} | "ALL" {% id %} | "AMD" {% id %} | "ANG" {% id %} | "AOA" {% id %} | "ARS" {% id %} | "AUD" {% id %} | "AWG" {% id %} | "AZN" {% id %} | "BAM" {% id %} | "BBD" {% id %} | "BDT" {% id %} | "BGN" {% id %} | "BHD" {% id %} | "BIF" {% id %} | "BMD" {% id %} | "BND" {% id %} | "BOB" {% id %} | "BOV" {% id %} | "BRL" {% id %} | "BSD" {% id %} | "BTN" {% id %} | "BWP" {% id %} | "BYN" {% id %} | "BZD" {% id %} | "CAD" {% id %} | "CDF" {% id %} | "CHE" {% id %} | "CHF" {% id %} | "CHW" {% id %} | "CLF" {% id %} | "CLP" {% id %} | "CNY" {% id %} | "COP" {% id %} | "COU" {% id %} | "CRC" {% id %} | "CUC" {% id %} | "CUP" {% id %} | "CVE" {% id %} | "CZK" {% id %} | "DJF" {% id %} | "DKK" {% id %} | "DOP" {% id %} | "DZD" {% id %} | "EGP" {% id %} | "ERN" {% id %} | "ETB" {% id %} | "EUR" {% id %} | "FJD" {% id %} | "FKP" {% id %} | "GBP" {% id %} | "GEL" {% id %} | "GHS" {% id %} | "GIP" {% id %} | "GMD" {% id %} | "GNF" {% id %} | "GTQ" {% id %} | "GYD" {% id %} | "HKD" {% id %} | "HNL" {% id %} | "HRK" {% id %} | "HTG" {% id %} | "HUF" {% id %} | "IDR" {% id %} | "ILS" {% id %} | "INR" {% id %} | "IQD" {% id %} | "IRR" {% id %} | "ISK" {% id %} | "JMD" {% id %} | "JOD" {% id %} | "JPY" {% id %} | "KES" {% id %} | "KGS" {% id %} | "KHR" {% id %} | "KMF" {% id %} | "KPW" {% id %} | "KRW" {% id %} | "KWD" {% id %} | "KYD" {% id %} | "KZT" {% id %} | "LAK" {% id %} | "LBP" {% id %} | "LKR" {% id %} | "LRD" {% id %} | "LSL" {% id %} | "LYD" {% id %} | "MAD" {% id %} | "MDL" {% id %} | "MGA" {% id %} | "MKD" {% id %} | "MMK" {% id %} | "MNT" {% id %} | "MOP" {% id %} | "MRU" {% id %} | "MUR" {% id %} | "MVR" {% id %} | "MWK" {% id %} | "MXN" {% id %} | "MXV" {% id %} | "MYR" {% id %} | "MZN" {% id %} | "NAD" {% id %} | "NGN" {% id %} | "NIO" {% id %} | "NOK" {% id %} | "NPR" {% id %} | "NZD" {% id %} | "OMR" {% id %} | "PAB" {% id %} | "PEN" {% id %} | "PGK" {% id %} | "PHP" {% id %} | "PKR" {% id %} | "PLN" {% id %} | "PYG" {% id %} | "QAR" {% id %} | "RON" {% id %} | "RSD" {% id %} | "RUB" {% id %} | "RWF" {% id %} | "SAR" {% id %} | "SBD" {% id %} | "SCR" {% id %} | "SDG" {% id %} | "SEK" {% id %} | "SGD" {% id %} | "SHP" {% id %} | "SLL" {% id %} | "SOS" {% id %} | "SRD" {% id %} | "SSP" {% id %} | "STN" {% id %} | "SVC" {% id %} | "SYP" {% id %} | "SZL" {% id %} | "THB" {% id %} | "TJS" {% id %} | "TMT" {% id %} | "TND" {% id %} | "TOP" {% id %} | "TRY" {% id %} | "TTD" {% id %} | "TWD" {% id %} | "TZS" {% id %} | "UAH" {% id %} | "UGX" {% id %} | "USD" {% id %} | "USN" {% id %} | "UYI" {% id %} | "UYU" {% id %} | "UZS" {% id %} | "VEF" {% id %} | "VND" {% id %} | "VUV" {% id %} | "WST" {% id %} | "XAF" {% id %} | "XAG" {% id %} | "XAU" {% id %} | "XBA" {% id %} | "XBB" {% id %} | "XBC" {% id %} | "XBD" {% id %} | "XCD" {% id %} | "XDR" {% id %} | "XOF" {% id %} | "XPD" {% id %} | "XPF" {% id %} | "XPT" {% id %} | "XSU" {% id %} | "XTS" {% id %} | "XUA" {% id %} | "XXX" {% id %} | "YER" {% id %} | "ZAR" {% id %} | "ZMW" {% id %} | "ZWL" {% id %} 


Organization -> String  __  String:?  __  String:?  __  String:?  __  Place:? 

{% ( data ) => {
    return {
        $class: "org.accordproject.organization.Organization",
        identifier : data[0],
        name : data[2],
        description : data[4],
        duns : data[6],
        place : data[8]
    };
}
%}


anforderung -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.anforderung",
        pay : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


antwort -> String  __  String  __  DateTime 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.antwort",
        output : data[0],
        transactionId : data[2],
        timestamp : data[4]
    };
}
%}


MyContract -> PostalAddress  __  String  __  DateTime  __  DateTime  __  MonetaryAmount  __  Boolean  __  Boolean  __  PaymentClause  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.MyContract",
        address : data[0],
        mieter : data[2],
        erstes_datum : data[4],
        zweites_datum : data[6],
        preis : data[8],
        pleite : data[10],
        erspartes : data[12],
        paymentClause : data[14],
        contractId : data[16],
        parties : data[18]
    };
}
%}


PaymentClause -> String  __  MonetaryAmount  __  String  __  String 

{% ( data ) => {
    return {
        $class: "org.example.mietvertrag01.PaymentClause",
        amountText : data[0],
        amount : data[2],
        paymethod : data[4],
        clauseId : data[6]
    };
}
%}




#
# Grammar: base
#

@{%
    function compact(v) {
        if (Array.isArray(v)) {
            return v.reduce((a, v) => (v === null || v === undefined || (v && v.length === 0) ) ? a : (a.push(v), a), []);
        } else {
            return v;
        }
    }

    function flatten(v) {
        let r;
        if (Array.isArray(v)) {
            r = v.reduce((a,v) => (a.push(...((v && Array.isArray(v)) ? flatten(v) : [v])), a), []);
        } else {
            r = v;
        }
        r = compact(r);
        return r;
        }
%}

NUMBER -> [0-9] 
{% (d) => {return parseInt(d[0]);}%}

DOUBLE_NUMBER -> NUMBER NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

MONTH -> DOUBLE_NUMBER
DAY -> DOUBLE_NUMBER
YEAR -> DOUBLE_NUMBER DOUBLE_NUMBER
{% (d) => {return '' + d[0] + d[1]}%}

DATE -> MONTH "/" DAY "/" YEAR
{% (d) => {return '' + d[4] + '-' + d[0] + '-' + d[2]}%}

Word -> [\S]:*
{% (d) => {return d[0].join('');}%}

BRACKET_PHRASE -> "[" Word (__ Word):* "]" {% ((d) => {return d[1] + ' ' + flatten(d[2]).join(" ");}) %}

Any -> "{{" [^]:* "}}"
String -> dqstring {% id %}
Double -> decimal {% id %}
Integer -> int {% id %}
Long -> int {% id %}
Boolean -> "true" {% id %} | "false" {% id %}
DateTime -> DATE  {% id %}

# https://github.com/kach/nearley/blob/master/builtin/number.ne
unsigned_int -> [0-9]:+ {%
    function(d) {
        return parseInt(d[0].join(""));
    }
%}

int -> ("-"|"+"):? [0-9]:+ {%
    function(d) {
        if (d[0]) {
            return parseInt(d[0][0]+d[1].join(""));
        } else {
            return parseInt(d[1].join(""));
        }
    }
%}

unsigned_decimal -> [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            d[0].join("") +
            (d[1] ? "."+d[1][1].join("") : "")
        );
    }
%}

decimal -> "-":? [0-9]:+ ("." [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "")
        );
    }
%}

percentage -> decimal "%" {%
    function(d) {
        return d[0]/100;
    }
%}

jsonfloat -> "-":? [0-9]:+ ("." [0-9]:+):? ([eE] [+-]:? [0-9]:+):? {%
    function(d) {
        return parseFloat(
            (d[0] || "") +
            d[1].join("") +
            (d[2] ? "."+d[2][1].join("") : "") +
            (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
        );
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/string.ne
# Matches various kinds of string literals

# Double-quoted string
dqstring -> "\"" dstrchar:* "\"" {% function(d) {return d[1].join(""); } %}
sqstring -> "'"  sstrchar:* "'"  {% function(d) {return d[1].join(""); } %}
btstring -> "`"  [^`]:*    "`"  {% function(d) {return d[1].join(""); } %}

dstrchar -> [^\"\n] {% id %}
    | "\\" strescape {%
    function(d) {
        return JSON.parse("\""+d.join("")+"\"");
    }
%}

sstrchar -> [^\\'\n] {% id %}
    | "\\" strescape
        {% function(d) { return JSON.parse("\""+d.join("")+"\""); } %}
    | "\\'"
        {% function(d) {return "'"; } %}

strescape -> ["\\/bfnrt] {% id %}
    | "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] {%
    function(d) {
        return d.join("");
    }
%}

# From https://github.com/kach/nearley/blob/master/builtin/whitespace.ne
_  -> wschar:* {% function(d) {return null;} %}
__ -> wschar:+ {% function(d) {return null;} %}

wschar -> [ \t\n\v\f] {% id %}


#
# Grammar: dateTime
#

@{%
function toNumber(d) {
	if(d[1]) {
		return parseInt('' + d[0] + d[1]);
	}
	else {
		return parseInt('' + d[0]);
	}
}
%}

# day ordinal, without leading zero (1 to 31)
D -> [1-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [1-9] {% (d) => {return toNumber(d)}%}

# day ordinal, with leading zero (00 to 31), disallow 00
DD -> [0-3] [0-9] {% (d, location, reject) => 
   {
	   const result = toNumber(d); 
	   if (result === 0 || result > 31) {
		   return reject;
	   }
	   else {
		   return result;
	   }
   } %} | 
      [3] [0-1] {% (d) => {return toNumber(d)}%}

# month ordinal (1 to 12)
M -> [1-9] | [1-9] [0-2] {% (d, location, reject) => 
	{
		const result = toNumber(d); 
		if (result > 12) {
			return reject;
		}
		else {
			return result-1;
		}
	}
%}

# month ordinal, with leading zero (01 to 12)
MM -> [0] [1-9] {% (d) => {return toNumber(d)-1}%} |
      [1] [0-2] {% (d) => {return toNumber(d)-1}%}
	   
# 24 hour (0 to 23)
H -> [0-9]
{% (d) => {return parseInt(d)}%}

# 24 hour, leading zero (00 to 23)
HH -> [0-1] [0-9] {% (d) => {return toNumber(d)}%} |
      [2] [0-3] {% (d) => {return toNumber(d)}%}

# minute, leading zero (00 to 59)
mm -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# second, leading zero (00 to 59)
ss -> [0-5] [0-9] {% (d) => {return toNumber(d)}%}

# milliseconds, 3 digits (000 to 999)
SSS -> [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2])}%}

# year, 4 digits (0000 to 9999)
YYYY ->[0-9] [0-9] [0-9] [0-9]
{% (d) => {return parseInt('' + d[0] + d[1] + d[2] + d[3])}%}

# Timezone Offset
Z -> ("+"|"-") [0-9] [0-9] ":" [0-9] [0-9]
{% (d) => {return d[0] + d[1] + d[2] + ":" + d[4] + d[5]}%}

DateTime -> MM  "/" DD  "/" YYYY
{% (d) => {return {"$class" : "ParsedDateTime",   "months": d[0],   "days": d[2],   "years": d[4]};}%}


#
# Grammar: dateTimeEn
#

# short month name
MMM -> "Jan" {% (d) => {return 0;}%} | 
       "Feb" {% (d) => {return 1;}%} | 
	   "Mar" {% (d) => {return 2;}%} |
	   "Apr" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "Jun" {% (d) => {return 5;}%} |
	   "Jul" {% (d) => {return 6;}%} |
	   "Aug" {% (d) => {return 7;}%} |
	   "Sep" {% (d) => {return 8;}%} |
	   "Oct" {% (d) => {return 9;}%} |
	   "Nov" {% (d) => {return 10;}%} |
	   "Dec" {% (d) => {return 11;}%}

# long month name
MMMM -> "January" {% (d) => {return 0;}%} | 
       "February" {% (d) => {return 1;}%} | 
	   "March" {% (d) => {return 2;}%} |
	   "April" {% (d) => {return 3;}%} | 
	   "May" {% (d) => {return 4;}%} |
	   "June" {% (d) => {return 5;}%} |
	   "July" {% (d) => {return 6;}%} |
	   "August" {% (d) => {return 7;}%} |
	   "September" {% (d) => {return 8;}%} |
	   "October" {% (d) => {return 9;}%} |
	   "November" {% (d) => {return 10;}%} |
	   "December" {% (d) => {return 11;}%}



9:55:47 - [34mdebug[39m: fromDirectory
9:55:47 - [34mdebug[39m: fromDirectory
9:55:47 - [34mdebug[39m: loadFilesContents
9:55:47 - [34mdebug[39m: loadFilesContents
9:55:47 - [34mdebug[39m: loadFilesContents
9:55:47 - [34mdebug[39m: loadFilesContents
9:55:47 - [34mdebug[39m: loadFilesContents
9:55:47 - [34mdebug[39m: loadFileContents
9:55:47 - [34mdebug[39m: loadFilesContents
9:55:48 - [34mdebug[39m: Result of parsing: undefined
9:55:48 - [31merror[39m: Parsing clause text returned a null AST. This may mean the text is valid, but not complete.
11:26:59 - [32minfo[39m: Using current directory as template folder
11:26:59 - [32minfo[39m: Loading a default text/sample.md file.
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileBuffer
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: fromDirectory
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: fromDirectory
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFileContents
11:26:59 - [34mdebug[39m: loadFilesContents
11:27:04 - [34mdebug[39m: fromDirectory
11:27:04 - [34mdebug[39m: loadFileContents
11:27:04 - [34mdebug[39m: fromDirectory
11:27:04 - [34mdebug[39m: fromDirectory
11:27:04 - [34mdebug[39m: loadFilesContents
11:27:04 - [34mdebug[39m: loadFilesContents
11:27:04 - [34mdebug[39m: loadFilesContents
11:27:04 - [34mdebug[39m: loadFilesContents
11:27:04 - [34mdebug[39m: loadFilesContents
11:27:04 - [34mdebug[39m: loadFileContents
11:27:04 - [34mdebug[39m: loadFilesContents
11:27:05 - [31merror[39m: Parse error at line 5 column 1
{{"mieter kann nicht zahlen"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
ParseException: Parse error at line 5 column 1
{{"mieter kann nicht zahlen"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:28:24 - [32minfo[39m: Using current directory as template folder
11:28:24 - [32minfo[39m: Loading a default text/sample.md file.
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileBuffer
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: fromDirectory
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: fromDirectory
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFileContents
11:28:24 - [34mdebug[39m: loadFilesContents
11:28:29 - [34mdebug[39m: fromDirectory
11:28:29 - [34mdebug[39m: loadFileContents
11:28:29 - [34mdebug[39m: fromDirectory
11:28:29 - [34mdebug[39m: fromDirectory
11:28:29 - [34mdebug[39m: loadFilesContents
11:28:29 - [34mdebug[39m: loadFilesContents
11:28:29 - [34mdebug[39m: loadFilesContents
11:28:29 - [34mdebug[39m: loadFilesContents
11:28:29 - [34mdebug[39m: loadFilesContents
11:28:29 - [34mdebug[39m: loadFileContents
11:28:29 - [34mdebug[39m: loadFilesContents
11:28:30 - [31merror[39m: Parse error at line 5 column 1
"mieter kann nicht zahlen"
^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
ParseException: Parse error at line 5 column 1
"mieter kann nicht zahlen"
^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:34:30 - [32minfo[39m: Using current directory as template folder
11:34:30 - [32minfo[39m: Loading a default text/sample.md file.
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileBuffer
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: fromDirectory
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: fromDirectory
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFileContents
11:34:30 - [34mdebug[39m: loadFilesContents
11:34:35 - [34mdebug[39m: fromDirectory
11:34:35 - [34mdebug[39m: loadFileContents
11:34:35 - [34mdebug[39m: fromDirectory
11:34:35 - [34mdebug[39m: fromDirectory
11:34:35 - [34mdebug[39m: loadFilesContents
11:34:35 - [34mdebug[39m: loadFilesContents
11:34:35 - [34mdebug[39m: loadFilesContents
11:34:35 - [34mdebug[39m: loadFilesContents
11:34:35 - [34mdebug[39m: loadFilesContents
11:34:35 - [34mdebug[39m: loadFileContents
11:34:35 - [34mdebug[39m: loadFilesContents
11:34:37 - [31merror[39m: Parse error at line 5 column 1
{{"mieter kann nicht zahlen"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
ParseException: Parse error at line 5 column 1
{{"mieter kann nicht zahlen"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:42:03 - [32minfo[39m: Using current directory as template folder
11:42:03 - [32minfo[39m: Loading a default text/sample.md file.
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileBuffer
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: fromDirectory
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: fromDirectory
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFileContents
11:42:03 - [34mdebug[39m: loadFilesContents
11:42:09 - [34mdebug[39m: fromDirectory
11:42:09 - [34mdebug[39m: loadFileContents
11:42:09 - [34mdebug[39m: fromDirectory
11:42:09 - [34mdebug[39m: fromDirectory
11:42:09 - [34mdebug[39m: loadFilesContents
11:42:09 - [34mdebug[39m: loadFilesContents
11:42:09 - [34mdebug[39m: loadFilesContents
11:42:09 - [34mdebug[39m: loadFilesContents
11:42:09 - [34mdebug[39m: loadFilesContents
11:42:09 - [34mdebug[39m: loadFileContents
11:42:09 - [34mdebug[39m: loadFilesContents
11:42:10 - [31merror[39m: Parse error at line 6 column 1
{{"mieter kann nicht zahlen"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
ParseException: Parse error at line 6 column 1
{{"mieter kann nicht zahlen"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: A computed variable {{ ... }}
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:42:50 - [32minfo[39m: Using current directory as template folder
11:42:50 - [32minfo[39m: Loading a default text/sample.md file.
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileBuffer
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: fromDirectory
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: fromDirectory
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFileContents
11:42:51 - [34mdebug[39m: loadFilesContents
11:42:56 - [34mdebug[39m: fromDirectory
11:42:56 - [34mdebug[39m: loadFileContents
11:42:56 - [34mdebug[39m: fromDirectory
11:42:56 - [34mdebug[39m: fromDirectory
11:42:56 - [34mdebug[39m: loadFilesContents
11:42:56 - [34mdebug[39m: loadFilesContents
11:42:56 - [34mdebug[39m: loadFilesContents
11:42:56 - [34mdebug[39m: loadFilesContents
11:42:56 - [34mdebug[39m: loadFilesContents
11:42:56 - [34mdebug[39m: loadFileContents
11:42:56 - [34mdebug[39m: loadFilesContents
11:42:57 - [31merror[39m: Parse error at line 10 column 5
----
    
Expected: '

{{#clause '
ParseException: Parse error at line 10 column 5
----
    
Expected: '

{{#clause '
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:43:28 - [32minfo[39m: Using current directory as template folder
11:43:28 - [32minfo[39m: Loading a default text/sample.md file.
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileBuffer
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: fromDirectory
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: fromDirectory
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFileContents
11:43:28 - [34mdebug[39m: loadFilesContents
11:43:34 - [34mdebug[39m: fromDirectory
11:43:34 - [34mdebug[39m: loadFileContents
11:43:34 - [34mdebug[39m: fromDirectory
11:43:34 - [34mdebug[39m: fromDirectory
11:43:34 - [34mdebug[39m: loadFilesContents
11:43:34 - [34mdebug[39m: loadFilesContents
11:43:34 - [34mdebug[39m: loadFilesContents
11:43:34 - [34mdebug[39m: loadFilesContents
11:43:34 - [34mdebug[39m: loadFilesContents
11:43:34 - [34mdebug[39m: loadFileContents
11:43:34 - [34mdebug[39m: loadFilesContents
11:43:35 - [31merror[39m: Parse error at line 10 column 5
----
    
Expected: '

{{#clause '
ParseException: Parse error at line 10 column 5
----
    
Expected: '

{{#clause '
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:44:04 - [32minfo[39m: Using current directory as template folder
11:44:04 - [32minfo[39m: Loading a default text/sample.md file.
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileBuffer
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: fromDirectory
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: fromDirectory
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFileContents
11:44:04 - [34mdebug[39m: loadFilesContents
11:44:10 - [34mdebug[39m: fromDirectory
11:44:10 - [34mdebug[39m: loadFileContents
11:44:10 - [34mdebug[39m: fromDirectory
11:44:10 - [34mdebug[39m: fromDirectory
11:44:10 - [34mdebug[39m: loadFilesContents
11:44:10 - [34mdebug[39m: loadFilesContents
11:44:10 - [34mdebug[39m: loadFilesContents
11:44:10 - [34mdebug[39m: loadFilesContents
11:44:10 - [34mdebug[39m: loadFilesContents
11:44:10 - [34mdebug[39m: loadFileContents
11:44:10 - [34mdebug[39m: loadFilesContents
11:44:11 - [31merror[39m: Parse error at line 10 column 5
----
    
Expected: '

{{#clause '
ParseException: Parse error at line 10 column 5
----
    
Expected: '

{{#clause '
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
11:46:35 - [32minfo[39m: Using current directory as template folder
11:46:35 - [32minfo[39m: Loading a default data.json file.
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileBuffer
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: fromDirectory
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: fromDirectory
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFileContents
11:46:35 - [34mdebug[39m: loadFilesContents
11:46:41 - [34mdebug[39m: fromDirectory
11:46:41 - [34mdebug[39m: loadFileContents
11:46:41 - [34mdebug[39m: fromDirectory
11:46:41 - [34mdebug[39m: fromDirectory
11:46:41 - [34mdebug[39m: loadFilesContents
11:46:41 - [34mdebug[39m: loadFilesContents
11:46:41 - [34mdebug[39m: loadFilesContents
11:46:41 - [34mdebug[39m: loadFilesContents
11:46:41 - [34mdebug[39m: loadFilesContents
11:46:41 - [34mdebug[39m: loadFileContents
11:46:41 - [34mdebug[39m: loadFilesContents
11:46:42 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}}
11:46:42 - [34mdebug[39m: Engine processing clause formula_a6b8ada36b0fb03c4aa3f929bc37ed217a0132fdc4bc05091e5020023e0f0c1e with state org.accordproject.cicero.contract.AccordContractState
11:46:42 - [34mdebug[39m: Calling eval with context [object Object]
11:46:42 - [32minfo[39m: Creating file: ./text/sample.md
11:46:42 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
true
{{%"mieter kann nicht zahlen"%}}
Der Mieter kann doch noch zahlen.

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
11:46:56 - [32minfo[39m: Using current directory as template folder
11:46:56 - [32minfo[39m: Loading a default text/sample.md file.
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileBuffer
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: fromDirectory
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: fromDirectory
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFileContents
11:46:56 - [34mdebug[39m: loadFilesContents
11:47:01 - [34mdebug[39m: fromDirectory
11:47:01 - [34mdebug[39m: loadFileContents
11:47:01 - [34mdebug[39m: fromDirectory
11:47:01 - [34mdebug[39m: fromDirectory
11:47:01 - [34mdebug[39m: loadFilesContents
11:47:01 - [34mdebug[39m: loadFilesContents
11:47:01 - [34mdebug[39m: loadFilesContents
11:47:01 - [34mdebug[39m: loadFilesContents
11:47:01 - [34mdebug[39m: loadFilesContents
11:47:01 - [34mdebug[39m: loadFileContents
11:47:01 - [34mdebug[39m: loadFilesContents
11:47:02 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"759d82ac-32cd-4ce8-bc16-478d0be5dc34"},"contractId":"ddccd021-2170-4d6f-8464-58d9e5011c04"}
11:47:02 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m759d82ac-32cd-4ce8-bc16-478d0be5dc34[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mddccd021-2170-4d6f-8464-58d9e5011c04[39m[33m"[39m
[33m}[39m
11:47:42 - [32minfo[39m: Using current directory as template folder
11:47:42 - [32minfo[39m: Loading a default text/sample.md file.
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileBuffer
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: fromDirectory
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: fromDirectory
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFileContents
11:47:42 - [34mdebug[39m: loadFilesContents
11:47:48 - [34mdebug[39m: fromDirectory
11:47:48 - [34mdebug[39m: loadFileContents
11:47:48 - [34mdebug[39m: fromDirectory
11:47:48 - [34mdebug[39m: fromDirectory
11:47:48 - [34mdebug[39m: loadFilesContents
11:47:48 - [34mdebug[39m: loadFilesContents
11:47:48 - [34mdebug[39m: loadFilesContents
11:47:48 - [34mdebug[39m: loadFilesContents
11:47:48 - [34mdebug[39m: loadFilesContents
11:47:48 - [34mdebug[39m: loadFileContents
11:47:48 - [34mdebug[39m: loadFilesContents
11:47:49 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#b5b31d27-0862-4bf8-b828-47866a3fc2a2 missing required field pleite
ValidationException: Instance org.example.mietvertrag01.MyContract#b5b31d27-0862-4bf8-b828-47866a3fc2a2 missing required field pleite
    at Function.reportMissingRequiredProperty (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer\resourcevalidator.js:482:15)
    at ResourceValidator.visitClassDeclaration (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer\resourcevalidator.js:180:39)
    at ResourceValidator.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer\resourcevalidator.js:75:25)
    at AssetDeclaration.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\introspect\decorated.js:65:24)
    at ValidatedResource.validate (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\validatedresource.js:124:26)
    at Serializer.fromJSON (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer.js:187:22)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:122:49)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
12:09:53 - [32minfo[39m: Using current directory as template folder
12:09:53 - [32minfo[39m: Loading a default text/sample.md file.
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileBuffer
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: fromDirectory
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: fromDirectory
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFileContents
12:09:53 - [34mdebug[39m: loadFilesContents
12:09:58 - [34mdebug[39m: fromDirectory
12:09:58 - [34mdebug[39m: loadFileContents
12:09:58 - [34mdebug[39m: fromDirectory
12:09:58 - [34mdebug[39m: fromDirectory
12:09:58 - [34mdebug[39m: loadFilesContents
12:09:58 - [34mdebug[39m: loadFilesContents
12:09:58 - [34mdebug[39m: loadFilesContents
12:09:58 - [34mdebug[39m: loadFilesContents
12:09:58 - [34mdebug[39m: loadFilesContents
12:09:58 - [34mdebug[39m: loadFileContents
12:09:58 - [34mdebug[39m: loadFilesContents
12:09:59 - [31merror[39m: Instance org.example.mietvertrag01.MyContract#f661d051-f046-462d-b6d6-7a299419c926 missing required field pleite
ValidationException: Instance org.example.mietvertrag01.MyContract#f661d051-f046-462d-b6d6-7a299419c926 missing required field pleite
    at Function.reportMissingRequiredProperty (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer\resourcevalidator.js:482:15)
    at ResourceValidator.visitClassDeclaration (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer\resourcevalidator.js:180:39)
    at ResourceValidator.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer\resourcevalidator.js:75:25)
    at AssetDeclaration.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\introspect\decorated.js:65:24)
    at ValidatedResource.validate (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\validatedresource.js:124:26)
    at Serializer.fromJSON (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\serializer.js:187:22)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:122:49)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
12:11:30 - [32minfo[39m: Using current directory as template folder
12:11:30 - [32minfo[39m: Loading a default text/sample.md file.
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileBuffer
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: fromDirectory
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: fromDirectory
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFileContents
12:11:30 - [34mdebug[39m: loadFilesContents
12:11:30 - [31merror[39m: Expected "[]", comment, end of line, identifier, or whitespace but "?" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 33 column 12
ParseException: Expected "[]", comment, end of line, identifier, or whitespace but "?" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 33 column 12
    at new ModelFile (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\introspect\modelfile.js:79:23)
    at APModelManager.addModelFiles (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\modelmanager.js:249:29)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:211:34
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
12:12:29 - [32minfo[39m: Using current directory as template folder
12:12:29 - [32minfo[39m: Loading a default text/sample.md file.
12:12:29 - [34mdebug[39m: loadFileContents
12:12:29 - [34mdebug[39m: loadFileBuffer
12:12:29 - [34mdebug[39m: loadFileContents
12:12:29 - [34mdebug[39m: loadFileContents
12:12:29 - [34mdebug[39m: fromDirectory
12:12:29 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: fromDirectory
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFileContents
12:12:30 - [34mdebug[39m: loadFilesContents
12:12:30 - [31merror[39m: Expected "[]", comment, end of line, identifier, or whitespace but "?" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 33 column 12
ParseException: Expected "[]", comment, end of line, identifier, or whitespace but "?" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 33 column 12
    at new ModelFile (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\introspect\modelfile.js:79:23)
    at APModelManager.addModelFiles (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\modelmanager.js:249:29)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:211:34
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
12:12:42 - [32minfo[39m: Using current directory as template folder
12:12:42 - [32minfo[39m: Loading a default text/sample.md file.
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileBuffer
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: fromDirectory
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: fromDirectory
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFileContents
12:12:42 - [34mdebug[39m: loadFilesContents
12:12:42 - [31merror[39m: Expected "[]", comment, end of line, identifier, or whitespace but "?" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 33 column 12
ParseException: Expected "[]", comment, end of line, identifier, or whitespace but "?" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 33 column 12
    at new ModelFile (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\introspect\modelfile.js:79:23)
    at APModelManager.addModelFiles (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\modelmanager.js:249:29)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:211:34
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
12:16:13 - [32minfo[39m: Using current directory as template folder
12:16:13 - [32minfo[39m: Loading a default text/sample.md file.
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileBuffer
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: fromDirectory
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: fromDirectory
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFileContents
12:16:13 - [34mdebug[39m: loadFilesContents
12:16:19 - [34mdebug[39m: fromDirectory
12:16:19 - [34mdebug[39m: loadFileContents
12:16:19 - [34mdebug[39m: fromDirectory
12:16:19 - [34mdebug[39m: fromDirectory
12:16:19 - [34mdebug[39m: loadFilesContents
12:16:19 - [34mdebug[39m: loadFilesContents
12:16:19 - [34mdebug[39m: loadFilesContents
12:16:19 - [34mdebug[39m: loadFilesContents
12:16:19 - [34mdebug[39m: loadFilesContents
12:16:19 - [34mdebug[39m: loadFileContents
12:16:19 - [34mdebug[39m: loadFilesContents
12:16:20 - [31merror[39m: Parse error at line 6 column 1
Der Mieter kann doch noch zahlen.
^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: ' mieter kann nicht zahlen' or 'Mieter zahlt fristgerecht'
ParseException: Parse error at line 6 column 1
Der Mieter kann doch noch zahlen.
^^^^^^^^^^^^^^^^^^^^^^^^^
Expected: ' mieter kann nicht zahlen' or 'Mieter zahlt fristgerecht'
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:124:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
12:16:49 - [32minfo[39m: Using current directory as template folder
12:16:49 - [32minfo[39m: Loading a default data.json file.
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileBuffer
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: fromDirectory
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: fromDirectory
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFileContents
12:16:49 - [34mdebug[39m: loadFilesContents
12:16:54 - [34mdebug[39m: fromDirectory
12:16:54 - [34mdebug[39m: loadFileContents
12:16:54 - [34mdebug[39m: fromDirectory
12:16:54 - [34mdebug[39m: fromDirectory
12:16:54 - [34mdebug[39m: loadFilesContents
12:16:54 - [34mdebug[39m: loadFilesContents
12:16:54 - [34mdebug[39m: loadFilesContents
12:16:54 - [34mdebug[39m: loadFilesContents
12:16:54 - [34mdebug[39m: loadFilesContents
12:16:54 - [34mdebug[39m: loadFileContents
12:16:54 - [34mdebug[39m: loadFilesContents
12:16:55 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}}
12:16:55 - [32minfo[39m: Creating file: ./text/sample.md
12:16:55 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.

 mieter kann nicht zahlen
Der Mieter kann doch noch zahlen.

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
12:17:29 - [32minfo[39m: Using current directory as template folder
12:17:29 - [32minfo[39m: Loading a default data.json file.
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileBuffer
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: fromDirectory
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: fromDirectory
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFileContents
12:17:29 - [34mdebug[39m: loadFilesContents
12:17:34 - [34mdebug[39m: fromDirectory
12:17:34 - [34mdebug[39m: loadFileContents
12:17:34 - [34mdebug[39m: fromDirectory
12:17:34 - [34mdebug[39m: fromDirectory
12:17:34 - [34mdebug[39m: loadFilesContents
12:17:34 - [34mdebug[39m: loadFilesContents
12:17:34 - [34mdebug[39m: loadFilesContents
12:17:34 - [34mdebug[39m: loadFilesContents
12:17:34 - [34mdebug[39m: loadFilesContents
12:17:34 - [34mdebug[39m: loadFileContents
12:17:34 - [34mdebug[39m: loadFilesContents
12:17:35 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}}
12:17:35 - [32minfo[39m: Creating file: ./text/sample.md
12:17:35 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.

Mieter kann nicht zahlen
Der Mieter kann doch noch zahlen.

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
12:17:45 - [32minfo[39m: Using current directory as template folder
12:17:45 - [32minfo[39m: Loading a default text/sample.md file.
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileBuffer
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: fromDirectory
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: fromDirectory
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFileContents
12:17:45 - [34mdebug[39m: loadFilesContents
12:17:51 - [34mdebug[39m: fromDirectory
12:17:51 - [34mdebug[39m: loadFileContents
12:17:51 - [34mdebug[39m: fromDirectory
12:17:51 - [34mdebug[39m: fromDirectory
12:17:51 - [34mdebug[39m: loadFilesContents
12:17:51 - [34mdebug[39m: loadFilesContents
12:17:51 - [34mdebug[39m: loadFilesContents
12:17:51 - [34mdebug[39m: loadFilesContents
12:17:51 - [34mdebug[39m: loadFilesContents
12:17:51 - [34mdebug[39m: loadFileContents
12:17:51 - [34mdebug[39m: loadFilesContents
12:17:52 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"4b59a93f-c4a8-4b00-b4c8-c6ab080e5520"},"contractId":"c0e5a483-1b7a-4ddc-adcb-e58c0366fa9c"}
12:17:52 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m4b59a93f-c4a8-4b00-b4c8-c6ab080e5520[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mc0e5a483-1b7a-4ddc-adcb-e58c0366fa9c[39m[33m"[39m
[33m}[39m
12:18:07 - [32minfo[39m: Using current directory as template folder
12:18:07 - [32minfo[39m: Loading a default text/sample.md file.
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileBuffer
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: fromDirectory
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: fromDirectory
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFileContents
12:18:07 - [34mdebug[39m: loadFilesContents
12:18:13 - [34mdebug[39m: fromDirectory
12:18:13 - [34mdebug[39m: loadFileContents
12:18:13 - [34mdebug[39m: fromDirectory
12:18:13 - [34mdebug[39m: fromDirectory
12:18:13 - [34mdebug[39m: loadFilesContents
12:18:13 - [34mdebug[39m: loadFilesContents
12:18:13 - [34mdebug[39m: loadFilesContents
12:18:13 - [34mdebug[39m: loadFilesContents
12:18:13 - [34mdebug[39m: loadFilesContents
12:18:13 - [34mdebug[39m: loadFileContents
12:18:13 - [34mdebug[39m: loadFilesContents
12:18:14 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"48359705-a96a-451a-af25-e3c631ff51ed"},"contractId":"c6315070-b316-4612-be09-6317c7380dac"}
12:18:14 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m48359705-a96a-451a-af25-e3c631ff51ed[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mc6315070-b316-4612-be09-6317c7380dac[39m[33m"[39m
[33m}[39m
12:18:56 - [32minfo[39m: Using current directory as template folder
12:18:56 - [32minfo[39m: Loading a default text/sample.md file.
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileBuffer
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: fromDirectory
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: fromDirectory
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFileContents
12:18:56 - [34mdebug[39m: loadFilesContents
12:19:02 - [34mdebug[39m: fromDirectory
12:19:02 - [34mdebug[39m: loadFileContents
12:19:02 - [34mdebug[39m: fromDirectory
12:19:02 - [34mdebug[39m: fromDirectory
12:19:02 - [34mdebug[39m: loadFilesContents
12:19:02 - [34mdebug[39m: loadFilesContents
12:19:02 - [34mdebug[39m: loadFilesContents
12:19:02 - [34mdebug[39m: loadFilesContents
12:19:02 - [34mdebug[39m: loadFilesContents
12:19:02 - [34mdebug[39m: loadFileContents
12:19:02 - [34mdebug[39m: loadFilesContents
12:19:03 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"097c2ee7-fc7d-4428-93ba-4f93d827b7dd"},"contractId":"27dcca41-82bb-4250-8558-053619ff9b2f"}
12:19:03 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mfalse[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m097c2ee7-fc7d-4428-93ba-4f93d827b7dd[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m27dcca41-82bb-4250-8558-053619ff9b2f[39m[33m"[39m
[33m}[39m
12:21:34 - [32minfo[39m: Using current directory as template folder
12:21:34 - [32minfo[39m: Loading a default data.json file.
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileBuffer
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: fromDirectory
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: fromDirectory
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFileContents
12:21:34 - [34mdebug[39m: loadFilesContents
12:21:39 - [34mdebug[39m: fromDirectory
12:21:39 - [34mdebug[39m: loadFileContents
12:21:39 - [34mdebug[39m: fromDirectory
12:21:39 - [34mdebug[39m: fromDirectory
12:21:39 - [34mdebug[39m: loadFilesContents
12:21:39 - [34mdebug[39m: loadFilesContents
12:21:39 - [34mdebug[39m: loadFilesContents
12:21:39 - [34mdebug[39m: loadFilesContents
12:21:39 - [34mdebug[39m: loadFilesContents
12:21:39 - [34mdebug[39m: loadFileContents
12:21:39 - [34mdebug[39m: loadFilesContents
12:21:40 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}}
12:21:40 - [34mdebug[39m: Engine processing clause formula_a6b8ada36b0fb03c4aa3f929bc37ed217a0132fdc4bc05091e5020023e0f0c1e with state org.accordproject.cicero.contract.AccordContractState
12:21:40 - [34mdebug[39m: Calling eval with context [object Object]
12:21:40 - [32minfo[39m: Creating file: ./text/sample.md
12:21:40 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
{{%"Mieter zahlt fristgerecht"%}}
Mieter zahlt fristgerecht
Der Mieter kann doch noch zahlen.

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
12:22:01 - [32minfo[39m: Using current directory as template folder
12:22:01 - [32minfo[39m: Loading a default text/sample.md file.
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileBuffer
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: fromDirectory
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: fromDirectory
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFileContents
12:22:01 - [34mdebug[39m: loadFilesContents
12:22:07 - [34mdebug[39m: fromDirectory
12:22:07 - [34mdebug[39m: loadFileContents
12:22:07 - [34mdebug[39m: fromDirectory
12:22:07 - [34mdebug[39m: fromDirectory
12:22:07 - [34mdebug[39m: loadFilesContents
12:22:07 - [34mdebug[39m: loadFilesContents
12:22:07 - [34mdebug[39m: loadFilesContents
12:22:07 - [34mdebug[39m: loadFilesContents
12:22:07 - [34mdebug[39m: loadFilesContents
12:22:07 - [34mdebug[39m: loadFileContents
12:22:07 - [34mdebug[39m: loadFilesContents
12:22:08 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"347f90ee-4bba-4069-8999-3ca1de5d728d"},"contractId":"d95497d3-83af-4fcc-98f5-bb86ebc20bd8"}
12:22:08 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mfalse[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m347f90ee-4bba-4069-8999-3ca1de5d728d[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35md95497d3-83af-4fcc-98f5-bb86ebc20bd8[39m[33m"[39m
[33m}[39m
12:23:17 - [32minfo[39m: Using current directory as template folder
12:23:17 - [32minfo[39m: Loading a default text/sample.md file.
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileBuffer
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: fromDirectory
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: fromDirectory
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFileContents
12:23:17 - [34mdebug[39m: loadFilesContents
12:23:22 - [34mdebug[39m: fromDirectory
12:23:22 - [34mdebug[39m: loadFileContents
12:23:22 - [34mdebug[39m: fromDirectory
12:23:22 - [34mdebug[39m: fromDirectory
12:23:22 - [34mdebug[39m: loadFilesContents
12:23:22 - [34mdebug[39m: loadFilesContents
12:23:22 - [34mdebug[39m: loadFilesContents
12:23:22 - [34mdebug[39m: loadFilesContents
12:23:22 - [34mdebug[39m: loadFilesContents
12:23:22 - [34mdebug[39m: loadFileContents
12:23:22 - [34mdebug[39m: loadFilesContents
12:23:23 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"17af25ce-267c-4786-8ccb-35aab7956803"},"contractId":"ba9788b5-cf12-4f1e-b1e8-550994cb17fe"}
12:23:23 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m17af25ce-267c-4786-8ccb-35aab7956803[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35mba9788b5-cf12-4f1e-b1e8-550994cb17fe[39m[33m"[39m
[33m}[39m
12:23:41 - [32minfo[39m: Using current directory as template folder
12:23:41 - [32minfo[39m: Loading a default text/sample.md file.
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileBuffer
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: fromDirectory
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: fromDirectory
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFileContents
12:23:41 - [34mdebug[39m: loadFilesContents
12:23:47 - [34mdebug[39m: fromDirectory
12:23:47 - [34mdebug[39m: loadFileContents
12:23:47 - [34mdebug[39m: fromDirectory
12:23:47 - [34mdebug[39m: fromDirectory
12:23:47 - [34mdebug[39m: loadFilesContents
12:23:47 - [34mdebug[39m: loadFilesContents
12:23:47 - [34mdebug[39m: loadFilesContents
12:23:47 - [34mdebug[39m: loadFilesContents
12:23:47 - [34mdebug[39m: loadFilesContents
12:23:47 - [34mdebug[39m: loadFileContents
12:23:47 - [34mdebug[39m: loadFilesContents
12:23:48 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"dac5f2aa-a8d5-4190-94a4-5a583fe5e417"},"contractId":"93fed31b-d27b-4c9c-af72-c1adc50c8e1f"}
12:23:48 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mfalse[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35mdac5f2aa-a8d5-4190-94a4-5a583fe5e417[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m93fed31b-d27b-4c9c-af72-c1adc50c8e1f[39m[33m"[39m
[33m}[39m
12:24:23 - [32minfo[39m: Using current directory as template folder
12:24:23 - [32minfo[39m: Loading a default text/sample.md file.
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileBuffer
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: fromDirectory
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: fromDirectory
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFileContents
12:24:24 - [34mdebug[39m: loadFilesContents
12:24:30 - [34mdebug[39m: fromDirectory
12:24:30 - [34mdebug[39m: loadFileContents
12:24:30 - [34mdebug[39m: fromDirectory
12:24:30 - [34mdebug[39m: fromDirectory
12:24:30 - [34mdebug[39m: loadFilesContents
12:24:30 - [34mdebug[39m: loadFilesContents
12:24:30 - [34mdebug[39m: loadFilesContents
12:24:30 - [34mdebug[39m: loadFilesContents
12:24:30 - [34mdebug[39m: loadFilesContents
12:24:30 - [34mdebug[39m: loadFileContents
12:24:30 - [34mdebug[39m: loadFilesContents
12:24:31 - [31merror[39m: Inconsistent values for variable pleite: true and false
ParseException: Inconsistent values for variable pleite: true and false
    at _throwParseException (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:88:11)
    at TemplateMarkTransformer.dataFromCiceroMark (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TemplateMarkTransformer.js:119:13)
    at Clause.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateinstance.js:132:42)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\lib\commands.js:170:24
12:25:29 - [32minfo[39m: Using current directory as template folder
12:25:29 - [32minfo[39m: Loading a default text/sample.md file.
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileBuffer
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: fromDirectory
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: fromDirectory
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFileContents
12:25:29 - [34mdebug[39m: loadFilesContents
12:25:34 - [34mdebug[39m: fromDirectory
12:25:34 - [34mdebug[39m: loadFileContents
12:25:34 - [34mdebug[39m: fromDirectory
12:25:34 - [34mdebug[39m: fromDirectory
12:25:34 - [34mdebug[39m: loadFilesContents
12:25:34 - [34mdebug[39m: loadFilesContents
12:25:34 - [34mdebug[39m: loadFilesContents
12:25:34 - [34mdebug[39m: loadFilesContents
12:25:34 - [34mdebug[39m: loadFilesContents
12:25:34 - [34mdebug[39m: loadFileContents
12:25:34 - [34mdebug[39m: loadFilesContents
12:25:35 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0128062b-8cff-4721-914f-73d9706e173a"},"contractId":"54b27e96-088f-4e43-b561-56efed5c577f"}
12:25:35 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mfalse[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m0128062b-8cff-4721-914f-73d9706e173a[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m54b27e96-088f-4e43-b561-56efed5c577f[39m[33m"[39m
[33m}[39m
12:26:40 - [32minfo[39m: Using current directory as template folder
12:26:40 - [32minfo[39m: Loading a default text/sample.md file.
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileBuffer
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: fromDirectory
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: fromDirectory
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFileContents
12:26:40 - [34mdebug[39m: loadFilesContents
12:26:45 - [34mdebug[39m: fromDirectory
12:26:45 - [34mdebug[39m: loadFileContents
12:26:45 - [34mdebug[39m: fromDirectory
12:26:45 - [34mdebug[39m: fromDirectory
12:26:45 - [34mdebug[39m: loadFilesContents
12:26:45 - [34mdebug[39m: loadFilesContents
12:26:45 - [34mdebug[39m: loadFilesContents
12:26:45 - [34mdebug[39m: loadFilesContents
12:26:45 - [34mdebug[39m: loadFilesContents
12:26:45 - [34mdebug[39m: loadFileContents
12:26:45 - [34mdebug[39m: loadFilesContents
12:26:46 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"1341b1bb-64a8-4887-8c57-98d1f686a450"},"contractId":"35a0d706-603a-488d-8915-6fa026173e6a"}
12:26:46 - [32minfo[39m: Creating file: data2.json
12:26:46 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mfalse[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m1341b1bb-64a8-4887-8c57-98d1f686a450[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m35a0d706-603a-488d-8915-6fa026173e6a[39m[33m"[39m
[33m}[39m
12:45:10 - [32minfo[39m: Using current directory as template folder
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileBuffer
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: fromDirectory
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: fromDirectory
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFileContents
12:45:10 - [34mdebug[39m: loadFilesContents
12:45:15 - [34mdebug[39m: fromDirectory
12:45:15 - [34mdebug[39m: loadFileContents
12:45:15 - [34mdebug[39m: fromDirectory
12:45:15 - [34mdebug[39m: fromDirectory
12:45:15 - [34mdebug[39m: loadFilesContents
12:45:15 - [34mdebug[39m: loadFilesContents
12:45:15 - [34mdebug[39m: loadFilesContents
12:45:15 - [34mdebug[39m: loadFilesContents
12:45:15 - [34mdebug[39m: loadFilesContents
12:45:15 - [34mdebug[39m: loadFileContents
12:45:15 - [34mdebug[39m: loadFilesContents
12:45:16 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","contractId":"e96ee4e9-a3b6-44e9-96c5-b3160f249877","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","clauseId":"3c72cd74-cbcf-49f7-b7f0-314501961b76","paymethod":"überweisen","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"}}}
12:45:16 - [34mdebug[39m: Engine processing clause formula_34a3cdb8027c6746234b097190650b18b0615cce8fd482971b9f83d68e49d104 with state org.accordproject.cicero.contract.AccordContractState
12:45:16 - [34mdebug[39m: Calling eval with context [object Object]
12:45:16 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Mieter zahlt fristgerecht
{{%"Mieter zahlt fristgerecht"%}}
Der Mieter kann doch noch zahlen.

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
12:46:05 - [32minfo[39m: Using current directory as template folder
12:46:05 - [32minfo[39m: Loading a default text/sample.md file.
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileBuffer
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: fromDirectory
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: fromDirectory
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFileContents
12:46:05 - [34mdebug[39m: loadFilesContents
12:46:10 - [34mdebug[39m: fromDirectory
12:46:10 - [34mdebug[39m: loadFileContents
12:46:10 - [34mdebug[39m: fromDirectory
12:46:10 - [34mdebug[39m: fromDirectory
12:46:10 - [34mdebug[39m: loadFilesContents
12:46:10 - [34mdebug[39m: loadFilesContents
12:46:10 - [34mdebug[39m: loadFilesContents
12:46:10 - [34mdebug[39m: loadFilesContents
12:46:10 - [34mdebug[39m: loadFilesContents
12:46:10 - [34mdebug[39m: loadFileContents
12:46:10 - [34mdebug[39m: loadFilesContents
12:46:11 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":true,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
12:46:11 - [32minfo[39m: Creating file: data.json
12:46:11 - [32minfo[39m:
[33m{[39m
  [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.MyContract[39m[33m"[39m[33m,[39m
  [33m"[39m[32maddress[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.address.PostalAddress[39m[33m"[39m[33m,[39m
    [33m"[39m[32mstreetAddress[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblinger Strasse 10[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostalCode[39m[33m"[39m[33m: [39m[33m"[39m[35mBoeblingen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mpostOfficeBoxNumber[39m[33m"[39m[33m: [39m[33m"[39m[35m77777[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressRegion[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressLocality[39m[33m"[39m[33m: [39m[33m"[39m[35mBonn[39m[33m"[39m[33m,[39m
    [33m"[39m[32maddressCountry[39m[33m"[39m[33m: [39m[33m"[39m[35mGermany[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mmieter[39m[33m"[39m[33m: [39m[33m"[39m[35mMax[39m[33m"[39m[33m,[39m
  [33m"[39m[32merstes_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2020-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mzweites_datum[39m[33m"[39m[33m: [39m[33m"[39m[35m2021-08-20T00:00:00.000+02:00[39m[33m"[39m[33m,[39m
  [33m"[39m[32mpreis[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
    [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
    [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mpleite[39m[33m"[39m[33m: [39m[31mfalse[39m[33m,[39m
  [33m"[39m[32merspartes[39m[33m"[39m[33m: [39m[31mtrue[39m[33m,[39m
  [33m"[39m[32mpaymentClause[39m[33m"[39m[33m: [39m[33m{[39m
    [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.example.mietvertrag01.PaymentClause[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamountText[39m[33m"[39m[33m: [39m[33m"[39m[35mvierhundert[39m[33m"[39m[33m,[39m
    [33m"[39m[32mamount[39m[33m"[39m[33m: [39m[33m{[39m
      [33m"[39m[32m$class[39m[33m"[39m[33m: [39m[33m"[39m[35morg.accordproject.money.MonetaryAmount[39m[33m"[39m[33m,[39m
      [33m"[39m[32mdoubleValue[39m[33m"[39m[33m: [39m[36m400[39m[33m,[39m
      [33m"[39m[32mcurrencyCode[39m[33m"[39m[33m: [39m[33m"[39m[35mEUR[39m[33m"[39m
    [33m}[39m[33m,[39m
    [33m"[39m[32mpaymethod[39m[33m"[39m[33m: [39m[33m"[39m[35müberweisen[39m[33m"[39m[33m,[39m
    [33m"[39m[32mclauseId[39m[33m"[39m[33m: [39m[33m"[39m[35m0323edd5-5b07-4bc6-b47a-ac628e0209fb[39m[33m"[39m
  [33m}[39m[33m,[39m
  [33m"[39m[32mcontractId[39m[33m"[39m[33m: [39m[33m"[39m[35m50b860f9-910d-4ab5-bfcf-7c54a07df2f7[39m[33m"[39m
[33m}[39m
14:13:20 - [32minfo[39m: Using current directory as template folder
14:13:20 - [32minfo[39m: Loading a default data.json file.
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileBuffer
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: fromDirectory
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: fromDirectory
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFileContents
14:13:20 - [34mdebug[39m: loadFilesContents
14:13:26 - [34mdebug[39m: fromDirectory
14:13:26 - [34mdebug[39m: loadFileContents
14:13:26 - [34mdebug[39m: fromDirectory
14:13:26 - [34mdebug[39m: fromDirectory
14:13:26 - [34mdebug[39m: loadFilesContents
14:13:26 - [34mdebug[39m: loadFilesContents
14:13:26 - [34mdebug[39m: loadFilesContents
14:13:26 - [34mdebug[39m: loadFilesContents
14:13:26 - [34mdebug[39m: loadFilesContents
14:13:26 - [34mdebug[39m: loadFileContents
14:13:26 - [34mdebug[39m: loadFilesContents
14:13:27 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":false,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
14:13:27 - [34mdebug[39m: Engine processing clause formula_34a3cdb8027c6746234b097190650b18b0615cce8fd482971b9f83d68e49d104 with state org.accordproject.cicero.contract.AccordContractState
14:13:27 - [34mdebug[39m: Calling eval with context [object Object]
14:13:27 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Mieter kann nicht zahlen
{{%"Mieter kann nicht zahlen"%}}
selbst die Sparbüchse ist leer

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
14:13:58 - [32minfo[39m: Using current directory as template folder
14:13:58 - [32minfo[39m: Loading a default data.json file.
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileBuffer
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: fromDirectory
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: fromDirectory
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFileContents
14:13:58 - [34mdebug[39m: loadFilesContents
14:14:03 - [34mdebug[39m: fromDirectory
14:14:03 - [34mdebug[39m: loadFileContents
14:14:03 - [34mdebug[39m: fromDirectory
14:14:03 - [34mdebug[39m: fromDirectory
14:14:03 - [34mdebug[39m: loadFilesContents
14:14:03 - [34mdebug[39m: loadFilesContents
14:14:03 - [34mdebug[39m: loadFilesContents
14:14:03 - [34mdebug[39m: loadFilesContents
14:14:03 - [34mdebug[39m: loadFilesContents
14:14:03 - [34mdebug[39m: loadFileContents
14:14:03 - [34mdebug[39m: loadFilesContents
14:14:04 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"mieter":"Max","erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":false,"erspartes":false,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
14:14:04 - [34mdebug[39m: Engine processing clause formula_34a3cdb8027c6746234b097190650b18b0615cce8fd482971b9f83d68e49d104 with state org.accordproject.cicero.contract.AccordContractState
14:14:04 - [34mdebug[39m: Calling eval with context [object Object]
14:14:04 - [32minfo[39m: Mietvertrag
====

**Ich** vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Mieter zahlt fristgerecht
{{%"Mieter zahlt fristgerecht"%}}
selbst die Sparbüchse ist leer

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
14:25:12 - [32minfo[39m: Using current directory as template folder
14:25:12 - [32minfo[39m: Loading a default data.json file.
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileBuffer
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: fromDirectory
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: fromDirectory
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFileContents
14:25:12 - [34mdebug[39m: loadFilesContents
14:25:12 - [31merror[39m: Expected "@", "abstract", "asset", "concept", "enum", "event", "participant", "transaction", comment, end of input, end of line, or whitespace but "p" found. File C:/Users/weisgerb/Documents/Arbeit/02_Praxiseinsatz_Studylab/workspace/mietvertrag/model/model.cto line 21 column 1
14:26:25 - [32minfo[39m: Using current directory as template folder
14:26:25 - [32minfo[39m: Loading a default data.json file.
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileBuffer
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: fromDirectory
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: fromDirectory
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFileContents
14:26:25 - [34mdebug[39m: loadFilesContents
14:26:31 - [34mdebug[39m: fromDirectory
14:26:31 - [34mdebug[39m: loadFileContents
14:26:31 - [31merror[39m: Cannot read property 'push' of undefined
14:36:16 - [32minfo[39m: Using current directory as template folder
14:36:16 - [32minfo[39m: Loading a default text/sample.md file.
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileBuffer
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: fromDirectory
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: fromDirectory
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFilesContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:16 - [34mdebug[39m: loadFileContents
14:36:21 - [34mdebug[39m: fromDirectory
14:36:21 - [34mdebug[39m: loadFileContents
14:36:21 - [31merror[39m: Cannot read property 'push' of undefined
TypeError: Cannot read property 'push' of undefined
    at Array.emphasis (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\rules_inline\emphasis.js:23:22)
    at ParserInline.tokenize (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_inline.js:135:22)
    at ParserInline.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_inline.js:163:8)
    at Array.inline (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\rules_core\inline.js:10:23)
    at Core.process (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_core.js:51:13)
    at MarkdownIt.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\index.js:523:13)
    at templateToTokens (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:187:19)
    at ParserManager.initParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:178:33)
    at ParserManager.buildParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:192:18)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:231:32
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
14:39:50 - [32minfo[39m: Using current directory as template folder
14:39:50 - [32minfo[39m: Loading a default text/sample.md file.
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileBuffer
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: fromDirectory
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: fromDirectory
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFileContents
14:39:50 - [34mdebug[39m: loadFilesContents
14:39:55 - [34mdebug[39m: fromDirectory
14:39:55 - [34mdebug[39m: loadFileContents
14:39:55 - [31merror[39m: Cannot read property 'push' of undefined
TypeError: Cannot read property 'push' of undefined
    at Array.emphasis (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\rules_inline\emphasis.js:23:22)
    at ParserInline.tokenize (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_inline.js:135:22)
    at ParserInline.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_inline.js:163:8)
    at Array.inline (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\rules_core\inline.js:10:23)
    at Core.process (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_core.js:51:13)
    at MarkdownIt.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\index.js:523:13)
    at templateToTokens (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:187:19)
    at ParserManager.initParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:178:33)
    at ParserManager.buildParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:192:18)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:231:32
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
14:40:43 - [32minfo[39m: Using current directory as template folder
14:40:43 - [32minfo[39m: Loading a default data.json file.
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileBuffer
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: fromDirectory
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: fromDirectory
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFileContents
14:40:43 - [34mdebug[39m: loadFilesContents
14:40:48 - [34mdebug[39m: fromDirectory
14:40:48 - [34mdebug[39m: loadFileContents
14:40:48 - [31merror[39m: Cannot read property 'push' of undefined
14:50:43 - [32minfo[39m: Using current directory as template folder
14:50:43 - [32minfo[39m: Loading a default text/sample.md file.
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileBuffer
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: fromDirectory
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: fromDirectory
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFileContents
14:50:43 - [34mdebug[39m: loadFilesContents
14:50:48 - [34mdebug[39m: fromDirectory
14:50:48 - [34mdebug[39m: loadFileContents
14:50:48 - [31merror[39m: Cannot read property 'push' of undefined
TypeError: Cannot read property 'push' of undefined
    at Array.emphasis (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\rules_inline\emphasis.js:23:22)
    at ParserInline.tokenize (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_inline.js:135:22)
    at ParserInline.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_inline.js:163:8)
    at Array.inline (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\rules_core\inline.js:10:23)
    at Core.process (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\parser_core.js:51:13)
    at MarkdownIt.parse (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\markdown-it\lib\index.js:523:13)
    at templateToTokens (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:187:19)
    at ParserManager.initParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:178:33)
    at ParserManager.buildParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:192:18)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:231:32
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
14:59:05 - [32minfo[39m: Using current directory as template folder
14:59:05 - [32minfo[39m: Loading a default text/sample.md file.
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileBuffer
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: fromDirectory
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: fromDirectory
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFileContents
14:59:05 - [34mdebug[39m: loadFilesContents
14:59:10 - [34mdebug[39m: fromDirectory
14:59:10 - [34mdebug[39m: loadFileContents
14:59:10 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
TemplateException: Unknown property: vorname File text/grammar.tem.md line -1 column -1
    at _throwTemplateExceptionForElement (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:118:11)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:113:21)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:161:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:275:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:271:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:275:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at templateMarkTypingGen (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:130:11)
    at templateMarkTyping (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:151:12)
    at ParserManager.initParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:180:33)
    at ParserManager.buildParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:192:18)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:231:32
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
15:04:48 - [32minfo[39m: Using current directory as template folder
15:04:48 - [32minfo[39m: Loading a default text/sample.md file.
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileBuffer
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: fromDirectory
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: fromDirectory
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFileContents
15:04:48 - [34mdebug[39m: loadFilesContents
15:04:57 - [34mdebug[39m: fromDirectory
15:04:57 - [34mdebug[39m: loadFileContents
15:04:57 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
TemplateException: Unknown property: vorname File text/grammar.tem.md line -1 column -1
    at _throwTemplateExceptionForElement (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\errorutil.js:118:11)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:113:21)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:161:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:275:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:271:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:49:18
    at Array.forEach (<anonymous>)
    at Function.visitNodes (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:48:16)
    at Function.visitChildren (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:37:25)
    at TypeVisitor.visit (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\TypeVisitor.js:275:25)
    at ValidatedConcept.accept (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\concerto-core\lib\model\typed.js:57:24)
    at templateMarkTypingGen (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:130:11)
    at templateMarkTyping (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\templatemarkutil.js:151:12)
    at ParserManager.initParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:180:33)
    at ParserManager.buildParser (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\markdown-template\lib\parsermanager.js:192:18)
    at C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:231:32
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:16:103)
    at _next (C:\Users\weisgerb\AppData\Roaming\npm\node_modules\@accordproject\cicero-cli\node_modules\@accordproject\cicero-core\lib\templateloader.js:18:194)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
15:06:00 - [32minfo[39m: Using current directory as template folder
15:06:00 - [32minfo[39m: Loading a default data.json file.
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileBuffer
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: fromDirectory
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: fromDirectory
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFileContents
15:06:00 - [34mdebug[39m: loadFilesContents
15:06:05 - [34mdebug[39m: fromDirectory
15:06:05 - [34mdebug[39m: loadFileContents
15:06:05 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:10:11 - [32minfo[39m: Using current directory as template folder
15:10:11 - [32minfo[39m: Loading a default data.json file.
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileBuffer
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: fromDirectory
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: fromDirectory
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFileContents
15:10:11 - [34mdebug[39m: loadFilesContents
15:10:51 - [34mdebug[39m: fromDirectory
15:10:51 - [34mdebug[39m: loadFileContents
15:10:51 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:13:59 - [32minfo[39m: Using current directory as template folder
15:13:59 - [32minfo[39m: Loading a default data.json file.
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileBuffer
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: fromDirectory
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: fromDirectory
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFileContents
15:13:59 - [34mdebug[39m: loadFilesContents
15:14:05 - [34mdebug[39m: fromDirectory
15:14:05 - [34mdebug[39m: loadFileContents
15:14:05 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:17:48 - [32minfo[39m: Using current directory as template folder
15:17:48 - [32minfo[39m: Loading a default data.json file.
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileBuffer
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: fromDirectory
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: fromDirectory
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFileContents
15:17:48 - [34mdebug[39m: loadFilesContents
15:17:53 - [34mdebug[39m: fromDirectory
15:17:53 - [34mdebug[39m: loadFileContents
15:17:53 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:18:24 - [32minfo[39m: Using current directory as template folder
15:18:24 - [32minfo[39m: Loading a default data.json file.
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileBuffer
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: fromDirectory
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: fromDirectory
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFilesContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:24 - [34mdebug[39m: loadFileContents
15:18:29 - [34mdebug[39m: fromDirectory
15:18:29 - [34mdebug[39m: loadFileContents
15:18:30 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:32:26 - [32minfo[39m: Using current directory as template folder
15:32:26 - [32minfo[39m: Loading a default data.json file.
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileBuffer
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: fromDirectory
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: fromDirectory
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFileContents
15:32:26 - [34mdebug[39m: loadFilesContents
15:32:31 - [34mdebug[39m: fromDirectory
15:32:31 - [34mdebug[39m: loadFileContents
15:32:32 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:33:02 - [32minfo[39m: Using current directory as template folder
15:33:02 - [32minfo[39m: Loading a default data.json file.
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileBuffer
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: fromDirectory
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: fromDirectory
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFileContents
15:33:02 - [34mdebug[39m: loadFilesContents
15:33:06 - [34mdebug[39m: fromDirectory
15:33:06 - [34mdebug[39m: loadFileContents
15:33:06 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:40:32 - [32minfo[39m: Using current directory as template folder
15:40:32 - [32minfo[39m: Loading a default data.json file.
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileBuffer
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: fromDirectory
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: fromDirectory
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFileContents
15:40:32 - [34mdebug[39m: loadFilesContents
15:40:38 - [34mdebug[39m: fromDirectory
15:40:38 - [34mdebug[39m: loadFileContents
15:40:38 - [31merror[39m: Unknown property: vorname File text/grammar.tem.md line -1 column -1
15:41:58 - [32minfo[39m: Using current directory as template folder
15:41:58 - [32minfo[39m: Loading a default data.json file.
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileBuffer
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: fromDirectory
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: fromDirectory
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFilesContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:41:58 - [34mdebug[39m: loadFileContents
15:42:04 - [34mdebug[39m: fromDirectory
15:42:04 - [34mdebug[39m: loadFileContents
15:42:04 - [34mdebug[39m: fromDirectory
15:42:04 - [34mdebug[39m: fromDirectory
15:42:04 - [34mdebug[39m: loadFilesContents
15:42:04 - [34mdebug[39m: loadFilesContents
15:42:04 - [34mdebug[39m: loadFilesContents
15:42:04 - [34mdebug[39m: loadFilesContents
15:42:04 - [34mdebug[39m: loadFilesContents
15:42:04 - [34mdebug[39m: loadFileContents
15:42:04 - [34mdebug[39m: loadFilesContents
15:42:05 - [31merror[39m: Type error (at file logic/logic.ergo line 20 col 28). This operator received unexpected arguments of type `String'  and `RentalParty'.
    return antwort{ output: "Hello " ++ contract.mieter ++ " Du hast mir noch nicht die Miete gezahlt. Ich Erwarte bis nächste Woche €" ++ request.pay}
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                   
15:42:38 - [32minfo[39m: Using current directory as template folder
15:42:38 - [32minfo[39m: Loading a default data.json file.
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileBuffer
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: fromDirectory
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: fromDirectory
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFileContents
15:42:38 - [34mdebug[39m: loadFilesContents
15:42:44 - [34mdebug[39m: fromDirectory
15:42:44 - [34mdebug[39m: loadFileContents
15:42:44 - [34mdebug[39m: fromDirectory
15:42:44 - [34mdebug[39m: fromDirectory
15:42:44 - [34mdebug[39m: loadFilesContents
15:42:44 - [34mdebug[39m: loadFilesContents
15:42:44 - [34mdebug[39m: loadFilesContents
15:42:44 - [34mdebug[39m: loadFilesContents
15:42:44 - [34mdebug[39m: loadFilesContents
15:42:44 - [34mdebug[39m: loadFileContents
15:42:44 - [34mdebug[39m: loadFilesContents
15:42:45 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"vermieter":{"$class":"org.example.mietvertrag01.RentalParty","vorname":"Hendrik","nachname":"Weisgerber"},"mieter":{"$class":"org.example.mietvertrag01.RentalParty","vorname":"Max","nachname":"Muller"},"erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":false,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
15:42:45 - [31merror[39m: Invalid or missing identifier for Type RentalParty in namespace org.example.mietvertrag01
15:47:54 - [32minfo[39m: Using current directory as template folder
15:47:54 - [32minfo[39m: Loading a default data.json file.
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileBuffer
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: fromDirectory
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: fromDirectory
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFileContents
15:47:54 - [34mdebug[39m: loadFilesContents
15:48:01 - [34mdebug[39m: fromDirectory
15:48:01 - [34mdebug[39m: loadFileContents
15:48:01 - [34mdebug[39m: fromDirectory
15:48:01 - [34mdebug[39m: fromDirectory
15:48:01 - [34mdebug[39m: loadFilesContents
15:48:01 - [34mdebug[39m: loadFilesContents
15:48:01 - [34mdebug[39m: loadFilesContents
15:48:01 - [34mdebug[39m: loadFilesContents
15:48:01 - [34mdebug[39m: loadFilesContents
15:48:01 - [34mdebug[39m: loadFileContents
15:48:01 - [34mdebug[39m: loadFilesContents
15:48:02 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"vermieter":{"$class":"org.example.mietvertrag01.RentalParty","partyId":"Hendrik","nachname":"Weisgerber"},"mieter":{"$class":"org.example.mietvertrag01.RentalParty","partyId":"Max","nachname":"Muller"},"erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":false,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
15:48:02 - [31merror[39m: Instance org.example.mietvertrag01.RentalParty#Hendrik missing required field vorname
15:48:31 - [32minfo[39m: Using current directory as template folder
15:48:31 - [32minfo[39m: Loading a default data.json file.
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileBuffer
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: fromDirectory
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: fromDirectory
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFileContents
15:48:31 - [34mdebug[39m: loadFilesContents
15:48:37 - [34mdebug[39m: fromDirectory
15:48:37 - [34mdebug[39m: loadFileContents
15:48:37 - [34mdebug[39m: fromDirectory
15:48:37 - [34mdebug[39m: fromDirectory
15:48:37 - [34mdebug[39m: loadFilesContents
15:48:37 - [34mdebug[39m: loadFilesContents
15:48:37 - [34mdebug[39m: loadFilesContents
15:48:37 - [34mdebug[39m: loadFilesContents
15:48:37 - [34mdebug[39m: loadFilesContents
15:48:37 - [34mdebug[39m: loadFileContents
15:48:37 - [34mdebug[39m: loadFilesContents
15:48:38 - [31merror[39m: Type error (at file logic/logic.ergo line 20 col 40). The field `vorname' does not exist in type `RentalParty'
    return antwort{ output: "Hello " ++ contract.mieter.vorname ++ " Du hast mir noch nicht die Miete gezahlt. Ich Erwarte bis nächste Woche €" ++ request.pay}
                                        ^^^^^^^^^^^^^^^^^^^^^^^                                                                                                   
15:48:56 - [32minfo[39m: Using current directory as template folder
15:48:56 - [32minfo[39m: Loading a default data.json file.
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileBuffer
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: fromDirectory
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: fromDirectory
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFileContents
15:48:56 - [34mdebug[39m: loadFilesContents
15:49:06 - [34mdebug[39m: fromDirectory
15:49:06 - [34mdebug[39m: loadFileContents
15:49:06 - [34mdebug[39m: fromDirectory
15:49:06 - [34mdebug[39m: fromDirectory
15:49:06 - [34mdebug[39m: loadFilesContents
15:49:06 - [34mdebug[39m: loadFilesContents
15:49:06 - [34mdebug[39m: loadFilesContents
15:49:06 - [34mdebug[39m: loadFilesContents
15:49:06 - [34mdebug[39m: loadFilesContents
15:49:06 - [34mdebug[39m: loadFileContents
15:49:06 - [34mdebug[39m: loadFilesContents
15:49:09 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"vermieter":{"$class":"org.example.mietvertrag01.RentalParty","partyId":"Hendrik","nachname":"Weisgerber"},"mieter":{"$class":"org.example.mietvertrag01.RentalParty","partyId":"Max","nachname":"Muller"},"erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":false,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
15:49:09 - [34mdebug[39m: Engine processing clause formula_34a3cdb8027c6746234b097190650b18b0615cce8fd482971b9f83d68e49d104 with state org.accordproject.cicero.contract.AccordContractState
15:49:09 - [34mdebug[39m: Calling eval with context [object Object]
15:49:09 - [32minfo[39m: Mietvertrag
====

**Ich**"Hendrik" "Weisgerber" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" "Muller" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Mieter kann nicht zahlen
{{%"Mieter kann nicht zahlen"%}}
selbst die Sparbüchse ist leer

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
15:50:48 - [32minfo[39m: Using current directory as template folder
15:50:48 - [32minfo[39m: Loading a default data.json file.
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileBuffer
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: fromDirectory
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: fromDirectory
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFileContents
15:50:48 - [34mdebug[39m: loadFilesContents
15:50:58 - [34mdebug[39m: fromDirectory
15:50:58 - [34mdebug[39m: loadFileContents
15:50:58 - [34mdebug[39m: fromDirectory
15:50:58 - [34mdebug[39m: fromDirectory
15:50:58 - [34mdebug[39m: loadFilesContents
15:50:58 - [34mdebug[39m: loadFilesContents
15:50:58 - [34mdebug[39m: loadFilesContents
15:50:58 - [34mdebug[39m: loadFilesContents
15:50:58 - [34mdebug[39m: loadFilesContents
15:50:58 - [34mdebug[39m: loadFileContents
15:50:58 - [34mdebug[39m: loadFilesContents
15:50:59 - [34mdebug[39m: Setting clause data: {"$class":"org.example.mietvertrag01.MyContract","address":{"$class":"org.accordproject.address.PostalAddress","streetAddress":"Boeblinger Strasse 10","postalCode":"Boeblingen","postOfficeBoxNumber":"77777","addressRegion":"Bonn","addressLocality":"Bonn","addressCountry":"Germany"},"vermieter":{"$class":"org.example.mietvertrag01.RentalParty","partyId":"Hendrik","nachname":"Weisgerber"},"mieter":{"$class":"org.example.mietvertrag01.RentalParty","partyId":"Max","nachname":"Muller"},"erstes_datum":"2020-08-20T00:00:00.000+02:00","zweites_datum":"2021-08-20T00:00:00.000+02:00","preis":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"pleite":true,"erspartes":false,"paymentClause":{"$class":"org.example.mietvertrag01.PaymentClause","amountText":"vierhundert","amount":{"$class":"org.accordproject.money.MonetaryAmount","doubleValue":400,"currencyCode":"EUR"},"paymethod":"überweisen","clauseId":"0323edd5-5b07-4bc6-b47a-ac628e0209fb"},"contractId":"50b860f9-910d-4ab5-bfcf-7c54a07df2f7"}
15:50:59 - [34mdebug[39m: Engine processing clause formula_34a3cdb8027c6746234b097190650b18b0615cce8fd482971b9f83d68e49d104 with state org.accordproject.cicero.contract.AccordContractState
15:50:59 - [34mdebug[39m: Calling eval with context [object Object]
15:50:59 - [32minfo[39m: Mietvertrag
====

**Ich**"Hendrik" "Weisgerber" vermiete meine *Wohnung* "Boeblinger Strasse 10" "Boeblingen" "77777" "Bonn" "Bonn" "Germany" an "Max" "Muller" fuer den Zeitraum von 08/20/2020 bis 08/20/2021 fuer einen ***Monatlichen*** preis von 400.0 EUR.
Mieter kann nicht zahlen
{{%"Mieter kann nicht zahlen"%}}
selbst die Sparbüchse ist leer

Payment
----

{{#clause paymentClause}}
Der mieter muss dem vermieter die "vierhundert" (400.0 EUR) "überweisen".
{{/clause}}
